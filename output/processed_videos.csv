course_name,video_path,transcript_text,keywords,recommended_tasks
0_Python_for_Beginners_Programming_Tutorial.mp4,D:/Project/Python_Ai_Course_Recommeder/data/videos/001_0_Python_for_Beginners_Programming_Tutorial.mp4," Do you want to learn programming in a fun way? And that too, the fastest growing language, which is Python. So here we are. Welcome to Therese called learnings. My name is Devindwade and in this series, you will learn Python language from start to end. The only prerequisite here is your time. Nothing else. If you have not done programming before, that's completely fine because in this series, we will start from scratch. So you will understand the language fundamentals. You will understand the syntax and not just that. We will also focus on concepts. So this Python series will be fun to learn and that too, it is freely available. So you can learn the entire Python language for free. When you're learning something online, you know, you may get bored or you may get distracted. But don't worry. In this series, I will try to make this session as much as interesting as possible. Maybe with the help of my presence, maybe with the help of animations and different stuff. So I hope you will enjoy this series. But make sure that you subscribe to the channel before going ahead and also share with your friends let everyone learn programming. Welcome to the Alien World, everyone.",":available learn, understand language, learn freely, language free, programming completely, entire python, want learn, fun learn, learning online, python series, programming welcome, programming fun, concepts python, python language, python welcome","Recommended Tasks:
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a list of 5 fruits and print each using a loop.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create variables for name, age, and marks. Print them all with labels.
- Implement a linear search to find a number in a list.
- Practice positional, keyword, default, and variable-length arguments.
- Print the elements of a list using a for loop.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program that prints ""Hello, World!"" and your name.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero."
1_Python_Tutorial_for_Beginners_Introduction_to_Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\002_1_Python_Tutorial_for_Beginners_Introduction_to_Python.mp4," Welcome back, aliens. My name is Naveen Weddy. And finally, we are starting with a series on Python or Python. It doesn't matter how you pronounce it. What matters is it is one of the fastest growing language. In what terms? In terms of number of developers who are using it, in terms of the number of libraries we have, in terms of number of companies who are using it, and in terms of the areas you can implement it. You talk about machine learning, you talk about GUI, software development, web development. You can use it everywhere. And that's why it is also called as a general purpose language. So in this video, we're going to talk about what is Python and why it is so useful and why you should learn it. So what is Python? As I mentioned, Python is a programming language, of course, but it's also an interpreted object oriented and high level language. Now, does it mean you cannot do procedures here? You can. It also supports procedure and programming as well as object oriented. It depends upon your purpose, right? You can use it the way you want. But why are the pages of famous? We have C++, Java, JavaScript, and still Python's famous? Now, some people say that Python is a new language. And not exactly. Java came into picture in 1995, and Python came in 1989. So it's way before Java, right? Now, so when Java came into picture, the enterprise market, you know, everyone started using Java, but then Python was there. You know, it was there for other people to use example. Let's say if you want to learn a language for the first time, Python was there. But now since the advancement of machine learning AI, this is a field where we have research scientists, they don't want to spend much time on learning programming language. So what they do, they went for the easiest language available, and the easiest language available in the market is Python. And yes, Python is damn easy. It is much simpler than C++ and Java. That's why most of the colleges and schools they are teaching Python. You might be thinking which company uses Python. Now let's just list those small, small companies who use this Python. We have Google, we have YouTube, we have Dropbox. So we can see we have all these companies who are using Python as a main language or as a support language example. Let's say Google has so many features. Some of those features is code and in Python. Now, in the same way, we have this one of the big website call as Reddit. Reddit is today written in Python. Now let's focus on this name Python. In fact, when you talk about C++ Java, these names, they have some story, right? What about Python? It's just because this language looks like a snake. I'm not exactly the author of Python. He's a big fan of a British comedy movie called as Monte Python's Flying Circus. And that's why he went with the name called as Python initially. And then when everyone wanted, everyone liked it, he went for the same name. Now can they learn Python and the answer is yes. It is one of the easiest language to learn. And even if you are from a non-technical background, you have not written any code, you can start with Python. What if I say Python came into picture just to help those people who don't know how to write a code? In fact, children can learn Python. It's that easy. Now Python has multiple versions. We have 1.x, we have 2.x, and we have 3.x. And of course, we should be learning 3.x, right? That means 2.x is not in the market. And the answer is no. The 2.x is still in the market. Because when 3.x came into picture, it was very different from 2.x. Normally what happens in programming language, you know? When Java 8 came into picture, so it was backward compatible with Java 1.7. When Java 1.7 came into picture, it was backward compatible with 1.6. But that's not the case with Python. The two different versions has two different way of working. And that's why we have 2.x still running in the market. And it does have a support till 2020. So which one you should learn? Of course, 3.x, right? Because it is new and there will be a lot of features which you can work on. So that's the introduction from this video. In the next video we'll talk about how to install Python, how to work with different stuff. And the entire series, we will enjoy this language. So I hope you will be watching this series. Let me know in the comment section and do feel like what if you're enjoying it. Thanks for watching everyone. Bye-bye.","python famous, install python, python thinking, say python, mentioned python, use python, python main, written python, python different, talk python, python new, teaching python, start python, python initially, python useful","Recommended Tasks:
- Add single-line and multi-line comments to a script.
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Connect to MySQL using mysql.connector and run a query.
- Create a class Car with attributes and a method to display info.
- Create a function with default and positional arguments.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create variables for name, age, and marks. Print them all with labels.
- Implement a linear search to find a number in a list.
- Install Anaconda and create a new environment.
- Practice positional, keyword, default, and variable-length arguments.
- Print the elements of a list using a for loop.
- Research and list 3 real-world projects you want to build after learning Python.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a script and observe behavior during runtime (interpreted)."
2_Python_Tutorial_for_Beginners_Python_Installation_PyCharm.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\003_2_Python_Tutorial_for_Beginners_Python_Installation_PyCharm.mp4," Welcome back Aliens, my name is Evan Reddy and in this video we'll talk about the Python installation. The thing is we have talked about the language which is very powerful but then where you will write your code. Of course we can simply open your note pad and we can write the code which we want, right? So example I can simply go back here and I can say okay what type of code I want to write. So it can be anything it can be let's say 2 plus 3. Now when you say you want to write a code it can be a calculation a computation so basically a normal calculation like adding to numbers or deciding in which stock to invest or maybe deciding who should be the next CEO. So basically the idea is if you want write a code to design a software which can do some activities we have to write a code but where if you write the code in the note pad of course you're not getting the output where you will get the output for this this is tricky right and that's why in your machine you need a Python interpreter so basically we have to install some software and in this machine I don't have it. How do I verify it's very simple you can open your command prompt so if you're using Windows you can use command prompt to check it or if you're using Mac or Linux you can open the terminal. So I'm here on command prompt and here let me see if I have Python. Now basically the way you can check that is by saying Python version and if you get this type of error which which says Python was not found that means in this machine I don't have Python. Okay with Python 3 you might also check if do you have Python 3 installed and you can see nothing is there so even if you have Python installed sometime it will not work with the Python command it might work for the Python 3 command so do check both versions and in this machine I don't have any so how do you get it so the first thing we need is Python interpreter and okay let's say we got Python interpreter and then we you can write a the thing is in the interpreter it provides you an option of writing a code one line at a time so of course you can add to numbers but what if you want to build a big project now it can be a scientific project or a AI project now that's what is booming nowadays so if you want to build a AI project or a web application or a desktop application where you will do it for that you need a software where you can write the code test your code run your code debug your code and also deploy your code to the cloud very well do it now that's what we have to use something called an IDE which stands for integrated development environment now for Python we have a lot of options now one is very famous which is your pycharm now this is from JetBrains again in this video I will show you how to install Python interpreter and the pycharm so let's start with the interpreter so what you will do is in fact in the updated version of windows when you say Python enter it will open the Microsoft store but let's say if you don't have this configured that's fine what you can do is you can just go to Google and search for Python download so you can say this is the option you will get so of course the first website says Python you can download it from here now in the of quibbing videos you might see a different version of python install and that's completely fine because in the version difference you will not find a lot of changes so even those things those code will work here okay so you can go for python 3.12 which is the latest version I feel so if I click on download so you can see we got download python 3.12 so you can download this version 13 is into release so don't use study as a this point we got 12 which is studying point 3.12 so we can click here and say download okay so you can see it is downloading and downloading complete I feel yeah that's done now depend upon which OS you have windows linux or mac depend upon that you can choose from here so you can say we have different options here and yeah so that's a thing so let me click on this and install so basically I don't have this install so I will just click here and now this will install this software okay so you can see we have an option here which is install now or customized I will go for simple installation but before doing that I also want to say add python.exe to the path basically even if you have installed maybe whenever you open a different folder python may not be available there so if you do this add a python.exe to your path you don't have to manually search for the installation so you can click on this install now and it will take some time now if you skip that step of act to the path then you have to manually set the path but anyway when you do the act to path you don't have to do the next the other steps so by the time it is a killing installed what we can do is we can also get the pie charm downloads done so I will search for pie charm now pie charm is from jet brings which is a very famous company for the IDs and software tools so it helps developers now basically you can also use VS code for python you can also use anaconda or idla which is the interpreter and yeah many more so I will just click on this I will say download pie charm the thing is when you download or when you get to the pie charm it's not actually free okay now that's a twist right so we have two versions then one is a paid version one is a free version so I would encourage you to go for the free version but yes once you become a professional once you're working for a company then it makes sense to use the paid version so this is the website and as I mentioned this is developed by jet brains which is the website here it's also the company and we also have a community version so if you want the community version you can scroll down and you can see we have two different versions professional and community I will click on the community version if you go for the professional version you will get trial for one month so you decide if you want to use it or not but I will encourage you to use the community version so it's going to be downloaded let me go back to my python setup and looks like python setup is completed let me click on close so setup is complete how do I verify again we have to go to command prompt now one thing to remember even if you have installed a python and if you'd actually do this it may not work so you have to reopen your command prompt so now if I say CMD and let me try now python version and you can see we got python installed this time we are getting a version number we're not getting that error which was getting earlier so yeah python is installed now how do I test it it's very simple you simply say python it will open the interpreter now this is where you can write a code of course doesn't look good right maybe you need a software where you will find in fact if you have learned some other languages you can write the code you can see the project you can run the code we'll see that in python but here you can see we got the interpreter and here I can simply add those two numbers and it is working right so you can here you can do calculations computations whatever you can do in this prompt apart from this if you want to open python you can also search for python so you can see it will also give you an app so you can also use this one this is the idea from python in fact idea looks like something like this so this is the python interpreter you can also use idea I know wide theme a lot of people don't like it but for youtube videos you know it makes sense to have a light theme it looks good it also encourages you to learn more but anyway that's your choice if you want to use a white or black or dark especially for me I prefer to use dark theme when I'm coding and for videos I prefer white themes anyway that's a different debate so I can just use this I can also say two plus three here I'm not sure if the font is visible but that's not important if I say two plus three enter okay we got syntax error again I will say two point three I think I've entered something weird okay so you can see we got five there so yeah you can do this here you can do that here or in the command prompt which we have opened earlier but what about the pie charm so we got the pie charm installation done so you can see we got pie charm download complete I will click on that taking some time and if you can see yes okay now setup is very simple here you just have to say next next it will detect the python as well they set up I'll click on next install again we'll take some time okay looks like a bulky software just doing a lot of extraction but that's a that's a thing with ideas you know they are bulky otherwise you can also use VS code if you want that's your personal choice everything which we are doing in pie charm or on the ideally it will also work on VS code okay setup complete and I can also say run here from here or I can simply click on finish let me open pie charm taking some time again okay don't want to import this settings any import click on okay so basically I'm using pie charm on this machine for the first time so you will get some extra problems okay so what you can do here is you can create a project you can name any project you can name anything you want I can click on create and voila you got your project here so this is how the pie charm looks like and that's your python code again don't get confused with the code here we'll understand this one step by step but this is yeah this is your python code here you can even run this if you want but it will take some time anyway we are going to see the pie charm how to use it later in the course so yeah that's it from this video where we have the setup for the python interpreter and pie charm so if you and if you are enjoying this series make sure that you hit that subscribe button and also hit the bell icon because that's how you will know when I upload the other videos on the platform","interpreter write, open interpreter, let python, python basically, check python, setup python, saying python, python app, python setup, idea python, add python, like python, writing code, write code, python code","Recommended Tasks:
- Add single-line and multi-line comments to a script.
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a Python module and import it into another file.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create variables for name, age, and marks. Print them all with labels.
- Implement a linear search to find a number in a list.
- Install Python and PyCharm, and run your first Python script that adds two numbers.
- Practice positional, keyword, default, and variable-length arguments.
- Print the elements of a list using a for loop.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use if __name__ == '__main__': to separate code from execution.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program to print your name, age, and favorite color.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a script and observe behavior during runtime (interpreted)."
3_Python_Tutorial_for_Beginners_Getting_Started_with_Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\004_3_Python_Tutorial_for_Beginners_Getting_Started_with_Python.mp4, Welcome back aliens my name is David Reddy and let's continue with this series of Python. Now we have talked about what is Python and we have talked about how to install Python on your machine. It's time to start with the actual stuff right and you are waiting for this. Now the step one would be of course you need to open your IDE. Now if you remember in the installation we have installed two software's one is the interpreter and second is your pycharm. That will not be using pycharm in this tutorial. We will start with the basics so that you will be having that hands on experience on IDLE as well. So let's try it out. So what I will do is I will open my IDLE and in that so this is your prompt. So this is your prompt this is where you will type your code now. You know before going for the actual code we have a question here. Why do we code and why do we write a code? Now think about this. We are living in a world where everything is done with the above computers right example if you want to send an SMS if you want to send an email you don't have to do that. Your computer will do it for you if you instruct it. Example nowadays we have this amazing thing you know we have Siri on iPhone and then we have Google Assistant on Android phones. You know you can ask them to do things for you example. You want to set an alarm you can you know they will do it for you. But then how they understand what you want to say. So you need to talk to a computer and if you want to talk to a computer you need to understand their language right and the language which can be understands is binary code which zeros and ones. Now that means if you want to talk to computer you need to talk to them in terms of zeros and ones. Now it is not actually possible right of course. So what you have to do is you need to use a language which will which both will understand and of course do we so we all know English language but computer will not understand plain English right because we have some grammatical stuff here. So what we have done is we have created programming languages. Now those are not actually example we have high level languages. Now those are not exactly a binary code and they are not even exactly same as English. They are somewhat you know they have their own protocols they have their own grammar which we use. So when I say English so we have level one English then we have level two which is programming language and then we have level three which is your which is your binary format. So you understand English. So what you will do is you will learn a programming language let's say Python in this case and then you will write a Python code which will get converted into binary format which are compatible understand. So if you say hey computer do something for me. So let's go with this very simple stuff here let's say I want to add two numbers. So you will say hey computer two plus three a computer will say okay five but then how you talk to a computer in this case. So we are using Python and then we have a interpreter. In fact in Python it's one of as we discussed it's one of the easiest language right. So what I will do is I will say two plus three this is the simplest task you can do on Python. So I will say two plus three it works you can see we got five years which this is working what else what about subtraction you know we we love mathematics right so let's apply all the idometer coefficients here. Let's try nine minus eight it should be one I think we got one so yes subtraction also works okay what else we can use can we use multiplication let's try four into six it should be twenty four yeah that's right we got the answer. So yes addition subtraction multiplication works what about division okay let's try so nice division it should be eight divide by four and I'm expecting answer to be two yeah it's two but hold on there is a difference here you can see if when we say two plus three we got five nine minus eight which is one so when you subtract two numbers we we are getting that number right and specifically this are integer numbers right we all use integers but then when you divide a number it is giving you a point value now this point when you also put this float numbers so we have integers and then we have float now float stands for floating point representation okay but why it is 2.0 because when you divide numbers you might get point values right example when you say five divided by two you will get 2.5 example let's try it out so if I say five divided by two you got 2.5 and you want that point five value right that's why it converts your number or your output into a float value because you want it they want to give you the exact value but what if you don't want it what if you want only the question part example when I say five divided by two you want only two you don't want point point five value so we can do that you know if you want only integer output so we don't want float now we want only integer you can do that you can say five instead of giving one slash you have to give two slash now this is also called as integer division or it is also called as flow division so when I say run this code you got two so this is working yeah okay what else we can do here can I do you know combination of this arithmetic operation example let's say eight plus nine yeah and then subtracted by let's say ten is it possible and let's try so it works you know so you can have multiple operations but then we have to follow grammar right if you say eight plus nine and then subtract you forgot to type 10 there it will give you an error which is invalid syntax and that's why you need to follow the grammar as well so in as in when you learn a language you need to follow grammars in the same way in programming as well you have to follow grammar can I use those brackets stuff which we used to use use in mathematics yes we can say example let's say we have eight and then we I'm adding that value but then I also have a value which is two into three now which one will be done first of course the multiplication part right but then what if you want to do it all let's try this first so you can see we got 14 which is eight plus six but what if I want to say eight plus two which is 10 and then three so in that case you need to use brackets right if you remember the board master all so I will say eight plus two which in the brackets and then into three so you can see we got 30 so yes this also works so when you multiply so if you give a bracket it will be solved first okay this is cool right now what else we can do here what if I want to find a power of all you can say exponent you know so let's say if you have two less to three or five less to six how can I do that so I will say two I want to find cube of two so in that case I can say two into two into two you have we can do that but then what if you have two you should 10 you cannot simply type two into two into two into ten times right because this will give you right answer is eight otherwise you can say two you can give double star and three so double star or double hash trick symbols simply means power of so when you say two lies two three so this is two hash trick has tricks three and you can say we got eight so that's how you have to find you have to do this all this operation so we now we know how to add to numbers how to subtract to numbers and then multiplication division a flow division but what else we can do here in fact you know we can all we can also do modulus now what is modulus here let's say I am dividing at I'm dividing two numbers which is ten divided by two or maybe three in this case now it's a ten divided by three it will give you three right but then we also have a remainder here which is one so if I when I say ten divided by which is the integer division you got three that's right but what if I want the remainder part of it so I would say ten and we have to use a special symbol here which is modulus and we'll say three you can see we got one which is a remainder so when you say ten more than three you will get a remainder which is one okay this works yay now you know all the operators right now what else we can do here now till this point we have discussed about you know the we are discussed about two types one is the integer type which we have done here and then we have talked about float what other types we can have here can we have string you know what a string means it's a combination of characters example my name Naveen is a string python is a string camera is a string youtube is a string right so we have to use can we can we use string here we can let's try so what I will do is whenever you want to use string you should it should you should always use single code or double code so let's try so I will use my name first so I will say single code and Naveen so we have to use a code here so you have to say Naveen and enter you can see we got the same value Naveen we have we got Naveen now there's another way of printing these values you know you can also print by providing some functions oh that's a new word now not a functions in python language we have certain functions which we can use and one of the function is print now what print means or what function means is it is a set of tasks which you will be doing so example in print which is inbuilt it has a certain task which it will do you just need to call it can we define our own functions yes we can so print is a inbuilt function we can define our own functions as well so you can do all these operations in one function you can do that let's we'll see that later how do we define our own function by time bin let's use print and when you have a print you normally give this round back edge to pass any parameter let's say if you want to pass something to the function you can do it here in this case I want to pass my own name so I'm saying print Naveen so you can see it works we got Naveen as a value there okay that works now if you said difference between Naveen the earlier command here if you compare this one with this one see the output so in the earlier one the single code is getting printed as well but in the second one it is only printing my name and that looks beautiful you know okay let's try to print something else I will say print and here I want to print let's say Naveen's laptop so Naveen's laptop it should print Naveen's laptop right when I say enter oh we caught an error that's weird now what went wrong here now if you observe here we have single code as a starting one and then we also have a single code here so that means that is one string and then this thing which is s laptop it is not is a part of that single code that's with that that's where the problem starts so you cannot simply have single code anywhere right so how do you solve this problem to solve this problem we have two solutions the first one is you instead of using single code you can use double codes example you can say print and in double codes you can say Naveen's laptop now since so starting and ending is done with the help of double codes you don't have to worry about the single code in between and if I say enter and you can see we got the output as Naveen's laptop now what else what other commands we can do so this this thing works here I will let me think about this what if I want to print double codes in a statement let's say we have print inside double codes I am saying Naveen laptop but I want to print laptop in double can I do that example the output should be Naveen and laptop but then the laptop should be in double codes we cannot do that because you know the first double codes and second double codes will be getting entered here so this this is my first string what about this laptop now in that case we will be using single code so single code and end with single code so you have to make sure the string part should be different from the part which are inside so if inside we have double codes then outside we should be using single code right that makes sense right so you can see we got the output but here's a trick what if I what if I have both in this string example let's say we have print I want to say Naveen's laptop and you can see we have both now we have double codes and we have single code both that's where the problem starts so what you will do now because if I say enter you got invalid syntax in that case we will say single code Naveen's and then in double codes we'll say laptop the issue is with this s right this s is coming before a single code so we have to tell you Python hey Python can you just skip that special meaning of that single code and the way you do that is by giving a slash so when you say backslash it will make sure that you it will ignore this special meaning of that single code so when I say enter it works you know so this is the basic fundamentals which we're talking about now let's do some fun here so again we'll continue with the print later but we have some fun thing here what if you want to print naveen two times or you want to print naveen three times can I do that of course we can write you can type naveen and then naveen again or you can also use a plus character here so if you want to concatenate two strings so we have two strings here right we have naveen and we have naveen so when I say enter so we can you can see we have naveen and naveen so we are combining it what if I want to print naveen three times or ten times in that case you know you can play with numbers as well so you can say ten into in single code you can say naveen and say enter you can see we got naveen ten times yeah so but it's fun actually you know you can you can play with it you can do some experiment that's amazing what if I want to print this one you tell me okay you get you try to guess it will it work or not just pause the video guess it let me know the comment section which will work or not and then we can continue what I will do is I will print something I would say C colon slash I have a I have a direct towards docs slash naveen so pause the video think about it and let's see what output you're giving let's try and say enter oh this is weird we will expecting it will print C colon docs slash naveen but unfortunately it is giving a new line and then a wind what's wrong now slash n has a special meaning in python what is that special meaning and the meaning is it it means new line so slash n means new line and that's what is happening here it prints it is printing C colon slash docs and then it comes to a new line because of slash n it is saying a win okay what I'll do is I want to print it I want to print it as it is how do I do that it's very simple you just need to cancel this special meaning of that thing right so you want to print this string as it is which is also called as raw string so I want to print this one as a raw string in that case you just specify R before the thing and you will say C colon slash docs slash naveen so we are printing this stuff as it is so when you say R it means raw string don't try to convert it that's what you are saying to python hey don't just try to don't try to convert that slash into a new special character and say enter it works yeah so everything is looking good now so I hope you enjoyed this stuff which we are doing here playing with this stuff and this in this video we have only talked about how can we use certain operators and then playing with printf in the next video we are going to talk about how to use variables now if you are enjoying this series let me know in the comment section about your thoughts and if you have any question you can put that as well I do read your comments by the way and if so that I can answer that in the next video and if you are liking my videos so click on the like button and do subscribe to channel for other videos thank you so much everyone bye bye,"tell python, task python, pycharm, python just, saying python, python code, talked python, hey python, python talked, python discussed, write python, python machine, using pycharm, pycharm using, pycharm tutorial","Recommended Tasks:
- Add single-line and multi-line comments to a script.
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a function with default and positional arguments.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create variables for name, age, and marks. Print them all with labels.
- Implement a linear search to find a number in a list.
- Install Anaconda and create a new environment.
- Install Python and PyCharm, and run your first Python script that adds two numbers.
- Install Sublime Text and write a script to calculate the area of a rectangle.
- Practice positional, keyword, default, and variable-length arguments.
- Print the elements of a list using a for loop.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use if __name__ == '__main__': to separate code from execution.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program to print your name, age, and favorite color.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break)."
4_Python_Tutorial_for_Beginners_Variables_in_Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\005_4_Python_Tutorial_for_Beginners_Variables_in_Python.mp4," Welcome back aliens my name is David Vetti and let's continue with this series on Python. In fact in the earlier videos we have talked about what is Python, we have installed two software and we have also worked with certain operations we had fun in the last session. Now in this video we are going to talk about what is variable but first of all why do we need one? Let's try something here. So what I will do is I will go back to my previous example you know we were adding two and three so we have done with that right we are saying two plus three. Now if you remember in maths what we do is we of course we work with numbers but then when the moment you start with algebra you have this concept of using x and y so what we do is we say let x is equal to five can you do that here so we have x equal to two. So I am storing this value to in a variable called as x and that's a new word now what is variable. So basically variable is a container where you can put your values example we are storing two here in a container and the name of that container is x. Of course you can give anything doesn't matter you can say ABC you can say a box you can give any name right. So we can say x equal to and the moment I say enter now this is the first time when you say enter and you have not got any output right so in the earlier the problems what we did is when we said any any operation it was giving you some output here we have not got any output it's just an assignment operation. So in assignment what we do is we have a variable name equal to a value so we are assigning two to x okay that works so can I you can I do this now can I say x plus three yes right because in x we have a value which is two or it works you can see we got five that works can I store three as well let's try so I will say y is equal to three now we have two variables x and y so we have two boxes and now I will say x plus y it works right it works so we can say x has to y has three and we are adding them okay so that's why we can we can use them but then why they are called as variables now normally when you say variable this term simply means you can change the value can we change here can I say x equal to 9 can I change the value from 2 to 9 let's try and the moment I say enter it works there was no error but now if I try to do this if I say x plus y x will have a value which is two or nine that's a question because we are changing it but there's no error enter or you got 12 that means the value of x now is nine okay so we can change the value and now we can justify that what is variables right so what is variable it's a box where you can have a value now doing to define the type of the variable you don't need to so the moment I assign a value you can it automatically detects what about value you are signing so in this case it is integer now let me just do this thing what if I say x and if I say enter what it will do so the moment you say x and enter it will print the value of x in this case which is nine right what if I use a variable ABC now of course we have not defined this variable right and we are still trying to use it now when I say enter you got an error the other is it says name error ABC name ABC is not defined and that's why we have not defined ABC yet so if you are if you are using a variable which is not defined so it will of course give you an error now I will do one more thing I will say x plus 10 so of course it will give you 19 now what if I want to add 19 with y I mean something this something in this way I would say 19 plus y but then if you think about this 19 this is the output of the previous operation right now if you want to use the output of the previous operation we can use underscore underscore represents the output of the previous operation and if I say enter you can say regard 22 so it is 19 plus three which is 22 so they want this works right so this amazing you know there are so many things you can you can work with this so we can use variables for numbers right so we can use it for float or integer what about string can I use names with can I use variables with string or the string variable let's try so I will get a variable as name and I will use a name as YouTube and if I say enter it works and if I print name we got YouTube so it is perfectly working so we can use string as well so example I can say name plus YouTube rocks so you can you can see we got YouTube rocks so it is name which is YouTube plus rocks okay this even this work that's perfectly fine in fact let me just do an experiment can I say name and space rocks okay this is not working so we have to make sure that you put plus there because if you have plus then then only it will try to interpret that now there's this one thing which is very fancy here you know so when you talk about YouTube it's a string right and it's a combination of characters that means even if I want to fetch one character it should be able we should be able to do that right and yes we can do that so if I say name and if I want to fetch one character how will I do that so let's say if I have a YouTube here and YouTube has seven letters or seven characters if you when you break it down it will create an array or you can say collection of characters the numbering starts with zero because normally in computers numbering always starts with zero so here if you want to fetch it we have to use a square bracket and you have to mention zero so we are specifying hey I want to fetch the first letter of names in this case it is why it works so now I will fetch the last one which is six which is E in this case I've got E that works now I will fetch let's say eight see we don't have it we don't have nine characters right we only have seven characters so the first one is zero the last one is six how about eight the moment you do that it will give you an error it says index error string index out of range so of course you are going out of your limit right so you cannot do that okay can I use negative numbers let's try I will use minus one so I want to I want your guess here what you think it will what it will do come on think about it okay so let me just enter it and let's see what happens so when I say enter you got E okay so the answer is when you say minus number it will start from right to left okay so it will it will start with the ending so which is E in this case that means if I say minus two it will give you the second last data which is B that's right and if I say minus seven which will be the first one right which is why oh it works it goes in reverse order now now what if I want to print two characters not one two so let's say I want to print Y and O so in this case I will say name and I will start with zero of course we want to print zero the first character and the second character right that means we will give two now this two doesn't means number of characters it means the ending so I want to start with zero and one so first two characters and you can see we got Y zero the same thing if I do it for one colon four so come on guess so one means second character right so it will start with O and it will end at three because you cannot include four so it will it is exclusive of four so it is one which is O U and T oh it works we got out yes yes out it works now what if I specify only one and colon if I don't specify the ending what happens in this case it will start with one and it will come it will go till the end okay that house works so if you don't specify the ending part it will go in that way what if I specify the ending part but not the starting point example if I say or if I if I keep it blank and after colon I will say four now in this case it will start with the first letter and it will end at three which is before four and that's why you got Y O U T so this one right okay what else we can do here what if I specify name and I will give down values I will say three colon ten of course we don't have ten characters right now in this case it will end at the last one which is available so it will not give you any other in this at this case you can see we got T UBE tube start with T and then it's end at E because we don't have any other characters so if you don't if you want to avoid errors this is what this one way okay now can I change the letter example I don't want it to be YouTube I want to I want it to be my tube so I will say name from zero to three I want to change this with my can I do that so I'm changing Y O U to my the moment I say enter you got an error it says string object does not support item assignment so the thing is once you assign the value you cannot change it not even for one character if I say zero I want to change the first character to rot you even this will not work you can see we got the error so you cannot change the value that means strings in Python is immutable you cannot change the value of it that's awesome right but then that doesn't means you cannot you cannot change while printing example if I if I want to print my tube you can do that so first I will print my and then I will give up I will give a space and then plus I want to print tube right so in in that case I will say three colon six or maybe the ending part does it matter so you can see we got my tube if you don't want space you can do that you can say my and then without space you can type it to so this works yeah so this is how you work with string you work with variables right you can have a number of variables you can have a float variables and you can have a string variable as well in fact which string we have one more thing let's say if you define a string which is let's say my name is a variable and my name here is now in ready and if I want to know the length of my name we can do that so we have a length function and we can pass my name as I as I mentioned there are some inbuilt functions available in Python and one of them is length length so you can see we got 11 characters so yeah that's it that's it from this video where we have talked about different variables assignments and stuff so I hope you are enjoying my section let me know in the comments section and I do you like it if you're enjoying it thank you so much for watching everyone bye","equal variables, assignment variable, operations fun, variables right, algebra, float variables, start algebra, python, variable use, use variables, basically variable, variable basically, variables numbers, number variables, algebra concept","Recommended Tasks:
- Add single-line and multi-line comments to a script.
- Ask the user for their name and age, then print a greeting.
- Build a calculator that performs +, -, *, /, and % based on user input.
- Combine two lists using zip() and convert them to a dictionary.
- Compare two objects using their attributes.
- Compute the factorial of a number using a loop.
- Connect to MySQL using mysql.connector and run a query.
- Create a Django model class with fields and explain what it represents in DB.
- Create a Python module and import it into another file.
- Create a class Car with attributes and a method to display info.
- Create a function that receives a list and prints the square of each number.
- Create a function with default and positional arguments.
- Create a list of 5 fruits and print each using a loop.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create an abstract class with an abstract method and subclass it.
- Create an array using the array module and perform basic operations.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create two unrelated classes with the same method names, and use them interchangeably.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate instance, class, and static variables.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Demonstrate use of a global variable inside a function.
- Implement a linear search to find a number in a list.
- Import a file and observe how __name__ behaves differently.
- Install Anaconda and create a new environment.
- Install Django using pip and create your first project using django-admin startproject.
- Install NumPy and create a NumPy array from a list.
- Install Python and PyCharm, and run your first Python script that adds two numbers.
- Install Sublime Text and write a script to calculate the area of a rectangle.
- Instantiate objects of a class and call their methods.
- Launch Jupyter Notebook and run a simple Python cell.
- Make a dictionary storing student names and their scores. Print each pair.
- Practice positional, keyword, default, and variable-length arguments.
- Practice using Python IDLE. Run commands and explore how to clear the screen.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Push code to GitHub using Git in PyCharm.
- Repeat the swap task but with user input this time.
- Research and list 3 real-world projects you want to build after learning Python.
- Setup MySQL Workbench and connect to it via GUI.
- Simulate method overloading using default arguments; override a method in a child class.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use filter, map, and reduce to process a list of numbers.
- Use for-else to search for an item in a list. Print a message if not found.
- Use if __name__ == '__main__': to separate code from execution.
- Use lambda to double a number and to filter even numbers from a list.
- Use the help() function to explore any built-in Python function.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program that prints ""Hello, World!"" and your name.
- Write a Python program to print your name, age, and favorite color.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program that converts decimal to binary, octal, and hexadecimal.
- Write a program to print the Fibonacci series up to n terms.
- Write a program using multiple variables and perform operations on them.
- Write a script and observe behavior during runtime (interpreted)."
5_Python_Tutorial_for_Beginners_List_in_Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\007_5_Python_Tutorial_for_Beginners_List_in_Python.mp4," Welcome back to Arian's, my name is Darwin Reddy and let's continue with the series on Python. So we have done with the basic thing, we have installed the software and we have done some operations and worked with variables. In this video we will work with a concept called as list. Now to understand this, what I will do is I will open my ideal as usual. What I want to do here is we want to work with list right now what is list. Now let's imagine you have different values and let's say you have numbers and you have strings. Now if you want to group them together, now if you have worked on arrays in any other language, you know C, C++ or Java, we have the same or similar stuff in here which is a list. Now how do we use list? It's very simple actually. Let's say I have some numbs. Okay, so we have this variable because numbs equal to and now we can assign the values. Now you should have assigning one value, we can assign multiple values. Now there's a question. How will I assign multiple values? So let's say 25 to 12. Now in this case we need to use a special symbol or special character which is called square packet. So we have to use square packets here and in this square packet you have to mention the values. Okay, now which one? Any value doesn't matter. So I will say 25 to 12, maybe 36, maybe 95, 14. So I got this values. Now these are the list of values which I have here. Now you might be thinking can we only have similar type of data? Example, all these things are numbers right? Let's try that as well. So I will say enter here. Can I print it? We can. So simply type numbs and you've got the value. You can see we got 25 to 12, that is 6, 95 and 14. That's so simple. Now if you remember in the last session we have also talked about string and we say the case string is a collection of characters and we can pick up individual character with the help of index value, right? Can we do it here? And the answer is yes. Example, let's say I want to pick up the first value. We just 25 in this case. You know the answer, right? We simply have to say numbs and 0, enter. Oh, it worked. You can see we got 25. Let's say I want to fetch the last value which is numbs of, it should be 5, right? So oh, 4 because the value, the size of the list is 5. Typo's doesn't matter. So if I say enter you can see we got 14. So it's working, we got 14 as well. Okay. So we got 25, we got 14. So first and last is working. In fact not just, first and last you can pick up any value, right? What if you want to print something in between and then till the end? Now if you remember in string as also we have done that. So example, I want to print third element, fourth and fifth. So third and then to the end. So of course we can do that. We can start with two which is third element and we can give a colon and there's no end limit, right? So if I say enter you got the third element, fourth and fifth. Now what do you think? Can we use negative numbers the way we have done before? You know the index number as negative 1 minus 1 minus 2 minus 3. Yes, it works here as well. So we can say numbs of, so if you want to pick up that 14 which is at the end, you're right, we have to use minus 1 and it works. If you want to fetch the first element, we have to say minus 5, right? That's what we have done before. So yes, we can use negative names as well. Okay, how about having a string or another add a here or another least here will say numbs, will say names and names of. So what names? So I can have any name, see it, right? I can have Navine, I can have Kiran and I can have let's say John. So we got these three names here, right? And now when I say enter, you can see we also have a least of string. And if I print names, you got the names there. Okay, so now if you can see one add a which is numbers, we have second add a which is names, which is of string, we can create different list of different types. Now can I create a list of different types? I mean one list of different types. I will simply call it as values equal to, and I want to have any double value here. Example the first one I would say is 9.5, which is a float value. Then I want to go for a string, I will go with my name and then let's say another one, which is 25, which is a number, right? So we have a float number, we have a string and an integer number. If I say enter, it works. Okay, so we can have a list with different above data. And that's the beauty about the list. Now you can have different data. And that's not the case with other languages, right? In C, C++, Java, what we do is when we create an add a, it has to be of same type. Yes, in Java, we have the object array, but okay, let's not discuss that here. If you're only thinking about Python, this is we have. So we have a list where you're going to have different types. Can we have two list working together? I mean something like this. I want to get another list here. Mill is equal to miscellaneous things. So I will say mill is equal to, I want to have a list of list. Can we do that? Let's try. So I want to have this list, which will have numbs and which will also have names. So a mill will have names and numbs and names. Enter, there is no error. Okay, I will say mill. Okay, you can see we got a list and inside that list, we have two different list. One is of numbers and one is of string. Okay, that works. So the amazing thing about list is we can perform certain operations because it has certain methods to use, right? Or you can call them functions. Now how do we know that? So what I will do is I will say numbs dot. Now when you say numbs dot, of course, we have not got, oh, we got the pop up there. Can you see that? Now you can see we got a pen, we got clear, we got copy, count, extend, index. We can use all these functions. Let's try. Now the another thing about list is it is mutable. What is that? Mutable simply means you can change the values and we can do that here. Nums dot append, I want to append. What I want to append, let's say I want to append 45. And now if I say numbs, you can see we got 25 to well and then at the end, we got 45. So we can append it. What else we have? So if I, so if the pop up is not coming in stently, you can simply say control space. Okay, so we got clear as well. So clear, we'll clear the entire list for you. Try it out. You know, once you are watching this video, try it on your machine, different, different operations. So we have inserted right, or we can also use insert now difference between a pen and insert in append, it will append at the end in insert. It will add in between. Let's try. So in insert what we do is we specify the index value as well. So I can say index value 2 comma, I want to specify there. Let's say, anyway, let's say 27, I will say enter and now if I print numbs, you can see we got 77 at index number 2. Now what if you want to remove the element, even that is possible, you can say numbs. There's a method called as remove and in remove, you can pass the element which you want to delete. I will say I want to delete 14 enter. And if I say numbs, you can see in the list, we don't have 14 now. What if you want to use index number? Oh, we have not done that, right? Because when you pass 14, that's a value. So if you want to delete based on the index number, even that is simple, you just need to use a methodless pop. So you have to say numbs.pop inside this pop, you just pass the index number which one, which I want to delete, let's say on delete 12. So in this case, I will pass one. And you can see we got 12 out. How do I verify if I say numbs, you can see we don't have 12 now. Okay, in fact, we can also use pop without an index value. What happens when you use pop without index value? Now, if you have learned the data structures before, we have a concept of stack which is last in first out, which simply means we have these two methods there, which is push and pop. So push is pushing the elements in the stack. Pop is removing the element. And when you say pop, it will remove the last element which is added. So in this case, the last element which is added is 45, which is at the last. I will say enter, you can see we got 45. So if you don't specify the index value, you got the last element. So you can use this when you implement stack in data structures. Yeah. Okay, so we can use remove, we can use pop. In fact, we have another method, you know, if you want to delete multiple values, not one multiple values, how will you do that? So in this case, you will use del. So del is a, again, a command and then you have to pass the name of the list, which is numbs. And in the area of to specify the index value from where you have to start, I want to start from let's say two and then I want to end it. I want to delete all the remaining elements, you know, so I will say enter and if I verify now, you can see we got only two values. They're zeroed and first because from two, everything is deleted. So that's how you can work with numbs. Now, time is like, just add some values there. Oh, how to add multiple values now because I want to add multiple values, not one. In that case, you can use another method, which is called as extend. Again, you need to read documentation for this. So there is one question from everyone, you know, from where to learn or from where to read. Of course, you're watching this video, but reading is also important, right? What if I say Python has this amazing documentation online? So just need to go to online and search for Python docs, you will get the documents. In fact, in the next video, we are going to talk about how to use the help command, which is very useful, actually. So we'll see that. If you want to add multiple values, just type numbs.extend and in the bracket, specify multiple values. If you want example, I want to add 29, 12 again, 14, 36. I want to add this four values. Simply say, enter, we have done a mistake. OK, I guess we have, we have to give a square bracket as well. Oh, so that was a mistake. We have to put that value in square bracket, my bad. And if I say numbs, you can see we got the values. So we got at least now. Now with this list, we can perform some inbuilt functions. You know, in Python, we have this inbuilt functions. Now how do I know that which inbuilt function we have min, we have max, we can find some. So we have those methods here. So let's try. So can we use inbuilt functions? Let's try. So I will say min. I want to find the minimum elements. I will say min of the collection which is numbs. And if I say enter, you can see we got 12 towards the minimum value. The same thing you can do with max in max, you can pass numbs. You got 77. And we can also say sum. We have to find the sum of all the values and it's 193. So normally you do all those things by yourself. If you are doing programming, this is one thing you have to do by yourself using some loop and those concepts. But Python says, hey, don't worry, I have some methods for you. In fact, I forgot to mention one more thing. In numbs, we have one more method which is called a sort. So when you say sort, and if I say numbs, you can see we got all the values in sorted format. So yes, list is amazing. It provides us so many features. So that's about list we have. So now we know we can have multiple values and list and that those, those thing can be of different format. And if you want to access any of these elements, you have to use index values. It's mutable so you can change the values. You can add values. You can remove values and you can, you can use certain methods like extend, sort to do, to do exciting things. And that's it. That's about list. I hope you are enjoying this series. Let me know in the comment section. And if you're liking this video, click on the thumbs up button there. And thank you so much for watching everyone. Bye.","list working, different list, list equal, series python, list different, list inside, list simple, thinking python, arrays language, list numbers, values list, create list, list use, concepts python, list values","Recommended Tasks:
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a function that receives a list and prints the square of each number.
- Create a list of 5 fruits and print each using a loop.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Implement a linear search to find a number in a list.
- Install NumPy and create a NumPy array from a list.
- Practice positional, keyword, default, and variable-length arguments.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program that prints ""Hello, World!"" and your name.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program to print the Fibonacci series up to n terms."
6_Python_Tutorial_for_Beginners_Tuple_Set_in_Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\008_6_Python_Tutorial_for_Beginners_Tuple_Set_in_Python.mp4," Welcome back to Aliens, my name is Devon Reddy and let's continue the series on Python. So in the last video we have talked about Laced and we were supposed to complete tuples and set but unfortunately it was a lengthy video so let's complete those things in this video. So when we learn about Laced it's very simple right we have a list of values. Now this list can be of different type it can be of type integer or a string or float. Now we have another type which is called as tuple. Now it is tuple. So tuple is almost same as Laced we can have a collision of value there. The difference is in Laced we can change value because Laced is mutable and tuple you can straight right is immutable that means you cannot change the value. Okay but where it can be used that's a different thing you know. So let's write out first let's create a tuple so we'll say tup equal to and the way you create a tuple is we can use some brackets right in Laced we used to use a square bracket and we should specify values. There's a thing here. When we use a square bracket see nowhere we are mentioning that we are going to use Laced right so by default this square bracket means Laced. How do we use tuple because we cannot use square bracket now so we have to use a round bracket. So round bracket defined it's a tuple. 21, 36, 14, 25. Now once you specify this value here you cannot change it. So we got a tuple if I say enter you can see we got 21, 36, 14 and 25. Now let's try to change the value let's write so I will say tup can I use a square bracket first let me fetch the value sir I will say 1 enter it works okay so when you want to fetch values we can you square bracket okay let's try to change the value sir I will say tupe of 1 is equal to I want to change from 36 to 23. I will say enter you can see we got an error it says tuple object does not support item assignment that means you cannot basically change the value. Can we use certain methods which we had in Laced let's try so if I say tupe. Control space you can see we have two methods when you want to count and second is index okay if you are getting confused what is count count was then in Laced as well. So count will count the number of occurrence of a number example let's say if you know in in your tuple you have 10 values and out of which you have some values like 5 which is repeated two times. So if you say 5 it will give you answer 2 and you can specify you can fetch the index value for a particular element. But you don't have any method which will replace the value which will append the value you can see you don't have those things here tuple is like list but then you cannot change the value of it. Now when when you should be using tuple so when you know that you have a list and you don't want to change the values of it and yes in certain projects we have this requirement you want to set a value and you don't you don't want to change it so of course you will go for tuple there. Since we don't change the values in tuple so iteration in tuples is faster than in Laced so that's where you can use tuple if you want to enhance the speed of your execution. So that's about tuple now it's time to look at set. So this set now if you remember the mathematical definition of set it is simply a collection of elements it is a collection of unique elements okay. So let's try so I will say set I will say yes s equal to how do I define set because the square packet is for list. Lone packet is for tuple we are limiting with only one packet now which is curly packet. So curly packet is for set in fact in math as well I guess we use curly packets. So now I will say 22 comma 25 comma 14 comma 21 comma let's say 5 so I got this values here now this is a value no specific sequence so there are not sorted. Now there is one more thing where set you know if first of all I will say enter you can see we got a set I will not be printing it now so let's talk about the concept here. Now set now it never follows a sequence okay so it will not follow the sequence in which you have added those elements. Now if you think if I type as an if I say enter you will get the same values yes you will get the same values but not in the same sequence okay that's important here. Let's enter you can see the values we got 5 14 21 22 and 25 I know what you're thinking you might be thinking this is sorted no not exactly let me just try once again I will say s equal to again a curly packets and then 25 comma 14 comma 98 comma 63 okay I'm going for under values okay I'm not I don't have this values in my mind I'm just looking at my keyboard I'm just hitting those numbers and I will also try to repeat some values here because last time I forgot to repeat the value this time I will do it I will let me repeat 98 yeah now if I say enter and if I print the value of s look at the sequence first of all we got 98 only once and second look at the sequence there is no ascending or descending order it is random values so you cannot be sure with the sequence in set the reason is set uses a concept of hash and using hash we we improve the performance we want to fetch the element as fast as possible so it simply says okay just go with this go with the flow so we want speed then sequence here but yes if you want to make a sequence you can just do certain things like sorting elements and all those stuff but here set will not for the sequence now can we change the value of set let's try okay first of all can we can we use can we use index number here if I say to you can see in set indexing is not supported you know why because we don't have proper sequence right what you will do with indexing so yes in set we cannot do that can be changed the value that that's a issue right so if you say s dot you can see what method was added is using which you can add the value and then what else we can use we can use pop we can use remove so this thing works in set you know so you can you can write out you can do some experiment and it should work so that's how we use set so we have tuple and we have set so let me just go for a quick recap so we have a list list is like a collection of values now this can be a different type of same type doesn't matter and we have a concept where we can add values we can remove values we can update values can we yes we can so then we have tuples where tuples is same like same as least the difference would be in tuples you cannot change the values because it they are immutable and then we have set now set is almost same as list the difference would be it will not maintain the sequence and it will not support duplicate values so that's important right so that's list tuple and set for you so I hope you enjoyed this session let me know in the comments section and do clear like button if you're enjoying it thank you so much for watching everyone bye bye","laced change, laced count, create tuple, tuples tuples, defined tuple, tuples change, using tuple, values tuple, laced use, learn laced, use laced, difference tuples, means laced, difference laced, value laced","Recommended Tasks:
- Combine two lists using zip() and convert them to a dictionary.
- Create a tuple of coordinates and a set of unique animal names. Print both."
Dictionary_in_Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\009_Dictionary_in_Python.mp4," Welcome back aliens, my name is Devon 20 and in this video we will talk about dictionaries in Python. So we have talked about variables, we have talked about least, set and tuples. So we talk about least. So least is a collection of elements. So basically it's an order at least. So you have all the elements in sequence. Then we have set which doesn't maintain the sequence. So it depends. So if you want all the values, of course you will go for least if you want the unique elements, of course you will go for set. But then think about this. When you have least all the values are fetched or you can fetch the values with the help of index numbers. So that's one thing. Second, what if you want to specify a different type of index for it? Example let's say if you have a list of five values and if you want to fetch the third one, of course you have to say use three. And then sometime it makes sense to have a different key for each element. Example phone book. So if you want to fetch a number, you will use a name. So you search by name and you get a number. And officially if you talk about the dictionaries, so if you want to understand the meaning of a word, you go to that page and you look at the word and you understand the meaning of it. So if you can have this type of concept where you have a key and a value. So every value will have a special key given by you, not normal numbers. So if you want to achieve that in Python, of course you have to use dictionary itself, the concept. To understand that, let me open the IDLE and here let's create a dictionary. So how do we do it? So let me create a simple dictionary. I will name it as data and then the way you can use that is with the help of curly brackets. So normally we enlist, we used to use square brackets, but here we have to use curly brackets. In this we have to specify two things, not just a value, but also a key, right? So key and a value pair. Now of course you can use any key here is just that the key should be immutable type. So it should be unique and it should be immutable. So you can use string, you can use numbers. So here I will use numbers for numbers first and here I will say let's say one, that's my key and if you want to specify what the value, you have to say one colon and you have to specify the value. Maybe I will use my name here. So I will say, Naveen, that's the value. And then I will again use two as a key and then I will use a different name here. Let's say, key done and let's say we have, so let's let me skip three there and let's use four and here I will use let's say, harsh. So we have this three key and value pair and it becomes a dictionary now. So if I say enter and if I say data, you can see we have a key and a value pair. Okay, something is missing. No, everything is there. But how will you fetch a particular value? See, saving this doesn't make any sense, right? So you have a key and a value, but how will you use it? So it makes sense when you want to fetch a particular value. So let's say I want to fetch, harsh here. Now in this case, if you want to fetch, harsh, you have to say data and then you have to use a square bracket in which you will mention the key, right? Because harsh is a value, right? And if you want to fetch a particular value, you have to use key and in this case, the key is four. So if I say enter, you can see we got harsh. That's how we use it. We have to specify the key to fetch the values. Not just four, we can also specify one. It will give me the green. But what if if I give a value like three, now in this case, the moment you say three, you got an error, right? Now why you got the error is because we don't have any key with three, right? So that's the error. In fact, we have one more way of fetching these values. So we can say data dot, you can also use functions here. So if you can say get, in fact, if you say control space, you can see, if you say control space, you can see we have so many functions. We have clear. So basically clear will clean the entire dictionary. So you can do that, but not now. It will empty my dictionary. I don't want to do that. You can also use get to fetch the values. We can use pop to remove the values and we will talk about side default as well. But as of now, let me just use get and here, we can specify a particular index. So in this case, if I specify one, you can see we got Navine. The same thing you can do for two and four. But what if if I use get on three, now this time you can see we have not got any error. We got, I mean, we got nothing, but at least not the error. So of course, we can use this way of doing it, right? You can fetch the values. The only thing is it will give you error or you can say get it will give you nothing. If you want to print what it returns. So if I say data dot can you find a pass three, and in this case, it will print none. Of course, you don't have any data or value with or index number with three. Okay. But then what if you want to print something in case the index is missing? So let's say I will want to print one. I want to print one. But what if you don't have any key with one? In this case, you can give a comma and you can specify the value you want to print. So let's say if if you don't have, if you don't have one as a key, it will print not found. Let me just copy this thing so that I can use it later. If I say enter, you can see we got Navi. Now why we got Navi is because we do have a key with one. Okay, let me just try the same thing with three now. And you can see we don't have this three key in the dictionary. So if you say enter, you got not found. So there is one way of returning a data where you don't have it. Of course, when you go to Google and if you search for something or if you go to internet and if you open the browser, if you search for something, if your page is not found, it will print not found. It will not give you a blank page. Of course, that doesn't make any sense. Right? Okay, so we got this list and this is working here. So what else we can do here? What if you can create a dictionary with the help of least? So let me create two list here. So first I will say keys. That's my that's my list of keys. And of course, it should be unique. So normally we can also use set here, but then let's use list. So I will say keys off. So keys will be off names and then the and then we can create a list of values where you have all the languages. So let's say Navin loves Python, harsh loves Java, something like that. So I will say Navin, that's my first name. And of course, I will use Kiran and then of course, I will use harsh. So we got these three names. And if I say enter and here I will say values, not value, let's say values equal to and then the first language. So Navin loves Python, Kiran, let's say Java and harsh, let's say JavaScript. So we got these three names and we got the three languages. And if I say enter, of course, we got a list here. I want to merge these two list into add dictionary. So I want to create a new dictionary here. Let me again say data. I don't know why I love this name data. So this data will be a dictionary of a combination of key and value pair of these two list. In this case, if I do that, you have to use, so you have to say zip, you have to zip these two values. So I will say keys, values, that's the end, right? But then you need to do one more thing. You have to convert the zip into a dictionary. And for that, you have to use dictionary as a function. And if you say enter, I hope it will work. So if I print, if I try to print data, you can see we got the output. So we got Navin, Python, Kiran, Java and Harsh JavaScript. So that's how you can merge two list into a dictionary. But what if you want to add a new value here, something like this, I want to add, let's say, Monica. So Monica loves C-shop. So how will you add that in this particular dictionary? We can actually add data very easily. So example, if I try to print Monica here, in fact, let's try with Kiran first. Do we have Kiran in the list or in the dictionary? Yes, we have. You can see when you say Kiran, we got Java. But the same thing, if you do with Monica, and if you say enter, we got an error. It's because, of course, we don't have Monica in the dictionary. So let's add it. So I will say data. And here I will say Monica. And let's assign a language, whatever language you love, let's say C-shop. And if I say enter, let's try now, let me just print a data. And of course, if you can see at the end, we got Monica as well. So that's how you can add value. And we delete values. Of course, we can. So we can say, I want to delete Hersch from this dictionary. So I will say DEL, DEL, DEL. And I have to mention data in the bracket you have to mention the key. So I will say Hersch, done. Let me print data. And you can see we have removed Hersch from the dictionary. It's so simple, right? That's how you work with the dictionary. Now, if you want to understand bit of advanced concepts here, we can have a dictionary as a value in the dictionary itself. We can have a list as a value in the dictionary itself. We can have a next 10 dictionary, something like a list inside a dictionary. Let's see what I'm talking about. So what I will do here is let me just clear this screen. So let's use a fresh screen here. So what I want to create is a new dictionary which will have dictionaries and lists inside. So I will say a prog. So this will have a list of programming languages with their IDEs. So I will create a dictionary here. And let me assign the language first. So I will say JavaScript. And of course, JavaScript, we have multiple IDEs available. I will say, let's say, let's use atom there. The next thing we have is C-sharp here. And then for C-sharp, let's use Visual Studio. And let's say for the next one, let's say we have Python. We have to put that in single code. Python and then Python. So we can use two IDs. In fact, I love to work on PyCharm, but we can also use Subline. So I will use a list just for the example. So we can say PyCharm and we can also use Subline. And what next? We can have one more here, which is Java. Now for Java itself, you know, depend upon what about if you're working on Java SE, you'll be, you can use netbeams. If you're working on Java, EE, you can use Eclipse. So what I do here is for Java, I will use another dictionary. And this will have, so based on what you want. So if you want to work on Java SE, of course, you will prefer to work on, I just hope I'm using this right single code. It's very tricky, you know, when you work on this type of things, when you have single codes and double codes. OK, so I will say netbeams. That's my first list. I will give a comma. Or that's my first dictionary. Oh, OK, it's not comma. It should be colon. So Java SE, it is netbeams. And then I'll give a comma. And here I will say Java EE. In this case, I will be using Eclipse. I know it's tricky. So what we're trying to do is we are trying to put at least inside a dictionary as a value. And then we are putting a dictionary inside a dictionary. So that's tricky. I will say enter and just verify. Yeah, so you can see everything is working. Now what's the advantage of doing this? See, if you want to understand which IDE we can use for JavaScript, you can simply say, product JavaScript and it says, atom, you can do it for Python as well. So you can say Python. And you can see we got two. In fact, you can also specify the index number here, which one you want. So I can say Python. And maybe you can use one. And you can see we got the index one, which is applying. So we can do that. So we can play with this list here. But what if you specify Java? In this case, if you say Java, you can see we got a dictionary itself as the output. But what if you want it for Java EE? In this case, you will say Prague. And you will say Java. And then here you can say Java EE is that simple. So from Java, I want to specify Java EE. And you got Eclipse. So yeah, it is cool to work with. So we have dictionary in Python. And you can use it for storing the data in this format, where you have key and a value pair. So I hope you enjoyed this video. Let me in the comment section. And do subscribe for the videos. Bye bye.","dictionary function, create dictionary, dictionary use, dictionaries want, dictionary combination, dictionary simple, key dictionary, dictionary concept, value dictionary, data dictionary, list dictionary, dictionary value, dictionary data, dictionaries lists, dictionaries python","Recommended Tasks:
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create variables for name, age, and marks. Print them all with labels.
- Implement a linear search to find a number in a list.
- Make a dictionary storing student names and their scores. Print each pair.
- Practice positional, keyword, default, and variable-length arguments.
- Print the elements of a list using a for loop.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break)."
7_Python_Tutorial_for_Beginners_Python_Set_Path_in_Windows_and_Help.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\010_7_Python_Tutorial_for_Beginners_Python_Set_Path_in_Windows_and_Help.mp4," Welcome back, aliens, my name is Evan Reddy and let's continue with the series on Python. In fact, till this point, we have seen basic stuff, right? But now we have a question, you know, till this point, we are using IDLE as our IDE, but what if you want to use command prompt? You know, normally when you work with Shell or command prompt, you want to access Python and on the command prompt. How do I do that? Let me just try. So open my command prompt if I say CMD enter. And now if I type a command, let me just try. So command is Python. You know, in Python, we have certain libraries which we will be using later. So Python supports certain libraries which we can use to make our project efficient. So to access those libraries, we need the command, right? So here if I say Python, if I say enter, oh, it says Python is not recognized. That's weird. That's bad about this, right? How do I make it work? Now, what's wrong here? The thing is we have installed Python, right? What is wrong? The thing is you have installed Python in your C drive somewhere, okay? And CMD is not able to get the path of it. Okay, so if CMD is not able to get the path of it, that means you need to specify that by yourself. That there are multiple ways of doing this. One is by saying set path. This is the command which you have to use equal to and you have to specify the path here. But this is a temporary setting, you know, because the moment you close your command prompt and reopen it, you will lose the path. If you want to make it permanent, what you will do is you will go to your C drive and here you will write on this screen and you have to say properties. Click on advanced system setting, go to environment variables. I can you can actually go from your from the start minute itself, just type environment variables, you will get it. And here you have to set the path. But well, I will I will change these system variables. And if I double click on this path, you can see we got the prompt here. And in this prompt, you need to add the path. But which path, I don't know, let's open our my computer and go to C drive. So in C drive, go to users and then your folder. So first of all, you need to go here. So in C drive users, whatever username you have and then app data, inside this, if you click on local and then you have to go to programs, Python and then this one. So when you open your my computer, you have to go to this part, so which is which is visible there. And depend upon your username, it might change. And upon the version which you are using, it will change. But then this is one of the path we have to use. So I will copy this path, go back to the environment variables and click on new paste. So we have done with the first path, but we have to specify two parts here. The first one is that which I mentioned and then script as well. So this one as well. So copy it and go back, say add paste and okay. So by doing this, you are setting the path now. Okay, once you have done that, close everything. Go back to your command prompt. If you try now typing Python, it will not work. You need to make sure that you restart your command prompt. We will close this. Type CMD. Now let's try typing Python and it works. You can see we got a Python prompt here. Let's verify. 2 plus 3, always say enter you got 5. It's working. Okay, everything is working. Everything is fine. In fact, you know, the best way to check Python is by using print. Hello world. Print and hello world say enter. It works. Python is working. So these are you set the path if you want to access Python in your machine. Okay, that's great. Now, once you have talked about this, we have another thing to talk about is help. Now, you know, when I was learning C for the first time, it's way back. And at that time, when I wanted to explore C program, because in books as well, you will get limited knowledge and in lectures as well, you will get limited knowledge. If you want to enhance your skills, what I should do is in double C plus plus, we used to have this, you know, help option where you will see all the header files. And you can see what is happening in that in the same way in in your Python as well, we have help option. If you want to access that thing, it's very simple. Just type help and give a round back and say enter. It will open a help prompt for you. Okay, now what help you need? Now basically, Python has certain modules you can explore, but how do we know which module it has? Okay, we want. I don't know. So I will do is I will type topics. If you see the docs there, it says search for topics. In fact, you can also search for something which we have used till now and say enter. You can see we got least of modules available or topics available. Okay, which one do you want to know about? Let's say I want to know about how to know about least because we have seen that, right? So I will type lists. Okay, this thing tells everything about least now. So if you if you scroll down, we have some methods here, which we have used. If you remember, so these are the methods which we can use, you know, so it talks about everything. Which version has included which things and this amazing, you know, instead of buying up work instead of, of course, you have to you should be watching my videos and then with my videos, you can read the documentation, right? It will be very helpful. So this is about list. Okay, now how do you go back to your command prompt? How do you go to back to the prompt? You simply say quit, enter your back now and let's say if you want to find help on a specific topic, you know about the topic. So you will simply say help and in single code, you will specify list. You don't have to go to help and then search. You can do it from here as well if you know the command and you can see we got the information about list. So that's how you can explore about you can explore different topics and you can read it. Reading is very important, you know. So that's about this video where we have talked about how to set the path and how to explore the help option. So that's it. I hope you are enjoying this series. Let me know in the comments section and do feel like button if you're enjoying it. Thank you so much for watching everyone. Bye bye.","python supports, command prompt, later python, python drive, python works, know python, python open, python work, installed python, typing python, python working, python prompt, python command, python recognized, access python","Recommended Tasks:
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a class Car with attributes and a method to display info.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create variables for name, age, and marks. Print them all with labels.
- Implement a linear search to find a number in a list.
- Practice positional, keyword, default, and variable-length arguments.
- Print the elements of a list using a for loop.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the help() function to explore any built-in Python function.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break)."
8_Python_Tutorial_for_Beginners_Python_Editor_Sublime_Text.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\012_8_Python_Tutorial_for_Beginners_Python_Editor_Sublime_Text.mp4," Welcome back, Aliens, my name is Evan Weddy and let's continue the series on Python. Until this point we are working with PyCharm, right? And it works perfectly fine. But then for some people they don't like heavy software as they want lightweight software to work on. One of them is sublime. So instead of using PyCharm, you can actually use sublime to execute your Python codes. In fact, we have some other editors as well, but most of the people they prefer to work on sublime. But the question arise, if you want to practice the entire code section which we have done and if you want to do that in sublime, how will you do that? Step one, you have download sublime. First of all, is it free? If you want to use sublime properly, you have to pay for it. But then you can actually use it for free. It will not ask you for the licenses every time. It's just that while you're using it, it will give you some problems too, you know, buy this office. But that's fine, we can ignore them. But then if you want to use your sublime for a longer time and if you want to contribute to the company, of course, you can do that. You can buy them and you can use it for, because if you're working and if you're adding from your software, of course, you should buy it. So what I will do is let's download it. So go to Google and search for, or you can simply type sublime. It will take you to the official website. Click on download. So we have different versions available. The latest one is three. You can download that one. They've been upon whatever of OSU you're working with. If you're working with Mac, you can download this one. If you're working with Linux, they're both use this one or for Windows, we can use Windows 64. Click on this one and it will download this software for you. Now once you have got it downloaded, in fact, already have a setup with me. Once you have a setup, you can simply double click it and then almost steps, right? You have to say next, next, next, will do everything for you. Now once you have got set up with you, once you have installed it, simply open sublime. So let me just do that quickly. So you can see this is how sublime looks like. We got a black screen where you can type your code. So this is where you can type your code and then the only thing is on the top, you can see it says unregistered because you have not bought it. So you can buy this software, which will charge you some amount. I'm not sure about the amount here. So you can say purchase license. But still, if you're not buying it, it will still work. But I would recommend you to buy it if you are using this software for a longer time for your commercial user as well. Now if you want to execute Python, how will you do that? It's very simple. Simply type Python code. Let's start with hello world. Now if you want, you also need to save this. So you can save it anywhere you want. I will say test.py. Now once you have typed the code, once you have saved it, how you have done this code. Now before running, whatever it does, go to tools and here, there's an option of build system. So what software you're working with? What type of language you're working with? I'm working with Python. I was at a Python here. Now once you have done that, so using control, where you can run the code, simply say control be and you can see it in the bottom section, you got a hello world. But sometime if you're doing this for the first time, it will give you a prompt, which language is it? So you have to select Python and it will work. Since I'm using sublime in this machine for the second time, so you can say it's a local. It is not giving you that prompt. But if you're doing it for the first time, you will get the prompt. Simply say Python, it will work. Not just this code, you can run it. Any code you want. Just write it out. Let me know in the comments section if you have any issues. So that's it for everyone. Bye.","python using, sublime let, want sublime, execute python, sublime question, working pycharm, type sublime, sublime properly, sublime free, sublime official, download sublime, sublime instead, using pycharm, open sublime, sublime execute","Recommended Tasks:
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create variables for name, age, and marks. Print them all with labels.
- Implement a linear search to find a number in a list.
- Install Sublime Text and write a script to calculate the area of a rectangle.
- Practice positional, keyword, default, and variable-length arguments.
- Print the elements of a list using a for loop.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program to print your name, age, and favorite color.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break)."
9_Python_Tutorial_for_Beginners_More_on_Variables_in_Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\013_9_Python_Tutorial_for_Beginners_More_on_Variables_in_Python.mp4," Welcome back, aliens, my name is Evan Reddy and let's continue with this series on Python. And in this video we're going to talk about variable. But hold on, we have talked about variables, right? We know how to get variables, how to assign values and we can change the value as well. Then why I get the next video? Now in this video we'll talk a bit in a different way, we'll talk about motorbought memory consumption and what happens when you create multiple variables. So let's get started, you know, let's in the flow itself we'll talk about what we'll discuss. So we have our editor ready and let's get started. So let's start with some questions, you know, so I will ask you a question you have to answer, maybe in your mind or in the comment section, your choice. So what I will do here is let me create a small variable. I will say the variable name is num and the value for num is equal to five. Now what do you think? What is happening behind the scene? I'll get just imagine. So there will be, so in your memory or in your internal memory of your system, you might be getting a box there with the name num and it will be having it own address, right? And the in that box, you will be having a value which is five. So we got a box in that we have value five and it will be having a name and the address. Okay, that's good. So name is num and address is something. Let's see what is the address. Hey, how do you know what is the address? Now, of course, every variable will be having some address, right? If you want to get the address, what you will do is you will use a function name called as id and then in the bracket, you have to pass the variable name which is num. So in this case, if I pass num, you can see we got the address or that's great. So we got this is our address. Now this is possible with any type of variable. You can go with string as well. Let's try. So I will use a name equal to, so let's say my name, I would say Naveen and again, the same thing I will use an id and in this I will pass name and you can see we got address. Now for now we have a different address for id, we have a different, for name, we have a different address. That's great. Okay. Now think about this. What if I create one more variable? Let's go with a different variable now. I will say variable a and the value for a is let's say 10. Okay. So we have 10 and then we have value variable b and b is equal to a. Now can I assign a to b? Yes, the answer is yes. You can assign the value of a to b. Now what do you think? What is happening behind the scene? So how many variables we have? How many boxes we have? Think about this. Maybe we should be having two boxes, right? One for the a and one for b, right? So two boxes, each box will have a value which is 10 and there might be having different address, right? Of course, if you have a different box, you will be having a different address. Let's verify. So first I will verify the values of it. So I will type a, we got 10, I will type b, we got 10, so both have the same value. Okay. I will try to fetch the address of a, okay, we got the address, doesn't matter what is the address here. Some weird number. And I will try to get the address of b, oh, that's weird, we got the same address. So in Python, what happens is, we only create multiple variables and in case if they have the same data, they both will point to the same box. They will not be getting multiple boxes for each variable. And that's where Python is more memory efficient, right? Because you are not getting multiple data here. That's great. So what happens when I change the, let's see, let's see the ID of 10, okay? We can also do that because everything which you are using here, it is also going to object. So in this case, we have 10 which is an object, name is an object, five is an object, I know you're thinking about objects now, don't worry, we'll talk about objects later in detail. You can, till that point, you can imagine object is a box, okay? So it is something where you can hold your data, I'll, I'll, I'll, somewhat like variable, but we'll just, cause that in detail later. At this point, everything is an object, right? 10 is an object here. So every object will have an ID here. So I will say enter and you can see we got the same ID. So the address is not based on the variable name, it is based on the box itself. So the moment you say, I want to use a value, it belongs to a box and the address of that box is here. Now, in future, if you create one more variable, I call it a K. And if you assign the value for K as 10, now if I fetch the ID for K, so we are not actually talking about K here, we're talking about 10 because indirectly, your K is referring to 10, right? That's important. So these variables are also going to tags because we are tagging them. So 10 is a value and you're tagging ABK. So everything is tagging the same, same object. Okay, this is, this is awesome. So you can see we got the same ID. Now if I change the value for a, let's try. I will say a is equal to, let's say, 9, I want to change the value for a. Now what do you think? Will it affect the address of a? Of course, right? Because now you have a different box, different value, different box and different box in different address. Let's try. And that's right, we got a different value for a, that works. What? So if I change the value of a and if you see this statement here, this is simply b is equal to a, right? So if a changes, will it affect b? Let's try. Okay. So if I say ID of b, oh no, so ID of, ID of b is still the same old value because a b is still referring to 10, right? So we got two different objects, two different boxes and each box have different address. So here K and B is pointing to 10 and your A is pointing to 9 now. My baby in future you will say K is equal to a now. So of course, the tag of K will change to the value 9, right? Let's verify. So you can say int of K and you can see now it is referring to 9. That's awesome. Okay. So now we got two boxes, right? Now what if you, so you can see we have b which is referring to 10 as of now and K and referring to 9. What if in future even B is referring to a new value, let's say 8. So in total we have three boxes now. So A is referring A and K, they are referring to 9 and we have B referring to 8 and nobody is referring to 10. Now what will happen to 10? 10 is there, right? 10 is there in the memory and no one is using it. And that's where in Python we have a concept of garbage collection. Again, we'll talk about that later, how it works. So we'll talk about a PVM width later. So we have a different concept. You know, we have PVM objects, garbage collection. So we'll talk about those things in detail later. But as of now, remember this thing, whenever you have a data in your memory which will not be used or which is not tagged by any variable, it will be garbage collected later. Okay, but till that point, if you have any reference, it is there in the memory, okay? It will be there for your use. Now how about creating a constant? Example, let's say you know we have this concept of constants, what are constants now? So when you say variable, it means you can change the value, right? Now but when it comes to constant, that means you cannot change the value or something like immutable stuff. But can you make a variable constant and see programming is the only place where you can make a variable constant, right? But in Python, you cannot do that. Yes, you can show your intention by saying, hey, this is a constant example. Normally, when we say constant, we use a different format of names, example, capital letters. So I will say pi value. Normally, if you remember, if you in maths, we use a concept of pi, like 3.14. Yeah. Now this is a constant value, right? No one can change it. It will never be changed. So in this case, you will be using this as a constant. Of course, you cannot stop anyone by changing this value example. I can change this value later. So if I type PI, you can see we got 3.14. But what if I change the value? Yes, I can change the value. I can say 3.15, which will be a crime in this case, but you know, we can change the value. But you can show your intentions by saying, hey, this is a pi, this is, you can see capital letters there. So don't change the value. So the intention here is to make it constant. Don't change it. But yes, unfortunately, in Python, you cannot make it constant, but, but you can show your intentions. Now with variables, we have one more concept. We just called this type of the variable example. In this case, if I say the type, now, how do we know the types of, we have this method of type and you can pass pi and you can see the type of pi is float. So when you want to know the type of variable, you just type type. And in bracket, you can mention the variable limit will give you the type of it. You can do the same thing for AB, K and everything. So with a variable, which we are using here, those variables has a type, which is in build types, right? But can I create my own types? And the answer is yes, you can create. But we'll be doing that later, you know, in some, maybe in some other tutorial. But we can use in build types, example, int float, those are in build types. But how many types we have? Normally these types are called as data types. So we have some in build data types and we are going to see that in the next videos. In the next video, we'll talk about different data types and how to use it. So I hope you are enjoying this series, let me know in the comments section and that's it. Bye bye.","important variables, know variables, variable num, variables assign, internal memory, variable garbage, memory, scene variables, variables going, memory using, imagine memory, variables concept, python memory, variable python, python concept","Recommended Tasks:
- Combine two lists using zip() and convert them to a dictionary.
- Compare two objects using their attributes.
- Compute the factorial of a number using a loop.
- Create a Python module and import it into another file.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create two unrelated classes with the same method names, and use them interchangeably.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate instance, class, and static variables.
- Implement a linear search to find a number in a list.
- Import a file and observe how __name__ behaves differently.
- Practice positional, keyword, default, and variable-length arguments.
- Print the elements of a list using a for loop.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program using multiple variables and perform operations on them."
10_Python_Tutorial_for_Beginners_Data_Types_in_Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\014_10_Python_Tutorial_for_Beginners_Data_Types_in_Python.mp4," Welcome back, aliens, my name is Lavin Reddy, and let's continue with the series of Python. And in this video we'll talk about one of my favorite topic we just called as data types. Now why it's so important because we have worked with variables right and everything was working. Now when you work on a project it's very important to understand what of data you're working with so that you can process that data in that format. Because if you don't process the data in that particular format, you might face errors or maybe bugs and trust me, bugs are horrifying. So whatever data types we have here, so let me just leave those things here. The first one is none. Second one is pneumatic. The third one we have is least double set, string, range, and map. All you can call it as dictionary. Now let's start with the first one. The first one is none. Know what it means? Now when you have a variable and if that variable is not assigned with any value, it is none. Normally in other languages we use a keyword as null, but in Python we use none. The second one is pneumatic type. Now if we talk about pneumatic, we have multiple types here. In fact we can go with four. The first one is int, then we have float, then we have complex, and we have bull. So when you talk about pneumatic, it works numbers right? Example when I say a num is equal to 2.5. Now this is float, okay? So float value. Now how do we know that this is float? In fact in the last session we have done that right? So we can use a type as a function, and in this you can pass num. And you can say it says class float. I can only talk about class later, okay? What class means? But time win, it's float. Okay, so now I will say another number. I will say num is equal to 5. Of course we can change the type of variable, right? So now if I assign 5, if I say num, and you can see that class now changed to int. That means the type of this num is int. We also have complex, right? Now what complex means? So I will say num is equal to, now if you remember, mathematics we have used to have this concept of complex numbers, right? Now how do we represent complex numbers? So we used to say a plus bj. Or in fact it was i in complex number, but here we have to use j. Now we can replace the value of a with a number. I would say 6 plus maybe 9j. Now my this j is represented by a square root of minus 1. Okay, now so when I say enter, you can see it is accepting the value. And if I say the type of this num, it's your complex type. So complex basically means you have a number plus a, or plus or minus a imaginary number. Okay, now this one. So we have int, we have float, and we have complex. So can I convert from a different type example? I have a value which is float, and I want to convert that into integer. Is it possible? Let's try. So what I will do here is I will take a variable of class a, and the value in a I will assign as 5.6. I have another variable which is b, and I want to assign the int value of a, can I convert it? Because if I see the type of a, it's float, right? I want to get the type of b as int, and I want only I want to have the value, which is 5. So in that case, you will be using an int function in which you will pass a. So this int function will convert your float value, or any value into integer format. And that works. Now if I say the type of b, it's int, and the value of b, is 5, right? So we can convert that. Can I convert an int value into float? Yes, we can. So let's say we have another variable which is k, and I want to fetch the value of b, but not in the int format. I want to, I want in float format. Yes, we can do that. So I can say float, and in this bracket, you can pass it, and you will get. So if I say k, you can see we got 5.0, and of course, the type of it is float. You can take it out later. Can I convert a normal number into complex number? Example, I have a variable, and I have b variable. So we will change the value for k, and I will send the k to 6. So we got b as 5 and k as 6. Now I want to get a complex number. So I will say c is equal to, or how do we get a complex number? It's very simple. Just use a complex function at the way we are doing. And then you can pass two variables here, or only one parameter, that works. If I want to pass two parameters, I can pass b comma k. And if I say c, you can see the value now. So it says 5 plus 6j, because 5 is your b, and 6 is your k. So it works. So we can convert the value from here to there. In fact, we can work with string as well, but we'll see that later. Now we also have a type called as bull, which is also called bullion. Now how can we use a bullion value here? Now when it comes to bullion, it simply means true and false. Now think about this computer world, all in this world, we always take decisions. And decisions are based on true or false. Now in your mind, we always work with this conditions. Example, let's say if you have two choices, you will select those choices, which is more favorable, or which will be more profitable. So we apply conditions there. So if that is more profitable, we'll go there. If this is more profitable, we'll go here. Now the same way, we apply a condition, and we get true or false. So that true or false comes under bullion type. Now we have b and k. So if I want to check, if b is less than k, we can do that. So less than symbol is less than. And if I say enter, you can say we got true. So true here is a bullion type. And you can assign that to a variable as well. So I will say variable type as bull is equal to b less than k. Now you can see in this bull, if I type bull, you can say it is true. And if I say the type of bull is bull itself, because it's a type name as well. So I should have used our different name here. So that's bullion for you. In fact, we have true and we have false as well. Example if I say b is greater than k. And that's not the case. b is 5k is 6. So it should give you false. So we have true and we have false. I think that different operators, which we can use less than get then. So we have different operators, which we'll discuss in the upcoming videos. But here, we can use true or false. But then why I'm keeping true and false in numeric? It should be different. The thing is in Python, what we do is we use true as one and false as zero. Example, if I want to convert true into a number, you can say I'm converting them to in format and you can see we got one. The same thing if I do for false, you can see we got zero. So true is one and false is zero. So that's your integer format. Now that's your numeric type. So we have talked about none. We have talked about numeric. The next tile we have is in fact, we have discussed those names, right? Those things comes under sequence. So when you say least range set, tuple, those things comes under sequence. Now we have worked with least before, right? So how do we define least is very simple? You will say LST equal to, you can define least here. So I can say 25, comma, 36, comma, 45, comma, 12. Any number, any number, any format, as a matter, you can take string as well. So you can, this is how you work with least. And how do we know the type of it? So you will say type of LST. And you can see it says it is of type list. The same thing can be done with set. So if I could have set here, I will say S equal to, and you will use a curly backage there. And inside that, you can specify values. So, so this values, and you can see if I say enter, and if I say S, you got the values there, and you can see it is not repeating. And if I define the type of this S, it is set, right? So even this works. Now, the another type we have is tuple, which we have worked with again. So I will say T is equal to, so we have to use a down bracket here. I will say 25, 26, you can use any format, it doesn't matter, right? You can see we got T, and if I say type of T, here is tuple. Okay, now we also have a string type, right? So how do we define a string type? It's very simple, you say STR is equal to, and you can specify a name here, using double quotes or single quotes, both works. I can say my name, that's Navin, and using STR, you can perform certain operations. I can, we have done that in detail in the, in earlier videos, right? So if you want to know more about list and tuple, you can go back to the previous videos, and you can watch it. In this video, just we are just talking about the data types available. How about character? Because we have not talked about character, right? And if you are coming from some other languages, like Java, C, C++, we do have a care type there. Now, in Python, we don't have a care type. What we have is, if you are getting a string, let's say I will say this is STR is equal to, and if you have a single digit, a single character, that's a care type for you, but actually it is string. Because even if you say type, and if you specify STR, you can see it says class STR, which is string in this case. So we have string, we don't have care as, to be specific, but we can use care as a part of string. Now, we have another fancy stuff, which is, which is there in Python, but not in other languages, called as range. Example, you know, when you iterate, or what is iteration means, going from one way to the end value, example from one to 10, or 10 to 100, or maybe from one to 1000. So when we iterate between values, or we can use range, how do we define range? It's very simple, you say range, and you give a curly package, and specify the range. Example, I want to go till 10. So we got a range from zero, and we have 10 values, which is zero to nine. How do we know, which what values we have? So what we can do is, we can actually convert the range into a list, so that we can print it, right? So what I will do is, I will say list of range, and we'll say 10. In fact, there's another way of doing this. We can also use a for low, but unfortunately, we have not done that yet. So we'll not be focusing on for low here, because we have a better way of printing it. But as of now, just to get the output of the range, I'm converting a range into a list, so that they can see the output. And you can see this is a list of, this is the range. So if I want to get a list of, let's say, 10 values from zero to nine, we will use a range there. Okay, you want to be saying, what if I want to have a range with different creations, maybe a different difference? Example, I want to print all, all, all, even numbers from one, from one to 10. In that case, you can do that. You can say, I want to have, I want to start with, or maybe you can start with two, and then you, the ending part is 10, and the difference would be two, because you want, even numbers, right? So you can do that, but you have to put that in a range. Range does take three parameters as well, and you can say we got two, four, six, and eight. So I should have went 11, right, because that's ending part. Okay, so this is how you can use a range. In fact, you can just type here, and you can say range. Of course, right, it will give you range as, you can, it will give you range type. So that's one type you can use, and all these things comes under sequence, right, because we are getting a sequence of values. And now we have one of the most exciting types, which is called as mapping, or you can say dictionary. Now, dictionary, normally what happens, you know, when you have huge amount of data, and even when you want to fetch data in a efficient way, or in a fast way, you, what you can do is, with every value, you can assign a key. Normally, in least what we do is, for the value, we assign a index number, right? But in dictionary, for every value, we'll assign a key. Example, let's say I want to have all the mobile phones, names, examples, let's say in my friend group, if I have let's say 50 phones, everyone will imagine everyone has a different phone here. So we can, of course, we can do a index number, right? So index number zero, iPhone six S, index number one, Samsung, maybe Samsung J8, index number three, one plus three, index number four, let's say, my five. So we want to have all these numbers. So instead of having index numbers, we can use a key, which is your name, example, who has one plus three? Let's say, Kieran, who has iPhone six S, let's say Rahul, who has Samsung? Let's say, Naveen, so in this case, every mobile phone has a name or a key attached to it. So it will be easier for you to fetch, right? Okay, now it's not just about string, okay? You can also use numbers, you can also use, example, role numbers, example, when you go for giving your CD exams or interest exams, you get a number, right? That's your key. So you can identify each object with a key. How do I do that here? Oh, there's one thing to remember. Key should be unique. So if you have a dictionary, all the keys has to be unique and values you can repeat values. Let's write out. How do we define a dictionary? It's very simple. Let's say D is equal to, you have to use a curly packets. Now, why curly packets? Because keys should not repeat and what doesn't repeat set and set uses curly packets, right? So it makes more sense here. So I will use a key as, let's say, Naveen, and then I will use a value, let's say, Naveen has a phone which is Samsung. We can give another value by giving a comma. And here I will say who has this value? Let's say Rahul. Rahul is using, let's say iPhone. And then we have one more. Let's say Kiren and Kiren is using one less. Okay, now this is, oh, I made a mistake there. Okay, so I just missed a colon here, right? So that was my bad. If I try to print D, you can see we got the key and a value pair. So in this case, Naveen, Rahul and Kiren, those are keys. How do I know with those are keys? You can say D dot, you can print the keys and you can see we got this keys. You got Naveen, Rahul and Kiren, those are keys. And if you want to get the values, I guess we have a method with values. Yes, so we have to, we do have a method with values. And if I center, you can see Samsung, iPhone, and OnePlus, those are values. Now, how do I get a particular value? Let's say I want to get iPhone here. In this case, I have to use a key, right? Which is Rahul in this case. So I will say D square back it, if we enlist, we use index numbers, right? We don't have index numbers here. We have a key. So we'll use Rahul as a key, and it's the end, you can see we got iPhone. So that's dictionary. In fact, we have one more way of fetching value. Instead of using a square back it, we can also use functions like get. In this get, you can mention, hey, I want to fetch, let's say, Kiren's phone, which is OnePlus, right? So you can use a square back it, you can use a get method, everything works. That's how you work with data types. So we have different types. Let me just list those things once again. So we have none, we have numeric types, we have sequence, in sequence, we have list, range, set, tuple, and then we have mapping in which we have dictionary. So I hope it makes sense. So if you have any questions, let me know in the comments section, and do clear like what you're enjoying this session. So let me,","type example, string type, type use, python don, type variable, dictionary value, pneumatic type, understand data, dictionary simple, map dictionary, mapping dictionary, python use, thing python, python languages, data types","Recommended Tasks:
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Connect to MySQL using mysql.connector and run a query.
- Create a function with default and positional arguments.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create variables for name, age, and marks. Print them all with labels.
- Implement a linear search to find a number in a list.
- Make a dictionary storing student names and their scores. Print each pair.
- Practice positional, keyword, default, and variable-length arguments.
- Print the elements of a list using a for loop.
- Research and list 3 real-world projects you want to build after learning Python.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use if __name__ == '__main__': to separate code from execution.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program that prints ""Hello, World!"" and your name.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero."
11_Python_Tutorial_for_Beginners_Operators_in_Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\015_11_Python_Tutorial_for_Beginners_Operators_in_Python.mp4," Welcome back, aliens, my name is Evan Reddy and let's continue with the series on Python. So till this point we have covered a lot of stuff, right? We know how to work with IDLE, now we know how to perform some operations and in this video we'll try to work with operators. Now one of some of the operators we have used, right? We have worked with arithmetic operators which is your addition, subtraction, division, right? We also have some more operators which we are going to say in this video. So we'll talk about arithmetic operators, assignment operators, relational operators and logical operators. And we have one more which is literally a operator. So let's start with arithmetic. In fact we have seen arithmetic, right? We have worked with addition, subtraction, they are very simple, right? So in fact we have done that before. So I'll be using some variables here, let's say x equal to 2 and y is equal to 3. So we got two variables and I want to perform certain operations and we can do that, right? We have done that before. So you can say x plus y, you can say x minus y, x multiply by y. I guess I just pressed full by mistake. And then when you say x divided by y, even that works, you can say we got the output. So this is how you work with arithmetic operators. We have also seen how to use modelers. Now next one is assignment. And now you know, right? How assignment works? We can simply say x equal to 8 and that's your assignment operator. So whenever you use equal to symbol, that's assignment. But then let's try to do something else. What if I say I can add two numbers like x equal to x plus 2. So what I'm doing here is I'm adding the value x itself with 2. So which means if my x value is let's say 2 plus 2 which is 4, right? That should I get. That's what I'm expecting here. So if I say x, we got 4. Now the same operation you can do in a shortcut way. You know, we love shortcuts. So here also we have some shortcuts, which is if you want to do the same thing, you can say x. I want to increment, okay? What is increment enhancing the values? So you will say x plus. I want to increment myself with 2. So you can say x plus equal to 2. So you are incrementing yourself by 2. And now if I say x, you can see we got the value which is 6. So which is so x was 4 initially. And then I'm incrementing by 2 again. So which we got 6. So you should have saying x equal to x plus 2. We can say x plus equal to 2. The same thing we've done with subtraction division multiplication. Let's try. So we'll say x multiply equal to 3. So what we're doing is we are multiplying x by itself. So x is 6 now. And when you say 6 into 3, we got 18. Is that? Yes, that's right. Okay. So this thing is working. You can do a short-hand as well. You can try division and subtraction by yourself. Can we do assignment like this? Let's say we have 2 variables here. A and B. So we can do assignment to assign value let's say 5 and 6 to A and B. So we can write in two lines. So we can say A equal to 5 and B equal to 6. Or you can do that in one line. You can say A comma B is equal to 5 comma 6. So you can do assignment in one line itself. So if I say enter, there is no error. If I try to fetch the value of A, which is 5, if you want to try to fetch the value of B, which is 6. So yes, you can assign the values in one line for 2 variables. So that's about assignment operator. Now with this, let's move towards the next operator, which is a unary operator. Now where is say unary operator, it means 1, right? So we have binary concept, which is 2. Unary is 1. Now how do you work with unary operator? Which one we can use? So let's say we have this concept of negation, right? Example if I have value, which is 7. If I want to negate it. So whatever it is, I will use a variable, which is n is equal to 7. So we got n as 7. Now we can also use. So now we can negate it with the help of minus n. So when you say minus n, so if I say the value of n is still 7, right? So what you can do is if you want to assign the negative value, you can say n is equal to minus n. And if I say enter, and if I print the value of n now, which is minus 7. So you can put a negative sign just by giving a unary operator, which is minus. So that's your other vertical operator's assignment and unary. The next two operators, which we have is, or two kind of operators, which we have is logical operators and relational operators. Let's start with the rational first. Now what is relational? Now in fact, we have done one of the thing before, right? In one of these, one of the video where we can compare to numbers or we can compare to stuff. So smaller, greater, right, or compare equal to. So let's try here. So again, we'll go for two variables here, which is a and b, which we have done before. And of course, the value of a is 5 and the value of b is 6. So can I do this? I want to check if a is less than b. So you can say a is less than b and also is yes, right? Because a is 5 and b is 6. So when I say enter now, it says true. And if you remember, we have done that in Boolean. So it returns a true and false. So when you use this angular symbol, it's less than. We can also use greater than symbol, right? Now what if the value of a and b, of course, they're not same. So how do you check for these same comparison if they're same? In, because if we cannot use single, single equal to, because single equal to means you are assigning it. We are not assigning here. We are comparing it. So in that case, you'll be using double equal to and then you will say b. And you can see we got false. And of course, right? A is 5 and b is 6. So of course, it will give you false. Now in that case, what you will do is you will say, let's change the value of a. I will say a is also 6. So now b is 6, a is 6. Let's perform the same operation. I will say a is equal equal to b. And you can see we got true. Now they are same, right? So it will give you true. I want to check if a is less than or equal to b. Can they do both the same time less than and equal to? Yes, we can. So we can say a less than equal to b. So we can use this symbol. In fact, in maths, we also have a symbol, right? So the same way we have in programming, we can just put less than and equal to. The same thing will be done for greater than equal to. Of course, it's not greater or less. It's equal to so it will compare either less or equal to. And you can see it works. Now we can also also check if they're not equal. Now how do we check not equal? Let's say a is something else and b is something else. And I want to check if they are not equal. In that case, you will use not equal to b. So not is exclamation. So in programming, remember this thing. Whenever you see exclamation, that's the, that's not simple. So we got a not equal to b. If I say enter, you can see we got false. Why false is because your a is equal to b, right? So when you say not equal to, it doesn't make sense. It is false. But yes, the value of a or b is let's say seven now. So we have a and b with different values. If I perform the same operation, a not equal to b, you can see we got true, right? So this are called as relational because you are trying to relate to different values. The next set we have is logical operators. So before understanding what logical operators are, you need to understand the concept of true and false and relation between. So if you have two conditions and if you want to come, and if you want to combine those two conditions, now it can be based on and or it can be based on or or it can be not. So basically we have three operators here and or and not. Now let's say we have two conditions. One related to a, we can say if a, let me just clean this shell once. So let's again start with variables. We can say here, we got two variables. We'll say a is equal to five and b is equal to let's say four. We got two variables, okay? And individually I want to check their preference. Example if a is less than eight and I also want to check b should not be greater than five. How do I check both? And I want to make sure that a should be less than eight and b should be less than five. In that case, you need to, you will write two conditions. One is a less than eight and b is less than five. So we have two conditions here. What should I put in between? So in that case, you can use our logical operators, which is and. So I want to compare, I want to check both, right? So I will say and and you can see we got true because both are true. Now, what if I say I want to check if a is less than eight and b is less than two? What do you think? What is the output? Is it true or false? See, now the first condition is true, right? And the second condition is false because b is not less than two. In that case, you will think, okay, one is true, it should give you a true, but unfortunately we get false. Now, why it's the case? Because for to understand that, we have a table here. Now, this table is also called as true table. You can represent true with one and false with zero. This is how it looks like. So when you have, let's say we have x and y. So x represents one condition output and y represents second condition output. We'll compare this. So if x is zero and y is zero, because both are false now. In that case, the output would be false, right? Which is zero in this case. If x is zero and y is one, in that case, you will get again false. So you have to make sure both are true. Then only you will get true. And you can see the last one now. So when you have the last row where you have one and one, then you will get one. So if both the condition are true, then only you will get true. That's the property of and. Now, the same thing can be done for all. We also have all. Now, this is how your all two table looks like. Now, in all what we have is, so we have the same table. If you get at least one condition true, the resultant condition will also be true. So in this case, if I, if I do the same thing, but not with and with all, you can see the first condition is true, second is false, in that case, you will get true. So because at least one is true, so the output will be true. So that's how your and and all works. We can also use a not here. Now, it is not. Not basically reverses your output. Example, let's say if I say x is equal to true, because that's the resultant thing, right? Okay, my bag. So if I say x is equal to true, so we got a true value, right? And if I print x, you got true. But if I want to negate it, whatever you do is I will use not x. In that case, you will say you got false, right? So you can reverse the operation. You can reverse a thing with the help of not. In fact, you can say x equal to not x now. So the value of x is false. So initially the value of x was true. Now you are making it false. So that's how you can use not. Now, this is logical operational. Okay, so when you have conditions, and if you want to compare two conditions, that's where we use logical operators and or not. I can you will be using this a lot in the further videos when we talk about different look patterns. We want to print something and then we'll do some amazing stuff. In that amazing stuff, we'll be using all these things. Just to remind you of whatever we are doing now, is just a foundation for you so that you can work on complex codes, right? So be with me, we'll have amazing fun and future videos. So I hope you're enjoying the series. Let me know in the comments section. And that's it. Thanks for watching everyone. Bye bye.","operators kind, arithmetic, operators literally, operators assignment, perform operations, certain operations, relational operators, operators relational, operators logical, logical operators, operations, operators understanding, operators addition, basically operators, arithmetic operators","Recommended Tasks:
- Build a calculator that performs +, -, *, /, and % based on user input.
- Create a 2D NumPy array and perform addition and multiplication.
- Create variables for name, age, and marks. Print them all with labels.
- Write a program that checks if a number is positive, negative, or zero."
12_Python_Tutorial_for_Beginners_Number_System_Conversion_in_Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\016_12_Python_Tutorial_for_Beginners_Number_System_Conversion_in_Python.mp4," Welcome back, Adrian, my name is David Reddy and let's continue with the series on Python. Now in this video we will talk about binary formats. In fact not just binary we will talk about different number systems. Normally when you work in the programming world we work with binary formats and we work with decimal system. So in the programming world we use a binary system and a decimal system but apart from this we have two more systems which is octal and hexadecimal. Now when do we use all this stuff? So in the working field we use mac address which is normally defined in hexadecimal format. Same goes for IPv6 which is defined in hexadecimal format. In your computer we use binary format. In normal system we use decimal system. So let's understand how do we convert this values from one system to other system. Now of course you can do it on paper and you can or you can do it in a software or we use it with the help of codes. Now before understanding how do you convert this using Python let's write on paper first. You know we can in fact we can do it. So if I open my IDLE you can convert a number from decimal to binary format. Example if I want to convert a number let's say 25. So we have this number 25. I want to convert this into a binary format. Now I don't know how many people of you how many of you know how to convert a number into binary format so people who are very big now to the programming world they might not be knowing it and if you have experience that's great. Now if you don't know how binary format works I would recommend you to go and watch some videos on my format all will try to do some in this video. Let's say I want to convert this we can use a function called as bin. So using bin function we can convert a number from decimal system to binary system. Now when you say decimal system it means the base of the system is 10 and in binary system the base is 2 which means in decimal system we can go from 0 to 9 so we have 10 digits. In binary system we can go from 0 to 1 to digits and that's why we say it's bits binary digits right. So we have binary format there. In fact we have octal system where we have a digits so it starts with 0 and it ends at 7. On the other hand we have hexadecimal system where we have 16 as a base. Now it starts with 0 it goes till 9 and after 9 it goes from a to f so in total we have 16. So now let's come back from decimal to binary. So click on enter you can see this is your binary format it's so simple you just need to use our bin function and then back it up to path 25 but hold on how do you convert this number and even if you so even if you get this output how do you know this is a correct output. So let me just take some time to explain you how to convert a number from a decimal system to a binary system. So for that let me open my paint. So let's try to understand how it works. So let's say we have a number 25 so we'll go for a number 25 here and if I want to find a decimal for a binary format of this 25 what do we do is you have to divide this number by 2. So whatever system you have so example if you want to convert from decimal to octal decimal to hexadecimal system you have to divide you have to divide this number by that system. The example here I want to find value format so I will divide this by 2. Now everyone knows right so it is 2 and 12 you will get 24 so the remainder is 1. So when you say 2 and 12 we got 24 and the remainder is 1 you have to continue this so you have to say 2 you will get 6 so 2 into 6 you will get 12 so the remainder is 0 then we have 2 into 3 the remainder is 0 again and then we got 2 into 1 which is remainder is 1 in this case because 2 into 1 is 2 and then 3 minus 2 is 1. Now this is your numbers you know so this is your binary format so these are you convert from decimal to binary format but how do you read this. So we have to read this in a reverse order so you have to start from this and you have to go to top. So which is in this case this is 1 then we have this is 1 0 0 1 so this is a binary format of 25 so this is how you convert a number from decimal system to binary format it is so simple let us go back to the idea here and here whatever do you so this you can see the number here we got 1 1 0 0 1 the same number but what is before that you can see we got 0 and B that is how you represent a binary format so if you want to say there is a number which is 1 1 0 0 1 and you might be thinking if you got this number decimal which is a symbol right so to specify that hey this is not a decimal number we will use 0 B okay that is very important in fact you can convert a number from binary system to decimal system it is very easy just say 0 B I will use a number which is 1 0 1 0 1 in this case which is actually a number 5 right so I will say enter you can say we got 5 so before the number before the binary format if you put 0 B that means your the number is 1 in format and it will give you the output and decimal format we know the same thing for octal right so example let us go the same number I will say which function we have to use are you can guess right so for one of the we have been for octal it should be oct right and then we will give a number which is 25 I will say enter now this is octal format so the octal conversion of 25 is 31 but what is before that it is 0 0 so always octal right so in the above case we have B that is for binary the same thing can be done with hexadecimal so I will say hex and I want to find 25 so I will say enter you can say it is 0 x19 and that's what important which is x here so x is for hexadecimal number right in fact I will just try to find the hex of 10 so x of 10 is a right so if I center you can see we got 0 x a you can do the same thing in reverse order you can say 0 x maybe I want to find maybe f so in this case f is 15 so if I center you got 15 in fact in the subsequent videos which we are going to see we will be working with different operators like bitwise operator and this video is very important for the bitwise operators make sure you know how to convert a decimal number into binary format and for that let me give you some assignments so what you can do is try to convert not on the python command prompt okay if you do it by yourself so try to find the binary format of let's say 31 then try to so this is your homework okay so try to find out binary format of 21 then 52 then 65 so these are some numbers you can try it out and then you can also do reverse okay so let's say if I give you binary format I have a number which is 0 b and let's say this is number I don't know what's the decimal format of this you have to find this as well so in this case it is 410 but how can we know that so in that case you can do this in reverse order as well so the number was 1100 1100 so how do you convert this number to decimal system so first let's try with this number and then you can try with this number yourself now when you want to convert a number from 1 to decimal is very simple take start from the last number so start from the last number and use 2-less to 0 second last number 2-less to 1 so we have to go for 2-2 2-3 and 2-4 right now this so this number belongs to one particular number here so for this one we have 2-4 for this one we have 2-3 right now ignore all the 0s here because we don't need them focus on you on ones so what do we do is first you will find 2-0 is what 2-0 is 1 2-1 is 2 2 is 4 okay first of all we don't need these two numbers right because those are 0s anyway then 2-3 is 8 2-4 is 16 and then once you got this number you just need to add them so you you can say 16 plus 8 which is 24 24 plus 1 we got 25 so first you have to use this format and then you have to add all the values you will get the decimal format the same thing can be done with this you write out on your machine and let me know if you have done that so that's it everyone that's how you can you can work with different numbers system in Python so I hope you enjoyed this video let me know the comments section so that's it everyone bye bye","hexadecimal number, just binary, represent binary, bits binary, decimal hexadecimal, numbers python, number format, using python, binary digits, digits binary, use binary, convert binary, hexadecimal format, convert python, binary formats","Recommended Tasks:
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a script that performs bitwise AND, OR, XOR, and NOT on two numbers.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create variables for name, age, and marks. Print them all with labels.
- Implement a linear search to find a number in a list.
- Practice positional, keyword, default, and variable-length arguments.
- Print the elements of a list using a for loop.
- Repeat the swap task but with user input this time.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that converts decimal to binary, octal, and hexadecimal."
Python_Tutorial_for_Beginners__Swap_2_Variables_in_Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\017_Python_Tutorial_for_Beginners__Swap_2_Variables_in_Python.mp4," Welcome back aliens, my name is Darwin 20 and in this video we'll see how do you swap two numbers in Python. So let's say we have two variables A and B, the value for A is five and the value for B is six. How do you swap these two values? So normally in different languages we have different way of implementing it but one thing is common in most of the language which is you have to use a third variable to swap them because you cannot simply say A equal to B and B it will not work right example if I try to print the value of A and B now we are expecting that you should print six and five after swapping but now when you done this code you can see we got six and six that means we lost the value five so it is not exactly swapping it. Now what's happening here? The thing is the moment you say A equal to B that means the value for B which is six goes into A and you lost the value which is five we want it five right we want it to store five somewhere and that's why before assigning the value B to A what you will do is you will take the value of A and you will put that in a time variable or you can use any variable them doesn't matter so what you will do is you will take A you will save that A in a time variable and at the end you will not assign the value of A to B because already A has six now so you will assign the value of time to B so you're storing the value of A to time when you're copying the value from B to A and at the end you're simply saying time is I mean B is equal to time it will swap the value let's verify and you can say we got the value which is six and five so value of for A was five now is six the value for B was six now it is five swapping is done but then there's a problem you're wasting a variable right and in most of the languages we have different techniques but in Python we have amazing way of doing this and we'll see that at the end of the video but then let's try to simplify it can we use it in a better way instead of using a 30 variable normally when you go for the interviews they might ask you this question how will you swap two values without using a 30 so in this case what you will do is you will simply use a formula so instead of using a third variable you can use a formula here which is A is equal to A plus B and you will say B is equal to A minus B and A is equal to A minus B now it doesn't matter from well we got this formula but it works right example if you don't this code you can still see we got six and five so to understand how it works so let's see what is A plus B so A is five and B is six so A plus B is eleven and here at this point the value for eight is eleven right because we have updated it so the new value for eight is eleven there are four B is six so the new value for B becomes five so the value for eight is eleven the value for B is five and now we have one more so here the value for eight is 11 the value for B is five the new values right and the value for A becomes 6 and you can see because it's wrapped value. The value for A is 6, the value for B is 5. We have done it. We still have one issue with this. The issue is, you know, if you go in deep, the amount of B is required for 5 is 3 bits, right? So, 101 is 5 and 6 is basically double 10. You require 3 bits for 5 and you require 3 bits for all 6. But what about 11? 11 needs 4 bits. That means you are still wasting one extra bit. I know it's not a big number, but then still you are wasting a bit. And that's why we have one more way, which is XR. So, you can simply use a cap, which is a XR symbol. Now, XR works in a different way. So, what you can do is you can just go to Google and you can find how XR works and you will find the answer. The advantage of XR is it will not rest extra bits. Okay, so that means this thing. If the initial values are 3 bits, the output will also be of 3 bits. You're not wasting extra memory then and you can still see the output. You got 6 and 5. So yes, there are different ways of strapping. So, we got 30 variables. We can use operators like plus, minus, or you can use this cap symbol, which is XR, basically. We have one more, which is amazing about Python and which is if you want to swap to values, you can simply say, and this is not that another language, okay. This is very unique to Python. So, you can simply say, a, or b is equal to b, a. See, this thing doesn't work in two different lines, but it works in one line. How this works? Let me run this code and you can say it works. We got 6 and 5. So, strapping is done. But how it is working? So, let's start to understand how it works. So, basically, when you say b is equal to a, right? So, normally, you're the right side will solve first. So, your system will solve it, right? Python first. So, it will solve b comma a. The value for b is 6. The value for a is 5. This goes into stack. So, we have a stack. It goes into a stack and then it reverse. So, we have a concept of rotation. So, it will rotate these two values. So, the value of a comes to b and the value of b comes to a. And those things will be assigned here. It is just rotating the value. Or in simple terms, you can imagine a, guess the value of b and b, guess the value of a. But it behind the scene works on a different way. It uses a concept of two rotation or rotation two. So, you can simply go to Google and search for rot two in Python. So, you will get the idea. So, even this works. So, let me know in the comment section if you have any more questions. And so, that's it from this video. I hope you enjoyed. So, I bring off two numbers. See you in the next video.","question swap, python, python solve, rot python, time swap, numbers python, swapping code, swap simply, exactly swapping, print swapping, swapping happening, swap numbers, variable swap, value swap, value swapping","Recommended Tasks:
- Add single-line and multi-line comments to a script.
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compare two objects using their attributes.
- Compute the factorial of a number using a loop.
- Connect to MySQL using mysql.connector and run a query.
- Create a Django model class with fields and explain what it represents in DB.
- Create a Python module and import it into another file.
- Create a class Car with attributes and a method to display info.
- Create a function that receives a list and prints the square of each number.
- Create a function with default and positional arguments.
- Create a list of 5 fruits and print each using a loop.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create an abstract class with an abstract method and subclass it.
- Create an array using the array module and perform basic operations.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create two unrelated classes with the same method names, and use them interchangeably.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Implement a linear search to find a number in a list.
- Install Anaconda and create a new environment.
- Install Django using pip and create your first project using django-admin startproject.
- Install NumPy and create a NumPy array from a list.
- Install Python and PyCharm, and run your first Python script that adds two numbers.
- Install Sublime Text and write a script to calculate the area of a rectangle.
- Instantiate objects of a class and call their methods.
- Launch Jupyter Notebook and run a simple Python cell.
- Make a dictionary storing student names and their scores. Print each pair.
- Practice positional, keyword, default, and variable-length arguments.
- Practice using Python IDLE. Run commands and explore how to clear the screen.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Push code to GitHub using Git in PyCharm.
- Repeat the swap task but with user input this time.
- Research and list 3 real-world projects you want to build after learning Python.
- Setup MySQL Workbench and connect to it via GUI.
- Simulate method overloading using default arguments; override a method in a child class.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use filter, map, and reduce to process a list of numbers.
- Use for-else to search for an item in a list. Print a message if not found.
- Use if __name__ == '__main__': to separate code from execution.
- Use lambda to double a number and to filter even numbers from a list.
- Use the help() function to explore any built-in Python function.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program that prints ""Hello, World!"" and your name.
- Write a Python program to print your name, age, and favorite color.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program that converts decimal to binary, octal, and hexadecimal.
- Write a program to print the Fibonacci series up to n terms.
- Write a program using multiple variables and perform operations on them.
- Write a script and observe behavior during runtime (interpreted)."
13_Python_Tutorial_for_Beginners_IDLE_Previous_Command_Clear_Screen.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\018_13_Python_Tutorial_for_Beginners_IDLE_Previous_Command_Clear_Screen.mp4," Subscribe to the channel and press the bell icon so that you will not miss any updates. Welcome back, aliens, my name is Darwin Reddy and in this video we will talk about how do you access the previous commands in IDLE? Now when you work on Python you know, so we write a lot of code, right? Example, if I want to add two numbers or if I want to perform some of the operations like x equal to 2 plus 4 plus 9. Now in this case when you say hit enter and if you want to access the same command again, can you do it? Normally what happens is when you work on CMD what we get is let's say if I perform any operations here example up again, this is not a command in Windows but let's try. So when I say up and if I want to get the same command again, we just need to press up add, right? So when you say up add or you will get this. You know, when you work with IP config and you get this and again, if I want the same command you can say enter, just you just say up and enter you get it. That's not the case with IDLE. In this case if you want to access that, we don't have by default option. So what you have to do is you just need to go to options and then you have to click on configure IDLE and here you need to click on keys. Now we need to find the history, right? So just scroll down to search for history. So it is your history previous. Now by default it will be I guess alt P in your machine because I have changed it in my earlier session. If you want to change it, just click on that and select get new keys for selection and here you can select the up add or so you can see we have up add or click on OK and click on OK now. So if you want to access the last element or last command, you just say up add or you get the command. Now of course, when you are new to Python, you will not be knowing this, but once you start working on it, you will be needing this command a lot. So this is how you find the previous command. I got some more questions, you know, after the video. So let's say if you reach here and in Windows, we have this command is CLS. So when you say CLS, it clears the command and that's not the case here. You know, so that's not the case in in ideal. You cannot simply clear this screen. Even if I try, we don't have anything here. I guess you can write some script which works on Python shell, but that's not that doesn't work in ideally. The only way you can do that is by closing ideal and reopen it. OK, now if you have seen my videos, in my videos, I have done that. You know, so I was scrolling up, but I was not scrolling in ideal. It was a animation effect. So when I was editing my video, I made sure that it goes up so that you can, you can see those things normally. So the editing is done so that you can view it. So I have not scrolled on ideally. So as for my knowledge, it's not possible. Well, maybe there might be some hidden script or some technique. So if you know that, let me know in the comment section so that it will be helpful for everyone. So that's it. That's how you get the previous command and that's how you, that's, that's the answer for your question about how to clear this screen. So that's it, everyone. Thanks so much for watching. I hope you're enjoying my videos. Let me know in the comment section. So that's it. Bye bye.","command got, work python, command lot, work cmd, previous command, idle, command say, idle work, idle need, add command, windows command, command normally, command windows, configure idle, previous commands","Recommended Tasks:
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create variables for name, age, and marks. Print them all with labels.
- Implement a linear search to find a number in a list.
- Practice positional, keyword, default, and variable-length arguments.
- Practice using Python IDLE. Run commands and explore how to clear the screen.
- Print the elements of a list using a for loop.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break)."
_14_Python_Tutorial_for_Beginners_Python_BitWise_Operators.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\019 _14_Python_Tutorial_for_Beginners_Python_BitWise_Operators.mp4," Welcome back, aliens, my name is Ivan Reddy and let's continue with this series on Python. So till this point we have worked with operators right, we have talked about assignment operators or arithmetic operators and logical operators. Now it's time to focus on some more operators and this time we are going to work with bit wise. Now if you remember in one of the video we have talked about bunny formats right, so this is where you will use them. So far so the name suggests it is something you do with bunny formats right, so whatever you are going to do now is with bits. So let's get started. So let's open Python and let's do this calculation. Now the first one, so if we talk about bit wise we have six different operators, we have complement operator, then we have AND, OR, XOR, left shift and right shift. Okay, let's start with the first one which is complement operator and if you look at this symbol of it it's weird right, if we don't use this symbol much, so this is called as till day operator or till the operator. Now when you will find it, so if you look at your keyboard just below the escape key you have this special key called as till day. So let's use it and that's your till design and will give any number here, where we will go for 12. Now when you say enter, what you are expecting, come on, go go for random guess here, maybe march 12, maybe minus 1, something like that right? Now if I say enter, oh we got minus 13, that's weird, while minus 13, so let's do a research on this now. So let me go back to my paint and let's do the calculation. So how do you find this? Now to understand this, first of all we need to find what is complement means. Now when you say complement it will simply do reverse of your bunny form, for example, if you say complement 1 it will give you 0 and if you say complement 0 it will give you 1, that's what it's doing. Now the same thing is applied on 12 right, and what is 12? 12 is actually, if you convert 12 into bunny form, you will get this, so you will get 4 zeros, double 1, double 0, that's your 12 bunny form at and I love this mobile phone model right? So you have to find the complement of it, so what you will do is you will reverse the number, so this 0 becomes 1 and then this is 1, then this is 0, 0, 1, 1, 1, 1, so this is your complement of 12, but hold on, what is this number and why we got minus 13, that's weird right? Now if you look at minus 13, why minus 13 is this number, then we have to find out that now. Now to understand this concept again as a programmer, you need to know all this concept, because you will, so when you do any course in for IT or CS, this is what they will teach you in the first year, but if you don't know this concept, that's okay, you can learn here now. Now we have a concept of 2's complement, because what happens is in your system, we can store positive numbers right, we can store 12, we can store 13, we can store 15, 20, 21 or maybe 1000, but how to store negative numbers? But to store negative numbers, we first of all we don't store negative numbers in the system, we always store positive numbers, so even if you want to store this minus 13, you need to convert this number into positive number first, and the way you can do that is with the help of 2's complement, now how do you find 2's complement? So to find 2's complement, we need to find 1's complement plus 1, this is the formula okay, so when you say 2's complement, it is 1's complement plus 1, now how do you find 1's complement? It's easy actually, first convert this number into 1A format, now I'll just study it, it's 12,000, 1101, this is a 1A format of plus 13, so this is 13 okay, we want to find minus 13, right, so I have to find 2's complement of this number, now let's find the 1's complement, and how do you find 1's complement, it's easy now, we know how to find complement, right, so we have to reverse this number, so you will get 11, 11, 00, 10, so this is 1, 1's complement of 13, but we want to find 2's complement, right, so what you will do, you will say plus 1, now this is, so when you say 0 plus 1, it will give you 1, and then we got 1, then we got 00, 11, 11, now this number here, this is minus 13 okay, so this is 2's complement of 13 which is minus 13, we got it, and now if you compare this number with complement of 12, they are same, and that's why you got, so when you say complement of 12, you got minus 13, right, so that was the answer, so that's how you can work with complement, so when you want to store negative number, there's what you do, now I would recommend you to try different numbers here, maybe, maybe complement of 45, maybe complement of 12, so try it out, and let's, let's see what answers you get there, so that's your complement operator, the next one we have is Bitwise and, now if you remember in the previous video, we have talked about logical operators, right, so in logical we have AND and all, right, so here as well we can use Bitwise AND and Bitwise OR, so in AND remember this thing, so when you have AND, and if you have two conditions, and both are true, then only you will get true, and in OR, if you have at least one true, you will get true, if you remember, so if you remember this table, right, that's what you are going to do here now, so let's do Bitwise AND, now which operator we use here, so we don't use AND because A and D add is for logical operations, so here we have to use ampersand symbol, so let's take 12, ampersand 13, okay, so we got these two numbers, 12 and 13, if I say enter, you got 12, but why 12, so let's find out using Bitwise, so let's go back to our paint, and here we'll convert 12 into panel format, which is 0001100, this is 12's panel format, right, and then we have 13's panel format, which is 0001101, and now we need to find out the Bitwise here, right, so we have to work with bits, so let's compare this bit with this bit, now if you remember AND operation, if both are one, then only one, right, so this in this case, this is 01, so it will be 0, this is 01, this is 01, this is 01 because both are ones, and then we got 00000, and if you compare this output, this is 12, right, so you got Bitwise AND, so this was AND operation, and that's why you got 12, let's do all, so we'll say 12, all, so now for all we have to use pipe, okay, so for the AND we have ampersand, for all we have pipe, and then okay, where you will find pipe, so it is above your intermittent, so we say 12 or 13, come on, guess, now in fact before entering here, let's do calculation, let's compare here, so let's go back here, and let's do some calculation, so it will be 000011 double 0, that's 12, 00001101, that is your 13, right, and let's do all, so when you say all, if any one is one, so your output is one, right, so we got one, we got 011 000, and that's your 13, right, so this is 13, let's verify, and if I say enter, oh we got 13, so this works, so this is how you work with bitwise AND and bitwise OR, in fact, you know, you might be thinking of it 12, and then you will get maybe some other number, let's try, so it's a 25, and maybe 31, or maybe 30, you're 30, and you can see we got 24, again, this is your homework, right, so try it on your notebook, so open your notebook and convert 25 to running format, convert, cut into running format, and just do AND operation, and of course you will get 24, the next one we have is xR, now in xR what you do is, it's actually very simple, when you say you have two numbers which is 0 and 0, now since we don't have any one here, we will get 0, then you have 0, 1, now in this case you have odd number of 1, right, so which is 1, 1, so you will get answer 1, now when you say 1 and 0, so we again we have odd numbers of 1, which is 1, and when you have, when you don't have odd numbers of 1, you can see we have two ones, which is even number, so you will get 0, okay, so when you have odd numbers of 1, you will get 1, if you want to remember in a shortcut way, it's very simple, if both the numbers are different, then you can go for 1, right, so we have 0, 1, is 1, 1, 0 is 1, so that's very simple, this is how you perform xR or patient, this is xR, and you can represent that with the help of CAP symbol, so let's do that here, again we'll take two different numbers here, we will go for, let's go for 12, again the same number, 12 CAP 13 here, oh, that just made a mistake there, 12 CAP 13, and you can see the answer is 1, but why 1, let's verify, so let's go back to the, go back here and do calculations, so this 12 we have done that, 0, 0, 0, 0, 1, 1 double 0, and then we have 13 here, which is 0, 0, 0, 0, 0, 1, 1, 0, 1, and now let's do xR, so if you have two different numbers then 1, right, so they're different, 1, they are same, 0, 0, 0, all are same number, 0, so we'll go for 0, 0, 0, 0, so the only answer you got here is 1, right, so that's why we got 1, that's how you perform xR operation, so you can try here with different numbers, right, again the same number, 25, and 30, try it out, and let's see what what you get, and in fact I will do it here, so I will say xR 25, CAP 30, and you've got 7, but how 7, that's your homework, right, let me know in the comment section what you get here, now once you have done with and or and xR, let's move towards left shift, I love this concept of left shift, so what is left shift here, so what I will do is first of all let me try something here, so I would say 10, now when you say left shift you have to use this left shift operators which is left hand side, and then you will say 2, okay what's your guess, what is the output, I don't know let's try, so you got 40, but why 40, let's find out, now when you say let's go to paint here, and let's do calculation, now when you say 10, what is 10, now I will go for I will ignore the earlier zeros, okay, so just because I am damn lazy to write every time that, I will directly go with 1010, so again we have, we do have four zeros before but ignore them, so we got 1010, and then we have to apply a left shift operator here, now how do we use it, now in left shift what happens is imagine there's a box here, so imagine there's a, this is a box, and then we have a dot here dot symbol, and then we have some zeros, now of course right every number is up in this way example, when you say five it's actually 5.0, in fact we can have multiple zeros here, right, so when you say 65 it's again we do have zeros there, but we ignore zeros because there are zeros, here as well when you say 1010, we do have a dot, so we do have a dot, and then after dot we have multiple zeros, in left shift what we do is we shift the bits on left hand side, okay I don't know from which side you are, so you are facing me so far you this side, right, so left hand side, so let's do that, okay so now so when you say left shift you have to shift bits, but how many bits, you have to shift two bits right example if you see the output here, so you have shifting 10 by two bits, so when you say two bits you got 1010, and then you have to shift on left hand side two bits, so you will add two more zeros then we have a dot, so we were having a dot after zero, but after shifting you have shifted two zeros on this side, right, now this number here is 40, now how do you verify, go with the normal calculation, right, two is zero, two is zero, two is two, two is two, two is three, so this one is two is three, and then we got two is four, and then we got two is five, so consider this one and consider this one, so this is 32, and this is eight, so right to place eight is 40, right, so we got the answer, so that's how you find left shift, how about right shift, it's very simple, so we also have a concept of right shift, right, what I will do is I will go with the same number, 10, and right shift with two bits, now in left shift if you are gaining bits in right shift you are losing bits, let's verify, so if I say enter you can say we got two, but why two, let's do it here, let's do it here, so we have 1010 as 10, so we have a dot here, so in right shift you shift on this side, right, right inside, so you will be losing, how many bits, so you will be losing these two bits, so what is remaining is one zero, which is this is remaining, and what is one zero, it's two, and that's why we got two, so that's how you work with left shift and right shift, so that's your bitwise operator, so we have talked about complement, we have talked about and all x all and left shift and right shift, so again when you do scientific calculation this will be useful there, so I hope you are enjoying this video, let me know in the comments section if you need some more improvement, let me know on which topic, so that's it everyone, bye bye!","bitwise bitwise, bits, let bitwise, shift operators, bitwise let, bit wise, bits bits, shift bitwise, bits shift, shift bits, work bitwise, bitwise operator, operator bitwise, bitwise operation, bunny formats","Recommended Tasks:
- Create a script that performs bitwise AND, OR, XOR, and NOT on two numbers.
- Write a program that converts decimal to binary, octal, and hexadecimal."
15_Python_Tutorial_for_Beginners_Import_Math_Functions_in_Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\020_15_Python_Tutorial_for_Beginners_Import_Math_Functions_in_Python.mp4," Welcome back, aliens, my name is David Reddy and let's continue with the series on Python. So till this point we have seen a lot of stuff in Python right and now it's time to look at mathematical functions. Now of course we can do that manually as well right, you can find a square root of a number as well but then we can use mathematical functions then why to do it manually. Now let's try something, so what I will do is I will do some simple stuff. So how do you find a square root of a number? It's very simple actually, you just need to say x equal to, I want to find a square root of 25. So it's very simple in Python we have an inbuilt function called a square root which is sqrt and in this bracket you just have to pass the number which is 25 in this case. I will say enter, oh we got an error, that's bad, maybe spelling mistake. No it is sqrt that's right, what went wrong here? The thing is in Python we have got a modules to work with. But these modules are by default not dead for you. Now if you want to use them you need to ask for it right, so we are living in a world where you need to ask for things. Now how do you ask for it? The way you can ask you can import it with the help of import of course and then you have to say import and then you have to mention a module name here called math. So math is a module in which you have all these functions. I will say enter, okay that's done right, so we got all the functions now and now you can say x equal to math dot sqrt and then you can find 25, oh it works, okay there is no error. So we got our value in x now, let's print x and that's right we got 5.0, yay, it's working. In fact we can try it with different values here now so I will say 15 x and that's the value of square root of 15 right, so it's working. Now we have some other functions as well, example one of the functions which we can use here is called as flow function. Now how flow function works, let's say we have value which is y, in fact I will print it, I will say print, I want to print flow function value so I will say math dot. So we have this concept of seal and flow. So what it means, imagine you have value which is 2.5, so normally what we do is we try to round off this numbers right, example I don't want point values, I want the integers, so in normal world we round off this values, we say okay when you have 2.5 we'll make it 3 and let's say if you have 2.4 we'll make it 2. So anything which is less than 2.5 will be 2, anything which is, which is get equal to 0.5 will make it 3. That is round off right, but we want to use flow and seal. So imagine this is 3 and this is 2. So when you say 2.5 it will be some somewhere here, so when you say 2.5 you will make it 3, when you say 2.4 you will make it 2. But then instead of using round off we can use flow, so we have flow and we have seal. Now when we use flow it simply means you have to go to the flow, imagine this is flow, we have flow and we have seal, so here we have a flow and then we have seal. So when you apply a flow function doesn't matter what your value is, even if it is 2.9 you will get 2, right that's flow. Now what you for what about seal function, example if I say seal of 2.1, so if you say round off it will be 2 right, but when you apply seal you will get 3 right, let's find it out. So when you say I want to find flow of 2.9 you will get 2, the same thing can be done for seal. So it is a seal of 2.2 you got 3 right, so flow will always give you last delish value and seal will give you the highest value, highest integer. So likewise we can do factorial, we can find sine x, cross x you know all your mathematical functions. It's like there is one more, we also have power you know P O W, remember we have done this calculation which is 3 into 2, 3 square right, so you got 9, the same thing can be done with the help of power function. So when you say I want to print let's say math dot P O W which is power function and here you will say 3 comma 2. Now you can see we got 9, so this is it will give you power, you have 2 choice you can use double star which is power again and then you can also use power function. But now when you work on big software it's always better to use functions because it's more readable for other developers right. And then in math we have some constants as well, it's not just about functions, example it's I want to value of pi, we all know it right, it's 3.14, not exactly after 3.14 we have some more values and no one remember that's right, so what you can do is you can say print and I will print math dot P I and that's your pi value right, so we have some more values there, we can also get the value of epsilon, so you will say math dot E and that's your epsilon value. So those are those are constants which are available, what if we don't want to use math every time because see we do we have we have a lot of modules right and some modules names are very big and we are damn lazy to type those names here. So instead of using math can I simply use m dot SQRT, well that will be good right m dot SQRT but unfortunately it will not work, so if you say enter you can say it's not working. So in that case if you want to use m we need to use a concept of allies what it means, so when you input math say as m, so what you're doing now is you're saying hey I'm putting math but when you want to use math I will be using m or I will I can use m or math both, so let's try with math first is math is working, so I will say 25, okay math works same goes for let's say let's try m, 25 we have an m works right, so your choice you can use m you can use math so when you have big names or if you are lazy to type even math you can try allies right, okay now well we have one more thing you know, so let's say you in your math module you have so many functions available, so we have so many functions classes available and the moment you say import math you get everything, what if you don't want everything, what if you want thing which are specific, example I only need power function, I only need factorial, I don't want everything, so in that case what you can do is you can say math, so when you say import in fact let me just reopen my ID so that in fact we can restart, so I restart this shell here and let's try, so I will say math dot sqrt 25, you can see we got error that means it's not imported, so now I will import but then I don't want to import all the functions, I want to import let's say sqrt and power that's it, so we'll say from math, so if you mention we want to import from math, so we'll import only two things, one is sqrt and power, that's it give a comma and give say power and you can see there's no error let's try, so I would say in fact now you don't even need to specify math because you have imported the function itself, so I will say power of 4 raised to 5, I don't know the value, maybe it's right, so it's 1024 that's right, it's actually right answer, so it works, so that's how you work, that's how you work with mathematical functions, so you can try it out, there are so many functions available, so just go to documentation, in fact we'll search here, so you can see when you search for math you have so many functions available here, read documentation and try it out, so the best way to learn something is to do some research, so after watching my videos make sure you read some work or you do this research and that's how that will make you a good programmer, so I hope you enjoyed this video, let me know in the comment section and if you have not subscribed to the channel, what you're waiting for, to subscribe it, bye bye.","dot sqrt, python right, input math, python inbuilt, search math, say sqrt, python, import math, calculation square, sqrt power, mistake sqrt, root number, root 25, math module, simple python","Recommended Tasks:
- Add single-line and multi-line comments to a script.
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compare two objects using their attributes.
- Compute the factorial of a number using a loop.
- Connect to MySQL using mysql.connector and run a query.
- Create a Django model class with fields and explain what it represents in DB.
- Create a Python module and import it into another file.
- Create a class Car with attributes and a method to display info.
- Create a function that receives a list and prints the square of each number.
- Create a function with default and positional arguments.
- Create a list of 5 fruits and print each using a loop.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create an abstract class with an abstract method and subclass it.
- Create an array using the array module and perform basic operations.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create two unrelated classes with the same method names, and use them interchangeably.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Implement a linear search to find a number in a list.
- Install Anaconda and create a new environment.
- Install Django using pip and create your first project using django-admin startproject.
- Install NumPy and create a NumPy array from a list.
- Install Python and PyCharm, and run your first Python script that adds two numbers.
- Install Sublime Text and write a script to calculate the area of a rectangle.
- Instantiate objects of a class and call their methods.
- Launch Jupyter Notebook and run a simple Python cell.
- Make a dictionary storing student names and their scores. Print each pair.
- Practice positional, keyword, default, and variable-length arguments.
- Practice using Python IDLE. Run commands and explore how to clear the screen.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Push code to GitHub using Git in PyCharm.
- Repeat the swap task but with user input this time.
- Research and list 3 real-world projects you want to build after learning Python.
- Setup MySQL Workbench and connect to it via GUI.
- Simulate method overloading using default arguments; override a method in a child class.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use filter, map, and reduce to process a list of numbers.
- Use for-else to search for an item in a list. Print a message if not found.
- Use if __name__ == '__main__': to separate code from execution.
- Use lambda to double a number and to filter even numbers from a list.
- Use the help() function to explore any built-in Python function.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program that prints ""Hello, World!"" and your name.
- Write a Python program to print your name, age, and favorite color.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program that converts decimal to binary, octal, and hexadecimal.
- Write a program to print the Fibonacci series up to n terms.
- Write a program using multiple variables and perform operations on them.
- Write a script and observe behavior during runtime (interpreted)."
16_Python_Tutorial_for_Beginners_Working_with_PyCharm_Run_Debug_Trace_py_file.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\021_16_Python_Tutorial_for_Beginners_Working_with_PyCharm_Run_Debug_Trace_py_file.mp4," Welcome back, Adrian, my name is Ivan Reddy and let's continue the series on Python. Till this point we have seen so many stuff like we have worked with operators, we have worked with functions which are inbuilt. Now it's time to do something big. No, when I say big I'm not talking about making games or something because it takes time, okay. I know you people are learning Python so that you can work on big projects but it takes time. You have to go step by step. If you jump that on projects you will get stuck so make sure that you know the basics. So in this video let's try to make big code, okay. So when I say big code till this point we were writing well line of code. Now it will go for three to four lines of code, right. So that's a big step. But then where to type this code because see whatever we have done they allow we were doing it on an interactive console. So the thing which we do so which the idea which you are working with this is your interactive console. And whatever you do here it will give you the instant output, right. Example if I say print and then if I pass a message here which is which is hello and if I say enter you got the output this is interactive console, right. But then when you work on a project you will write multiple lines of code. When you do it, of course you will not be using this console to do it, right. And that's why you will be creating certain files when you write a code. But whatever files I'm talking about, think about this. When you type a document on mswhat do you get.deoc. When you want a material to read so we click for PDF. So for music we use dot mp3. In the same format for Python we have a file extension called as dot py. So we have to create a py files. How do we do that? There are certain steps example you can open node by type the code save it as dot demo dot py doesn't matter what the file name is. And then you can run it. Otherwise what you can do is since we have a word ID here, available here, I will click on file and you can see we have an option of new file so we can write a code here as well. Better right? Okay. So let's write the code. Now simple code of course will go step by step. What will do? Let's go with the simplest one which is printing. Hello, that's it. Nothing big. Well print. Hello, that's it. Now what do you think? How will you run this code? Okay. Now steps. Before running a code you need to save the code. And how do we do that? You simply say control as of course everyone knows that. And then you can store this file anywhere you want. Maybe on cloud storage as well. Maybe Google driver drop box. But here let's go with the local one. Now I will store this file on desktop. You can store it anywhere you want. But is it easy to access will be desktop? So I will go to desktop and on desktop I already have a folder called a python codes. You can create that folder or you can just directly say on desktop that works in this folder. And then I will create a file. I already have a demo file here. Let's go for some different name. I would say this is my code. So file name is my code. But then the extension is very important. So the extension here is py. So I will go with that extension and I will say save. Now once you have saved your file it's time to run this. So how do we run this file? Just go here on run and click on run module. This is not the only way to do it. There are multiple ways but this is one way. Let's go with this way first. Click on run module and look at your code. So on the console or on this shell you got here output which is hello. It works. Right? So we have another way. Yes we have. We can also do that from a command prompt. You can go here. This is your command prompt and you can run your code here. But how we do that? Now we can do that with the help of a command called a python. Now if you remember when you install python on your machine and we have done that set part thing if you remember we can do that here. We can run that code here. Now first of all before running a code we have to make sure that you navigate to the folder where you have this file which is python. So I will navigate then. So I will say Siri desktop. Now once I am in desktop I will navigate to python codes and you can see I am doing the folder now and it's time to run this. How do we run this? We will say python and the file name. The file name is mycode.py and that's it. Say enter that's your output. Right? So it works. So you can run that on a shell or you can run that on the command prompt as well. Your choice. Of course when you work on a project you will be using IDE something like python or that collapse because it makes much more sense there but command prompt also works. Let's get back here. Again we will go to command prompt after some time but time will let's use this one which is this editor. Now once we got print hello let's write a big code. Now let's say big code let's write a code for three to four lines. I want to add two numbers that's it. So what I will do is I will say x equal to five and y is equal to six. So we got two values and then I want to add these two values and how do we do that? We have done that before. I would say z equal to x plus y and then once you got the addition it's time to print it. Let's print it. So I would say print z and that's it. Save this file and now it's time to run this. You can click on run and you can click on run module or shortcuts. You know can you use that f5 so you should go into run every time and run is because see we want to save our time right. Simply say f5 and you got the output which is 11. Yay it's working. This is one place where you can write a code. Otherwise we can actually use an IDE which is there in our system which is pycharm. You can use any IDE which you like okay. All the codes work on every IDE. It's just that everyone have their own preference. I prefer gen blames products. Pycharm is good. I also love Eclipse. You can try that as well. If you want some other IDE which you like which you feel is better try that. Every code works on all the ideas. How do we work with pycharm? It's very easy. Just search for pycharm. Of course I hope you have installed it before. And then when you open pycharm it is how it looks like. So this is the prompt you will get. Now how do you get started? Of course when you are working with pycharm for the first time you will not get this option of having a project already. You need to click on create new project and then here I will enter a project name. We can say this is test project. Of course when you make a project you will be having a good name by time when test project works. I will click on create and you can see we got pycharm with our project. It takes some. It does take some time to create the environment for you. Now you can see we got our pycharm and this is how it looks like. So when you so on the left hand side you can see we have a project section. So this is where you will see your project folders, your project files. This is where you will write the code. Of course you don't have any option of writing code now. And this is how you will have a panel where you can run the code, where you can debug the code. And this is where you have multiple option example. If you want to change the setting you can just go to file and change the setting like you want to change the font size. You want to change the color theme because some people they like dark themes. So you can change that here. Again we will go through that. But before that I want to create a file here. So what I will do is I will say write like and say new create a file. You can create a file or you can create a python file because python file will give you the extension dot p y. I would say this is my code again. Click on OK. And you can see I just entered my code. Look at the extension dot p y is by default. OK this works. Let's write the same code. In fact I will copy basically code because I am lazy to type it copied paste. OK we got your code here. Now if you want to change the font size it's very easy just go to file and click on setting. You can see there is an option of editor font. So I was 25 and click on OK. You can see we got the font size of 25 so it is much visible now. Now we need to run this file. How do we run this? It's very easy just click on run and there is an option of run the file. So you can just click on run my code and you can see the output it's 11. If you don't want to do it from here you can just write like and say run my code instead of going up and down. And the next time if you want to run this file you can click here to run. If you if you make any changes example if I want to change the value from 6 to let's say 8. And if I want to run this code you can simply click on run button there and it should work. You can see we got 30 and so it works here. In fact you know there is one advantage of using an IDE which is debug. Now when you say debug you can actually trace what is happening you know how how do you code is changing how value is changing. And now let me just do it for you. Let me show you a magic. You can actually see what is happening in the code. So first for that first of all you have to add a break point. Now it is break point break point is something from where you are you you can you can trace your code. So to get the break point just click on the right number. So if you if you want a break point here just click there. Now once you got your break point you need to go to run and click on debug. Now when you click on debug it will ask you for the file language is my code and you can see it is it is studying it has studied the execution. Now how do you go to next line because see it is only on the first line now right. So you just need to type f8 otherwise you can just go to run and say step over but we will press f8. Now the moment I place f8 now look at the variable section. So in the variable section it says x is of type 8 and the value is 5. You can actually crack what is happening. In fact on the here itself you can you can see we got x colon 5. Now it so for this code it doesn't make any sense because we know the value but when you let's say if you are working on a big project and there is this is some bug in let's say you have a file of 1000 lines okay and there is a bug on line number 28. How do you know that is a bug on line number 28 so you have to trace right. So maybe you know that there is something wrong between line number 20 and 15 but well so you can trace you know you can put a break point on line number 20 and then you can trace. Let's press f8 again and you can see we got y values 8 let's press f8 now you can see z values 13 and then your printing z value and that's where you got the output right. So that's how all these things are working. We will be using pycharm a lot so maybe from next videos we will be focusing more on pycharm. Maybe we will go back to IDLA for some code or maybe come on from but majorly we will be using pycharm. So I hope you enjoyed this video working with files and pycharm so if you have any questions let me know in the comments section. If you are enjoying this series let your friends knows about this series. So do give a thumbs up and subscribe channel if you have not done yet. So that's it bye bye.","code console, create python, code studying, python machine, instant output, basically code, writing code, python till, running code, doing interactive, called python, interactive console, learning python, say python, big code","Recommended Tasks:
- Add single-line and multi-line comments to a script.
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a Python module and import it into another file.
- Create a class Car with attributes and a method to display info.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create variables for name, age, and marks. Print them all with labels.
- Implement a linear search to find a number in a list.
- Install Anaconda and create a new environment.
- Install Python and PyCharm, and run your first Python script that adds two numbers.
- Practice positional, keyword, default, and variable-length arguments.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Push code to GitHub using Git in PyCharm.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program to print your name, age, and favorite color.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a script and observe behavior during runtime (interpreted)."
17_Python_Tutorial_for_Beginners_Swap_2_Variables_in_Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\022_17_Python_Tutorial_for_Beginners_Swap_2_Variables_in_Python.mp4," Welcome back aliens, my name is Darwin 20 and in this video we'll see how do you swap two numbers in Python. So let's say we have two variables A and B, the value for A is five and the value for B is six. How do you swap these two values? So normally in different languages we have different way of implementing it but one thing is common in most of the language which is you have to use a third variable to swap them because you cannot simply say A equal to B and B it will not work right example if I try to print the value of A and B now we are expecting that you should print six and five after swapping but now when you done this code you can see we got six and six that means we lost the value five so it is not exactly swapping it. Now what's happening here? The thing is the moment you say A equal to B that means the value for B which is six goes into A and you lost the value which is five we want it five right we want it to store five somewhere and that's why before assigning the value B to A what you will do is you will take the value of A and you will put that in a time variable or you can use any variable them doesn't matter so what you will do is you will take A you will save that A in a time variable and at the end you will not assign the value of A to B because already A has six now so you will assign the value of time to B so you're storing the value of A to time when you're copying the value from B to A and at the end you're simply saying time is I mean B is equal to time it will swap the value let's verify and you can say we got the value which is six and five so value of for A was five now is six the value for B was six now it is five swapping is done but then there's a problem you're wasting a variable right and in most of the languages we have different techniques but in Python we have amazing way of doing this and we'll see that at the end of the video but then let's try to simplify it can we use it in a better way instead of using a 30 variable normally when you go for the interviews they might ask you this question how will you swap two values without using a 30 so in this case what you will do is you will simply use a formula so instead of using a third variable you can use a formula here which is A is equal to A plus B and you will say B is equal to A minus B and A is equal to A minus B now it doesn't matter from well we got this formula but it works right example if you don't this code you can still see we got six and five so to understand how it works so let's see what is A plus B so A is five and B is six so a plus B is 11 and here at this point the value for the A is 11 right because we have updated so the new value for A is 11 the value for B is six so the new value for B becomes five so the value for A is 11 the value for B star 5 and now we have one more so here the value for the A is 11 the value for B is five the new values right and the value for eight becomes six and you can see because it has saved value the value for a 6 the value for b is 5 we have done it. We still have one issue with this. They are sure if you go in deep the amount of b is required for 5 is 3 bits right. So 101 is 5 and 6 is basically double 1 0. You require 3 bits for 5 and you require 3 bits for all 6. But what about 11? 11 needs 4 bits. That means you are still wasting 1 extra bit. I know it's not a big number but then still you are wasting a bit. And that's why we have one more way which is x all. So you can simply use a cap which is a x all symbol. Now x all works in a different way. So what you can do is you can just go to Google and you can find how x all works and you will find the answer. The advantage of x all is it will not rest extra bits. Okay so that means this thing. If the initial values are 3 bits the output will also be of 3 bits. You're not wasting extra memory then and you can still see the output. You got 6 and 5. So yes there are different ways of strapping so we got 3d variable. We can use operators like plus minus or you can use this cap symbol which is x all basically. We have one more which is amazing about Python and which is if you want to swap to values you can simply say and this is not that another language. Okay. This is very unique to Python. So you can simply say a go a b is equal to b comma a. See this thing doesn't work in two different lines but it works in one line. How this works? Let me run this code and you can say it works. We got 6 and 5. So strapping is done. But how it is working. So let's start to understand how it works. So basically when you say b is equal to a right so normally you are the right side will solve first. So your system will solve it right. Python first so it will solve b comma a. The value for b is 6 the value for a is 5. This goes into stack. So we have a stack it goes into a stack and then it reverse. So we have a concept of rotation so it will rotate this to values. So the value of a comes to b and the value of b comes to a and those things will be assigned here. It is just rotating the value. Or in simple terms you can imagine a gets the value of b and b gets the value of a but behind it it works in a different way. It uses a concept of two rotation or rotation two. So you can simply go to google and search for rot two in Python. So you will get the idea. So even this works. So let me know in the comment section if you have any more questions and so that's it from this video. I hope you enjoyed. So I bring off to numbers. See you in the next video.","question swap, python, python solve, rot python, time swap, numbers python, swapping code, swap simply, exactly swapping, print swapping, swapping happening, swap numbers, variable swap, value swap, value swapping","Recommended Tasks:
- Add single-line and multi-line comments to a script.
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compare two objects using their attributes.
- Compute the factorial of a number using a loop.
- Connect to MySQL using mysql.connector and run a query.
- Create a Django model class with fields and explain what it represents in DB.
- Create a Python module and import it into another file.
- Create a class Car with attributes and a method to display info.
- Create a function that receives a list and prints the square of each number.
- Create a function with default and positional arguments.
- Create a list of 5 fruits and print each using a loop.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create an abstract class with an abstract method and subclass it.
- Create an array using the array module and perform basic operations.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create two unrelated classes with the same method names, and use them interchangeably.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Implement a linear search to find a number in a list.
- Install Anaconda and create a new environment.
- Install Django using pip and create your first project using django-admin startproject.
- Install NumPy and create a NumPy array from a list.
- Install Python and PyCharm, and run your first Python script that adds two numbers.
- Install Sublime Text and write a script to calculate the area of a rectangle.
- Instantiate objects of a class and call their methods.
- Launch Jupyter Notebook and run a simple Python cell.
- Make a dictionary storing student names and their scores. Print each pair.
- Practice positional, keyword, default, and variable-length arguments.
- Practice using Python IDLE. Run commands and explore how to clear the screen.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Push code to GitHub using Git in PyCharm.
- Repeat the swap task but with user input this time.
- Research and list 3 real-world projects you want to build after learning Python.
- Setup MySQL Workbench and connect to it via GUI.
- Simulate method overloading using default arguments; override a method in a child class.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use filter, map, and reduce to process a list of numbers.
- Use for-else to search for an item in a list. Print a message if not found.
- Use if __name__ == '__main__': to separate code from execution.
- Use lambda to double a number and to filter even numbers from a list.
- Use the help() function to explore any built-in Python function.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program that prints ""Hello, World!"" and your name.
- Write a Python program to print your name, age, and favorite color.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program that converts decimal to binary, octal, and hexadecimal.
- Write a program to print the Fibonacci series up to n terms.
- Write a program using multiple variables and perform operations on them.
- Write a script and observe behavior during runtime (interpreted)."
18_Python_Tutorial_for_Beginners_User_input_in_Python_Command_Line_Input.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\023_18_Python_Tutorial_for_Beginners_User_input_in_Python_Command_Line_Input.mp4, Welcome back aliens my name is Avon Vedy and let's continue with the series on Python. Now in the last video we have talked about how can we use pyjamas right as I mentioned before you can use any idea which you like okay every idea you almost were going to save away. Now in this video we'll do something which you are waiting for a long time and which is how to get the input from a user. Sit trust me when you are building a project you are doing it for the client right and of course you are expecting a client input and till this point we are working with our own numbers we should be looking for the user input right how do we do that. So the thing is in Python whatever we have done till now is done with the help of functions example if you want to print something print function if you want to do some calculation like finding the sum of the last all finding the minimum value of it or maybe whatever function whatever operations we have done till now we have used functions right for input as well we have a input function name itself says it right now so we should have using five here we of course we will be adding to numbers but instead of using five we will be using a function called as input okay it's very simple and then for why as well we will be saying input so for x also we have input for y also we have input now we need work that's a question I will try it okay so I will right click here I will say run my code okay it works you can see there's no error okay first step is done there's no error but think about this you got a console and you are waiting for something because till this point we were just doing something and we were getting the output this is the first time your console is not saying anything the thing is your console is waiting for you I mean now when I say you I'm talking about the user a console is waiting for the user to give the input now console don't know that user don't know how to do now so user doesn't know what to do a console don't know that user is waiting so a console should notify user hey user I'm expecting a value from you and of course console is not that smart to ask for it so as a programmer you need to do it so I will stop the execution I will say hey user enter the value so of course it's not compulsory but then it's a good gesture right I will say enter enter first number okay and the same thing goes for why as I mentioned is not compulsory to type the message but then it's better always better enter second number okay so we got enter first number enter second number and now I will read on the code right like run and you can see it is asking for the value now a user knows something is happening so user will come here and say user will say I want to add nine and I want to enter five nine plus five will give you 14 right I will say enter oh that's real we got nine space five that's better the thing is what is happening here is if you have observed I was also giving a space in between maybe that's the issue I will run this again and this time I will give a value which is nine without space and five without space this time at least we'll be getting 14 right hopefully I will say enter oh again we got 95 that's bad what's wrong here so when you want to work with a function called as input it will always give you this string type if remember we also have a type which is str so it will always give you the value in str format what you want is integer right because you are adding two values and if you want to add two values it should be integer example if I find playing the type of x in this case of course after after fetching the after fetching the input I will say run this code once again you can say it is waiting for the input I would say nine now when does the entire nine you can see the type of nine is str it's integer right but the thing is by default input function will will convert everything as a string now that means you need to convert this value before assigning the value so what you can also do is you can take another value another variable like a and you can convert the value of x into integer because x is string so you can say int and you can pass x right we have the we have seen that how do you convert from string to integer or from different function so this is how you convert a string into integer and then you can add you can simply say a instead of x you can say a and for y as well the same thing because y is also string so I will say b is equal to int of y yeah and now I will say b now it should work we are expecting a value which is 14 if this will not work I will stop the video and run okay so let's enter nine and let's enter five hopefully it will work I will say enter oh it worked finally so you can still continue you can still watch the video so yeah so it was 14 right so it is working so the issue was by default input gives you string format we need to convert that into format which we want example if you want float simply use float function if you want integer you can use integer function okay this works but then don't you think we are wasting some lines of code here example I could have used input here itself I mean int here itself because say input gives you string so we are converting that string into integer so the type of x is now integer so we don't need a there right so it's always better to save the number of lines so here as well I will say int and they should work instead of a and b I will say x plus y finally it should work now without a and b of course that was our main agenda right now it is asking for the value just have a look of some other values you know seven plus three it should give you ten and it works so this thing is working now in fact the same code which we are doing here on pie charm will work on IDLE editor as well okay that works let's do something extra now whatever doers I want to take the input from a user in a CAD format because see we don't have a CAD format in Python right we have int we have float we have string how do you take a CAD example you can do that actually you can say x is equal to or maybe this time will you see h because that makes sense I want a character right so see h is equal to input of course we don't need to convert that into integer because it's character and you will say enter the entire character enter the CAD now see you can use double quotes or single quotes both works as you know and then I will print ch yeah they should work let's try I will just run this code we're waiting for the character will use p enter it works you can see we can take character as well but here's a trick the trick is what if if I enter pq r of course right I'm asking for a character but maybe your user don't know that you are expecting a character maybe use by mistake using typing multiple characters in this case look at the output we are expecting a character user enters entire string but still we still want character right if you want to have that control to print only one character you can use index values we have done that right remember when we were talking about strings we have done this we can use index number and we can fetch first character they should work let's try I will say pq r and you can see we got p right this one in fact the next code is amazing okay it's more fun what if I don't even because in ch we still have pq r what if you if you don't want pq r you only want p so we have a trick here what if while fetching the input only you will specify that hey only pick up I only want the first character see input will fetch the entire string input will fetch pq r but it will assign only p to ch let's try I will say pq r enter you can see that you got p so again you can play with the code right and that's why programming is awesome there's a concept of syntax plus there's also concept of fun so you just to play with it it's like playing a game with with programming language in fact since we are working with input we can do something extra we can also use a function called as eval which will evaluate the expression which you are passing example let's say if I give the input let me just run this code if I give the input as 2 plus 6 minus 2 or maybe 6 minus 1 can we do it can we do it here because if you pass 2 plus 6 minus 1 is not normal integer it is not normal a string it is it's something different right it's an expression and to use that of course you got to here because we were fetching only the first character if you want to evaluate that whatever does I will say result so there's a function called as eval of course we will not be using index here so there's a function called as eval so in eval function you are passing the data which which is which are getting from the user so it's the enter and expression right so when a user enters the expression it will evaluate and it will give you the output let's do that here I will print result let's try I hope it will work okay so now let's give the expression here I will say 2 plus 6 plus 6 minus 1 enter yes it's working you can you you can see we got 7 so that's the exciting thing about functions you know so in Python we have so many functions to work with now since we are talking about input we can do something extra as well what if you want to take the input from the command line now when I say command line let's say let's go back to this code if you remember this code here we were running my code dot p by right we were we are print where we have printed only hello well that's why once again you can see but there was some code we were we are printing 11 but what if I want to pass a value from here example I will say Python and here I will enter my code dot p y now the values in my code let me just verify my code here so this is my code okay so this is so I went to desktop I opened this file which is my code and you can see the values which is 5 and 6 if you want if you want to take input from user you can use input functions but I want to pass the values when I'm running this so if you see cmd here when I'm running the code I want to pass a value which is 6 and 2 I want to add these two numbers is it possible can you pass a value from here yes you can but are you accepting the value no so even if I done this code you can see we got 11 so we should be changing this value instead of using 5 we can use a special keyword which is called as a grv now a grv will be having multiple values not one it will be a list so example if you are passing one value it will be one value if you are passing two values two values two if you are passing 10 values you it will be having 10 values and if you want to access a particular value you need to use index number okay now what index number so index number zero is a file name so if I go back to my command prompt you can see when I say python and then after that I'm entering a file name now this is your index number zero six is index number one and two is index number two so if you want to fetch it you will be using a rgv and in a square bucket you will say this is one why not zero because zero is for file name right so we'll use one and two and now you can add these two values let's verify let's go back to our python prompt and I will say enter oh there is an error it says a rgv is not defined okay the thing is it belongs to a monoclesis so we have to say import sis and then we'll say sis dot a rgv sis dot a rgv now it should work hopefully go back to python enter oh we got six and two okay the same problem it will give you string right so we have to convert that into int my bad but you learn from your mistakes let's go back and say enter or we got eight yeah it's working so that's how you work with input so you can do whatever you want take the input and find the answer you will find the question in the assignment section which is at the end of this video so make sure that you subscribe to channel so that you you can enjoy the entire python series and also like the video if you have liked it thank you so much for watching everyone bye bye,"working input, format python, python prompt, programming, entire python, use pyjamas, user input, use input, say python, python series, python till, thing python, series python, python entering, python functions","Recommended Tasks:
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a class Car with attributes and a method to display info.
- Create a function that receives a list and prints the square of each number.
- Create a list of 5 fruits and print each using a loop.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Implement a linear search to find a number in a list.
- Install NumPy and create a NumPy array from a list.
- Practice positional, keyword, default, and variable-length arguments.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Research and list 3 real-world projects you want to build after learning Python.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use if __name__ == '__main__': to separate code from execution.
- Use the help() function to explore any built-in Python function.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program that prints ""Hello, World!"" and your name.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program to print the Fibonacci series up to n terms.
- Write a script and observe behavior during runtime (interpreted)."
19_Python_Tutorial_for_Beginners_If_Elif_Else_Statement_in_Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\024_19_Python_Tutorial_for_Beginners_If_Elif_Else_Statement_in_Python.mp4," Welcome back aliens, my name is Ivan Vity. And let's continue with the series on Python. And in this video, we'll talk about CPU. A hold on, this is a Python series, right? Why we need to know about CPU? In fact, everyone knows about CPU, right? CPU has three parts, CU, MU and ALU. We have to work with MU till this point because MU basically means memory unit. So we were using variables, we were trying to save data. So it was there. The then we have a unit which is ALU, which is in which we have two parts. One is AU, which is arithmetic unit. And the second one is logical unit. Now when it comes to arithmetic unit, it performs calculations, right? So whatever calculation we have done till now, addition, subtraction, division, multiplication and one thing to converge, of course. Now it's time to talk about logical unit. Now when you say logical unit, this is something which makes your computer think. Of course, your computer will not think automatically as a programmer. You do it, right? You let your computer think. So you have to add a code, right? So in real world, when you say you are taking a distance, what it means? So you apply different conditions, right? So example, you know, in real life, we go with a flow. So example, we'll do this, we'll do this, we'll do this. And then at certain point, we decide, okay? So either we have to go this way or that way. Example, even after completing your 10 standard, we have to decide which field you want to go for. After completing your, after completing your graduation, you will decide which company to join, right? So we always take decision based on certain conditions. Can we do that in programming? So in programming as well, we write statements, right? So we write one statement, second statement, third statement. And then we realize, okay, we have two flows now. Either we have to go this way or we have to go that way. And that's where you have to apply conditions. How will you implement that here? For that, we have a special keyword called as if, right? So we will, we will be using if here. So using if you can actually specify the flow of execution, either we have to go in this way or that way. I would also recommend you to learn about flow charts. I am, of course, as a programmer, it's a good to know concepts. If you know how flow chart works, it will be helpful for your programming career. So let's understand how this, how this if works. So if you can say we have three statements here, right? So after the three statement, we have two flows now. Either we want to execute this set of statements or aren't to execute the other set of statements. How will you decide what, what statement you want to execute here? Based on some conditions, if this is true, I will execute the first block. If this is false, I will execute the second block. And to implement that, we use if. Now, if we talk about this syntax, this is how it looks like. So we have to use if, right? That's a keyword we have to use. And then we will have, we have to specify either true or false. Now, if you say this is true, then it will execute this statement. So if it is true, only then it will execute this statement, right? So let's say I have the statement is, I'm right. That's it. I want to print, I'm right. So if it is true, it will print, I'm right. That's it. Let's run this. And you can see we got the answer, which is, I'm right. If this is false, then it will not execute the particular block. So this falls, let's mention on this code. And you can see it's not executing the block. So that's how your if works. If this true, then only it will execute the block. But hold on. What is that block? And what is this colon and what is this statement? So thing is, whenever we use if, if is basically a block, I mean, in Python, we call them as suit, where you can write multiple statements. But then how will you mention that this statement belongs to if, because see, if I write one more statement here, I mean, just below that, if I say print and if I say buy, now what do you think we are saying false, right? It is false. So will it execute by or not? If this print statement belongs to if, then it will not execute by because this falls. If this statement does not belong to if, then it will execute by, right? Let's try this. If I don't this code, you can see we got by, but why by, it is saying false, right? It's because this statement does not belong to if, why? It's because we have to follow certain indentation. How you specify if the statement, because see, if we can have multiple statements, right? So if you want to specify all the statements belongs to if we do use some certain indentation and what is indentation, some specific spaces. It can be one space, two space, three space, ten space. It can be hundred spaces. You have to use certain number of spaces. So if I use four space here, for this one as well, I need to use four space. Even if I use three space, you can see it will give you error. Okay, so it says un, unintended does not match any other international level. So you have to make sure that it belongs to, you are the use either one space. So you have to throughout you have to use one space. If you use two space throughout you have to use two space, okay? But normally we always use four spaces. Okay, example if I say, even if I say three spaces for both, then it will work. Because there is no error. So you might get a warning by saying, you know, you should be using four spaces. So it's better to always use four spaces. In fact, the tab, one tab is four space, right? By default. So I would also prefer to use tab instead of using spaces because you might make a mistake with spaces. So use one tab and that's fine. And if you are using an IDE, just say enter by default, it will, it will use the indentation. Okay, I don't want to keep by inside the if, so I will write it outside somewhere here. Right? So this bar doesn't belong to if block. But then question arise, we will not write true and false in a code itself, right? This true and false will evaluate from an expression, right? Of course, it is depend upon user input. It's depend upon the data in the database. It depends upon the data on the server. It's all depend upon the value you are passing and the condition. So how will you do it here? Maybe I will try this. To next time, this is an example. Let's say I want to check if the given number is even on order. Maybe the input is coming from the user or I will take my own input. Maybe let me take my own input and you can try it with the user input. I will take the number as three. Okay? If the number, so when you say even number odd number, what it means, if the number gets divided by two, if the remainder is zero, then it's a even number, right? If the remainder is not zero, which is one in this case, it will be odd number. How do I verify that? So what I will do is I will use a variable R and I will save the remainder, which is either zero or one. So I will say X mod. Remember the symbol which we have used mod two, right? So in R, it is either zero or it is one, right? So instead of using false, I want to check if my R is equal to zero, because if my R is equal to equal to zero, then it will print even, right? So if my R is equal to zero, that means I say even number. Okay? That works. Let's try. I will run this code. Oh, okay. So that you got by, you know why we got by is because X is three and it's not number. Let's try with eight. Eight is an even number, right? Let's try this. We got the answer, which is even and by. So yes, we got even number because that's an even number and we got by because it should be printed anyway. This is how you work with if. So if this is true, okay, this is important. This is true, then it will print even. If this is false, it will not execute the block. It will not execute the statement inside that if. How about seven? Of course seven is odd number, right? I want to print even it is even. I want to print all as well. We were not doing that at this point. Okay. So we got all because if I print odd outside the if log, I will say odd, the thing is it will print odd anyway. Doesn't matter if your value is even or odd, exemplify it on this code, you can see we got odd in this case. And if the value is eight, then only then also it will print all. I mean it is printing even then all as well. We don't want all for even numbers, right? So I want to execute this one only when the number is odd, okay? So that means I want to print this only when. So I will say if, if r is equal to equal to one, okay? So we are doing that, right? So we are checking if r is zero, then print even if r is one print order, that works. Let's try. Oh, we got even because it's an even number. And I will try with nine, let's say one or we got odd. So it is working. So eight is even it. It was working, nine is odd, it's working. But don't you think if the number is even, okay? Everything is working as of now, but we had this a twist here. See, as a programmer, we also want to improve the performance, right? It's not just about writing code, it's not just about getting the output, it's about writing the efficient code. And this is not efficient, you know why? Because when you say your number is eight and eight is even, we know that. So it will check if r is zero, yes, it will print even, that's right. But then if the number is even, why you have to check this as well? Because it will go in the flow, right? Example, if I debug this application, let me just add a break point here. Remember, we have done that before. I will say debug and let's try F8. So you can see if I say F8, it is, it is saying yes, r is zero, it will print, it will print a one. And then I don't want to check for odd, right? Because it is even. So, but still, it will check r for one as well. I don't want it to check for r is equal to one because it doesn't make any sense. It's an even number. So that means what I'm, what I'm expecting here is if it is checking for this number, if it is checking for even, if it is true, then you should not be checking this one. In that case, what you will do is you, instead of saying r is equal to one, you can say else. You know what else means? If it's true, then execute the block, otherwise go for the else block. If this is getting executed, it will not be when checking the else condition. Let me just prove my point. I will put a break point here. I will say debug, right leg, debug, and F8, or the flow, you can see, r is zero, yes, it's going to even, and now it has skipped the else block. So this is how you improve the performance. So, instead of using two if, we can use if and else. It works, right? So these are your work with if else. Now, can I only use else? Of course, not else comes with if. So you have to remember that. So you can write if or else, instead of writing two ifs. Or there are certain conditions which are different from each other. It's not dependent. So of course, you have to use two if there. Can I have if inside an if? Is it possible? Let's try. If I want to check even, I also want to check if the number is greater than five, right? We can do that. So we can check if x is greater than five, then I want to print something else. I want to print greater, that's it. I want to print, I want to print great, that's it. I just want to print great. It doesn't make any sense. I know printing great, but then the idea is we can have if, inside an if. So this if will be checked only when this is true, right? So when you say if this is getting, if this is true, it will execute even. And then we have like we are adding another if and see this, see the indentation. So this print great belongs to the second if, not the first if, right? So if this is true, then it will print even that will check for the another condition and then it will print great, right? So this is called as nested if, which is if inside the if. Now how do you know that this is inside the if because of indentation, right? We can have an entire tree of ifs, you know, if inside the if and if, if inside the if, that works. For this one also we can write else. Now this else is appearing with this if, not the above if, okay? And if I say print, I will say not so, not so great, right? So what do you think? What is the output now? Of course, great, right? So let me just run this code and you can say, oh, we got the error. Can you guess the error? That's right, you can see that error here, the error symbol. So we should be using a colon, might ashtag there. So whenever you use if else we have to provide a colon, let's run this code and it works. You can see we got even great and by. If the value is not, it doesn't five, if it is three, let's run this code and you can see we got all and by because this is the odd number, it is not even going there and then it is printing all. So that works. So this is how you work with if and else. Let me add one more twist here. The twist is, it like not did, we're not with this code. Let me just try one more code here. We also have a concept of if, L if and else. Now what that means? Let's say, let's take an example here. If a user enters one, I want to print O and E, which is one in what format. If a user says two, I want to print two. If a user says three, I want to print three. If a user says four, I want to print four. Let's do it here. I will take a random number. I will take two because it doesn't matter. Maybe you can take this input from the user. You can try that. I will check if, oh, can I use round packets and the answer is yes. If you want to put the condition, you can put that condition in round packets as well. Now what happens, if you are coming from other programming language like C, C++, Java or C-Sharp, you have this tendency of using round packets there. So in Python also, you can use it. It's optional. You want to use it or not. That is your choice. What I'm talking about is this one. So if I can say if X is equal to one, so ensure putting that open, you can also put that in a round packet. But in our open looks cool. Let's use that. So if you got X is equal to one. In this case, I will print one. So that's one right. And then we can check it for other numbers as well. We can say if S is equal to X is equal to two, in this case, we'll print. So when you X is equal to, then we can print two and we can do that for other statements as well. So let's try that for the value. So I will say, so this is how we can do it for other numbers. Why? If I'm this code, you can see it is printing two. And if I change the value to let's say four, it will print. It will print four. So it is working. But again, the same problem, right? What if the value is one? And then when you run this code, don't you think it will print one? Of course, why it will check? It will check for every other number. In that case, if you don't want it to check with every other number, we can use, instead of using if, we can also use LF. Now, what is LF means is if this is not true, then only it will go for the next one. The same thing you can apply everywhere. You can say LF and LF. So LF stands for LF. So if this is false, then only it will check other conditions. If on this code, you can see we got one. And if I put a break point here, and if I done this code, in fact, we can simply debug it. And let's say, F8, and you can see if this is true, it will directly jump outside. Okay, it is not going for further instructions. But if I say this is three, or maybe let's go for two, in this case, so if I debug it, let's trace it. So you can see it is going for the false statement. Since it is false, it will jump to LF, because the first one is false. And now this is true, because the value is two, it will execute two, and then it will come out. Yeah, so this is awesome. Okay, what if the value is five? Now, this is not matching with anyone. It is not one, it is not two, it is not three, it is not four. So this is the jumping now. So if I debug, see the jumping, it's jumping to LF, which is false, jumping to next LF, which is also false, jumping to LF, which is also false. And then it's come out. So in that case, we should be printing wrong input. But how will I print that? We can do that in L's. If none of this matching, we can print wrong input. That's awesome, right? So this is how you can work with if, LF and L's. I can you can try out different combinations. You will find the assignment in the end of the video. So try it out and let me know your thoughts on if, LF and L's. So that's it. Thank you so much for watching everyone. I hope you are enjoying my series. Let me know in the comments section. Do like what any of you enjoy and get. Thank you so much for watching everyone. Bye bye.","alu work, knows cpu, unit, cpu, data unit, mean python, memory unit, python use, python series, au arithmetic, multiplication thing, cpu fact, series python, comes arithmetic, logical unit","Recommended Tasks:
- Ask the user for their name and age, then print a greeting.
- Build a calculator that performs +, -, *, /, and % based on user input.
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Connect to MySQL using mysql.connector and run a query.
- Create a function that receives a list and prints the square of each number.
- Create a function with default and positional arguments.
- Create a list of 5 fruits and print each using a loop.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Implement a linear search to find a number in a list.
- Install NumPy and create a NumPy array from a list.
- Practice positional, keyword, default, and variable-length arguments.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Research and list 3 real-world projects you want to build after learning Python.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program that prints ""Hello, World!"" and your name.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program to print the Fibonacci series up to n terms.
- Write a program using multiple variables and perform operations on them."
20_Python_Tutorial_for_Beginners_While_Loop_in_Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\025_20_Python_Tutorial_for_Beginners_While_Loop_in_Python.mp4, Welcome back to Arian's My name is Evan 20 and let's continue this series on Python. And in this video we'll talk about loops. Now what exactly loop means? Now in programming what you do is you sometimes you need to repeat this statements. Example let's say you have written five statements and maybe you want to repeat them. How you repeat them? Of course there is one way. You can copy paste the same code multiple times. Now let's say I want to print let me print telescope. So I want to print telescope once and if I done this code of course it will print only once. What if I want to print telescope two times? So what we can do is we can just copy paste it right. So we are good with we are good with this. So I will copy paste it and regard to telescopes and if I done this code can see we got to telescope. That's working. What if I want to print telescope ten times? What you will do now? Of course you can copy paste it ten times. But don't you think you are doing manual work? What if I want to print thousand times? You don't be difficult to do that right? Now the best way to do it is applying a loop. What you can do here is you can say hey Python I want to repeat the same statement multiple times. To do that we can use loops and we can use two above loops one is plus while loop and second is for loop. Let's focus on while here. So we can use a while. So while is a keyword and then you have to specify the condition. See while we'll say okay my job is to repeat this statement multiple times but then tell me for how much time you want to do that. I will say okay do it for five times but how will you do that? How will I do that? So when you say you want to do it for five times we count right we need a counter here example if I say hey you say hello five times. I'm talking to you here okay. So say hello five times what you will do is in your mind you will be saying hello once okay hello second time hello hello and hello so you have a counter there right in the same way we need a counter here. For that I will be using a variable called as I and I will say I start with one and then every time okay first of all you have to check right how will I check if the value of I is less than equal to five okay we have to apply a condition right so step one would be take a counter a variable which is I in this case and check if the value of I is less than five and every time you print a disco just increment the value of I right so because you are doing it right so you are saying hello hello so you are incrementing the value so you will say I is equal to I plus one that's it it's so simple and remember this syntax so we have to use a while then you have to specify the condition and a colon now this colon specify whatever is coming ahead is a part of this block and this two statement belongs to the same suit is because we are using a proper indentation here and now let me just run this code and you can see we got the disco five times so what is happening behind the scene and how do I know that it's very simple so it's at the break point and now let's debug it I love this thing debugging and then say F8 and you can see the value of I is one okay that's done and then if I again say F8 it is printing the disco once and you can see that in the console okay you can see that we got hello once and if I go back to debug it again the value of I now so the moment I say F8 the value of I becomes two you can see the value of I is two now and it will check if two is less than five yes it will go ahead and it will print telescope you can see if I go back to console it telescope will print second time and then if I say F8 again you can see we got value of I is three is three less than five yes it will go ahead it will print it will then try to print the statement which is which is telescope and you can see the console we got the list of three times and now the value of I is four right so if you can see the value of I is four and then if I say F8 it will print telescope fourth time you can see that in console if I switch back to there you can see we got a list of four times and then the value of I now is five right is a five less than equal to five yes you can see we have equal to there the evaluation is also true you can see that the proper if I say F8 there is it will print telescope fifth time you can see we got fifth time and if I go to debug again say F8 and you can see the value of I is six now the value of I is six right is six less than equal to five no that's a false right you can see the you can see the properties false and if I say F8 now it will come out and that's why you got five times telescope right so this is how you can use while loop now three things are important here first is the initialization second is the condition and third one is increment oh can we do decrement here yes we can to decrement as well so you can to reverse right sometimes we going this way hello hello hello hello hello or we can say so let's say we will do reverse hello hello hello hello hello right so we can do that as well so we started five and then we reverse the condition we'll say I is greater than equal to one and instead of saying I is equal to I plus one will say I is equal to I minus one we are going to reverse order let's run this code it works you can see we got five times hello so we can go ascending or we can do descending your choice so there are three things important here one assign the value then condition and then increment or decrement now let's I don't want to print telescope here I want to print the value itself or maybe I want to print telescope with the value we can do that so we can say space comma I want to print the value of I as well that's run this code and you can see it is printing telescope five telescope four telescope three telescope two and telescope one so you can do that okay this is how you work with while loop now can I use multiple I multiple while it's coming while inside of while you can do that so we have done that before as well right example I will print telescope once and then while I'm printing telescope once I want to print telescope rocks multiple times I want to print telescope rocks I want to print rocks five times so what I'll do I will say while oh now I want to say five times I have to use a different variable right and I will be using a variable here which is j is equal to one again we'll say j less than equal to four let's say I want to I want to print rocks four times we'll give a colon and we'll say print rocks that's cut so it will print telescope and then rocks four times I don't want to print the value of I now so it will print telescope and rocks four times so before executing this you try to guess the output okay it's you it's depend upon you now you tell me what's the output okay well it print telescope rocks four I'm see telescope itself will get will be getting printed five times right and then on every line you will get rocks four times this is what you want right but if I done this code oh that's weird it's not stopping anywhere you know why it's not stopping because we forgot to increment the value of j you know you learn from mistakes let's run this code once again and you can see we got telescope rocks rocks rocks four times and then again telescope four times that's that's that's not something which we want what is going wrong here let's try to debug this you know so I will just say hey debug the application now you can see value of i is five in fact you know just to make it more simple let's go with one let's go with increments or that it will be easier for understanding because once you understand the basic stuff you can try it on your own and remember this we are using while inside of while okay so this is nested while loop let me just debug this by applying a break point let me say f8 and you can see the value of i is one remember this values the value of j is one is one less than five yes let's go inside it will print telescope of course and you can see in the output console we we will be getting telescope now we got telescope now once the value of j it's one one less than four yes it will go ahead it will print rocks it will execute this j equal to j plus one so now the value for j is two okay if I say f8 the value of j is two but look at the jump it is not jumping outside it's not jumping back to this loop it is jumping back to the inner loop because first it will complete the inner loop then we will go back to the outer loop right it is something like you know we have seven days a week and each day has 24 hours right so you can imagine the number of days is the outer loop and the number of hours is the inner loop right so what it means so let's say if you start with sunday sunday has 24 hours it will start with zero r than one r second r third r fourth r now when you complete the entire 24 hours it will go for the new day which is monday in this case on monday as well we have the same hours right zero r one r so that means every time we change your day it will restart the number of counting for your your hours so it will first complete the hours right so same thing is happening here so if I say f8 again it prints rocks it will it will increment the value of j to three and that's why you can see if you see the output we got one telescope but two time rocks okay so that works in fact we wanted this right we wanted one telescope for rocks okay we'll do that we'll think about that if one of this you can see we got rocks and once it is getting completed once the value of j it becomes five you can see that the value of j now is five if I run this again it is false and now it is focusing on i so i values two now it went back there and then I'll get if I say f8 it will print telescope of course but look at the value of it for j j is five that's what things are going wrong now since j is five it is not continuing ahead oh so that was a mistake so to solve this problem what we can do is first we have to do two things I want to print rocks on the same line right I don't want to print rocks on new line so what we can do is after the telescope I can give a comma and say and is equal double quotes now what it means by default when you say print it will print this statement and comes on new line I don't want new line I want to print on same line example here if you see it is printing telescope and then it is coming on new line I don't want that I want it to be I want it to print telescope and stay on the same line same thing can be done for rocks I would say hey don't go on new line stay on the same line now I hope it will come on same line if I say one can you see that we got everything on same line okay we don't want that we don't want all telescope on same line we want telescope on new line so after incrementing I will say print because see after completing one telescope I want to print on new line so I will say run you can see we got telescope on new lines but then rocks is coming only for four times here what what is going wrong the value of j reached five five year right so what I will do is every time I start with the outer loop I want to restart the value for j which is one it's important every time in fact we should not be declaring the value here let's start here okay so it will initialize here check for the condition here and then increment here itself let's run this this we want right so we got telescope rocks rocks rocks now how it is working let's again go for debug will say debug and say f8 you can see the value of i is one i doesn't five yes it's one it will print telescope and it will not go on new line okay it will stay on the same line let me jump to console and you can see if I say telescope on same line okay there's not jumping to next line the value for j is one is one lesson four yes it will go ahead and it will print rocks and you can see rocks on the same line and then the value of j is getting incremented to now so you can see the value for j is two here and then again it will come back it will print rocks and it will go for j value which is three and then it will again three is lesson four it will print rocks and then j value is four and then it will check it's four equal to four yes it will print rocks and the value for j is now five now five is not less than equal to four it will come out but where it will come out to this next item which is i is equal to i plus one now in this case i equal to i plus one it will increment the value for i so it will make it two and then since we are printing if we since we are doing print it will come on new line you can see the cursor now cursor is on new line I will say I mean it will continue okay so it will do the same thing which we have done till now so if I go fast fast fast see that see the sequence so these are your the our loops are working now see since I am doing this I have worked on this for a long time so I know how it works now if you know fresher you might find this thing difficult but trust me the only thing is this is not difficult this is just unfamiliar you just need to practice it the more you practice this concept it will make your concept very clear okay so we will be doing that we will be doing some examples with this you know printing the patterns like star star star or real stuff so we will do that in the further sessions I hope you got some idea about while loop or in the next video we will talk about for loops so if you are enjoying this series depending on the comments section and I do like what if you are enjoying it thanks for watching everyone,"printing doing, repeat statement, second loop, repeat repeat, loop means, exactly loop, sequence loops, loop number, loops exactly, loop say, work loop, repeat statements, loop things, use loop, loops use","Recommended Tasks:
- Create a custom iterator that returns even numbers.
- Extend your loop to include all three: break, continue, and pass.
- Print a right-angle triangle using stars *.
- Print numbers from 1 to 10 using a while loop.
- Print the elements of a list using a for loop.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break)."
21_Python_Tutorial_for_Beginners_For_Loop_in_Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\026_21_Python_Tutorial_for_Beginners_For_Loop_in_Python.mp4," Welcome back to Adrian's My name is Ivan Reti and let's continue with the series on Python. So in the last video we have talked about loops right and specifically it was a while loop. In this video we will talk about ford loop. So while loop and ford loop they are both at loops right but then the working is different. In fact normally when we talk about while loop it is for certain iterations and it is for certain conditions. So if you remember the while loop we specify a condition but that's not the case with ford loop because in ford loop it normally works with sequence. What type of sequence I am talking about? Think about list. Think about tuple, think about string. So what I am basically talking about is let's say if you have a list here and in this list I have certain values. It can be any random value let's say my name Navi 65 and if I say let's say 2.5. So I have these values. One is string, one is integer and one is float. It doesn't matter what type of value you have there. I want to print these values. It's very easy actually you can simply say print and you can print the value of x. This will work. Okay let me just run this code and you can see we got the output but what if you want to get the output individually I want to print the values one by one. So in this case you will be using a ford loop. Now ford loop works so we have to say ford then we have to use a variable we will say this time I. Now I represents one element of this list at a time. For example initially I will refer to Navin then I will refer to 65 then I will refer to 2.5 one by one. So you have to say for an i in x so one by one it will fetch the value and again this is assumed so you have to use a colon there and you can write lines of statements. Again the point is you need to make sure that you use a proper indentation. So I will be printing the value that said I will be printing the value of i that said say those there is no iteration unlike while here so we don't need to show us the variable we don't take the condition and we don't increment or decrement by ourselves it will be done by ford loop itself. This is pretty smart right. So now if I run this code you can see we got the values one by one. So yes if you want to print all the values from a list use ford loop. So ford loop normally can be used with sequence example list which we have worked with now or a string. Let's say you have a string here let's say the x is not a list now it is a simple string which is Navin. And then I want to print the value of this one by one. So one way is you can use an array right so we can use a value here as well and then you can use that square back and you can specify index values otherwise if you run this code you can see this is how your ford loop works. So what it will do the value of i first will have n and then it will have a let me just do that again the thing which we are doing from a long time which is debug. So I click and say debug let's trace it so if I trace you can see the value of x is Navin and the value of i is n now again if I repeat if I say next iteration you can see the value of i will become a and then next iteration the value of i becomes v the value of i becomes i and then value of i becomes n so that's Navin for you and we are printing all the values right so if I see the console you got all the values one by one right of course I forgot to one do one more. So you got Navin there so that's the advantage of using ford loop. Okay can I use ford loop with something else yes we can example we can also use this with tuple or we can use with set but then we have one more example in you can do you can specify the list itself okay instead of having a different variable you can have your list here even that works yeah so you have to six ball and if I done this code you can see we got one by one so you can have your list there itself so syntax is your mention for then you say i in and then you mention the collection or the sequence it can be a list it can be a string everything works in fact what if I want to print the values from one to ten because of course we can do that we can do that in value can we do it here and there is yes for that we have to use range if you remember in sequence we have talked about range in range if you specify ten what it means it means start from zero and end at nine so in total we have ten values and if I have this code you can say we got zero to nine so we got zero and then it ends at nine so in total we have ten values so we can use range as well and using this range you can perform certain operations in fact in range you can actually start from different value let's say I don't want to print from zero to ten I want to print from let's say 11 to 20 in that case you will say hey I want to start from 11 I want to end at 20 so we want 20 included right so we'll say 21 and every iteration will have one so it will be one by one iteration so if I say run so you can see we got values from 11 to 20 so you have to mention three things studying point ending and the iteration it will be difference would be one or two example if I say this is two in this case so look at the values now it will be different values 11 13 15 17 and 19 so there's a difference of two if I say five you can see we got 11 and 16 that's it so this is how you specify the gap there what if you want to print in reverse let's try can I start with 20 and if I end at 11 if I run this code it will give you it is giving you nothing because it always goes in ascending order we have to mention go in reverse order so you have to say minus one so it will start from 20 and then 1918 and it works in that way so you can see we got from 22 12 now there's a problem we have to make sure that it goes till 11 right so you have to because the value 11 is excluded so we have to use 10 so that it will include 11 that's one this again and it works so this is how you can use range and this how you can use for glue now in fact we can do one more things so you can see we have a range of 20 and then I'm printing the value of I in fact I will just go I will start with one so I want from 120 so I will inclusive I will make sure it is 21 so that it will include 20 and the iteration would be one or even if you don't mention that that's fine if I the print value you can see it is 120 what I want is so every time the value which is a divisible by five it should not get printed okay so I want that so I want to print only when the value is not usable five so we can use if inside for right so we can do that so we can have if condition inside for if you want to if you want to have that condition so you can say if I mod five is equal to zero don't print otherwise you can print okay but how can I do that so what we can do is we can say not equal to so print only when it's not equal right so we can do that so print only when it is not equal to say if I run this code if I say run oh we got an error because I missed something and I'm also using brackets because I have this habit of working on Java so it's it anyway it's optional in Python so let's run this and you can see we got we got one and we got four you can see we we don't have five there because we are checking what the condition so yes we can write if inside a for so it since we had if inside for we can also have for inside a for which is an instead for loop but then we'll not be doing that here in the next video we'll play with some patterns you know we'll we'll try to draw some patterns and we'll try to understand how do we do that so in the next video it will be fun so I hope you're enjoying the series it means the comment section and do clear like button if you're enjoying it thanks so much for watching everyone bye bye","specifically loop, loop certain, sequence, value iteration, iteration value, python, iteration difference, loop specify, loops, type sequence, loop loops, sequence example, sequence type, series python, sequence list","Recommended Tasks:
- Add single-line and multi-line comments to a script.
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compare two objects using their attributes.
- Compute the factorial of a number using a loop.
- Connect to MySQL using mysql.connector and run a query.
- Create a Django model class with fields and explain what it represents in DB.
- Create a Python module and import it into another file.
- Create a class Car with attributes and a method to display info.
- Create a custom iterator that returns even numbers.
- Create a function that receives a list and prints the square of each number.
- Create a function with default and positional arguments.
- Create a list of 5 fruits and print each using a loop.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create an abstract class with an abstract method and subclass it.
- Create an array using the array module and perform basic operations.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create two unrelated classes with the same method names, and use them interchangeably.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Extend your loop to include all three: break, continue, and pass.
- Implement a linear search to find a number in a list.
- Install Anaconda and create a new environment.
- Install Django using pip and create your first project using django-admin startproject.
- Install NumPy and create a NumPy array from a list.
- Install Python and PyCharm, and run your first Python script that adds two numbers.
- Install Sublime Text and write a script to calculate the area of a rectangle.
- Instantiate objects of a class and call their methods.
- Launch Jupyter Notebook and run a simple Python cell.
- Make a dictionary storing student names and their scores. Print each pair.
- Practice positional, keyword, default, and variable-length arguments.
- Practice using Python IDLE. Run commands and explore how to clear the screen.
- Print a right-angle triangle using stars *.
- Print numbers from 1 to 10 using a while loop.
- Print the elements of a list using a for loop.
- Push code to GitHub using Git in PyCharm.
- Repeat the swap task but with user input this time.
- Research and list 3 real-world projects you want to build after learning Python.
- Setup MySQL Workbench and connect to it via GUI.
- Simulate method overloading using default arguments; override a method in a child class.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use filter, map, and reduce to process a list of numbers.
- Use for-else to search for an item in a list. Print a message if not found.
- Use if __name__ == '__main__': to separate code from execution.
- Use lambda to double a number and to filter even numbers from a list.
- Use the help() function to explore any built-in Python function.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program that prints ""Hello, World!"" and your name.
- Write a Python program to print your name, age, and favorite color.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program that converts decimal to binary, octal, and hexadecimal.
- Write a program to print the Fibonacci series up to n terms.
- Write a program using multiple variables and perform operations on them.
- Write a script and observe behavior during runtime (interpreted)."
22-Python-Tutorial-for-Beginners-Break-Continue-Pass-in_Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\027-22-Python-Tutorial-for-Beginners-Break-Continue-Pass-in_Python.mp4," Welcome back, Ariyan's, my name is Avindra D and let's continue this series on Python. Till this part we have talked about loops, right? We have talked about ford loop and while loop. In this video we'll talk about 3 keywords. Break, continue and pass. Again, why do we need that? Let's say in the code itself. So let's design a vending machine. Of course not a physical machine here. Let's write a simple code just to mimic vending machine here. So what will do is if a user says hey, I want 5 candies, you have to give 5 candies. Not a physical candies but then we'll write only candies. So print candies. So if I say one candy it's one time. So if a user says say I want 5 candies, you will print candies 5 times. That's what we want to do. So let's write here. So first of all, we'll have variable and we'll say x and the value for this variable will be coming from user input. So we'll say int input and in this bracket you'll mention how many candies you want. Okay, once you got this statement, what I'll do is I want to print candies. So if a user says hey, I want 5 candies, you will print candy 5 times. If you want to do something multiple times, you will simply use a loop. So we'll use a while loop here. Again, you can use for loop. That's your choice. Okay, but I love for a while loop here. So I will take a variable which is increment variable. I will say i is equal to one and then we'll use a while loop here and we'll say if i less than equal to x because depend upon the number of value our user is entering, we'll print, we'll go for so many candies. And every time this loop runs, we'll print candy. That's what we want to do here. And then after every statement, we need to also increment it. In fact, if you can write i equal to i plus one or you can use a shortcut here which is i plus equal to one. Because we have seen that. So instead of saying i equal to i plus one, we can also use i plus equal to one shortcut for the same thing. Now they should work, right? So they should work. Let's try. So if on this code, you can see it is asking for the number of candies. I would say four candies enter. You got candy four times. That means you're getting candies from the machine. And I will just run this code once again. I will this time I will go for let's say eight. And you can see we got candy eight times. So it is working. Now here is a twist. The twist is what if a user says, hey, I want hundred candies. Okay. And then in your machine, in the vending machine, we don't have hundred candies. You have let's say 50 candies or maybe 80 candies. So what you will do now, you have two choice. You can stop the transaction. You can say, hey, user, we don't have so many candies or what you can do is you can give 80 candies. And you can say, hey, we are out of stock, right? Can you do it here? So I want to do that here. So I will able to count this. I would say I would use a variable called as a v which is available candies. And let's say in my machine, I have only ten candies. Okay. If a user says five candies, no issue. You can take five candies. Example, if I on this code now. And if a user says, hey, I want ten candies, that's completely fine. We have ten candies. But if a user says, hey, I want of twenty candies, we don't have that much, right? So what you will do here. So in that case, before printing candies, what we can do is... So here we can check if the number of... If the value of i, because see, if we have ten candies, and if a user says we want twenty candies, what you can do is you can give ten candies, right? So the value of i is important here. The value of i is greater than your number of available candies, which is a v. In that case, you will stop the execution. Or we forgot one colon there. So we need to stop the execution. But which execution? Not the entire code execution, because maybe at the end of your code, outside your wild loop, I want to print by. So I don't want to stop the execution, because you can do that by saying x0 or something. I don't want to end the execution of the code. I just want to come out of wild loop. And the way you can do that is by using a statement called as break. The moment you say break, it means hey, just jump out of the loop. So let me just run this code, and you can see how many candies you want. I would say I want five candies. No issue. You got five candies and you got by as well. It should be get lost, right? Okay, so if I say eleven candies now, and you can see we got how many candies here. So we got one. In fact, let me just reduce the number, because it is difficult to count. We don't have much time. So I would say I want six candies, and see how many candies you got. You got one, two, three, four, five. So total number of candies available of is five. But then a user says I want six candies, what you will get is only six candies. Right? So this thing is important. So this is how you can stop. You can just jump out of the loop. So there are so many applications of this break statement. You can use it in your applications. But then this is how it works. So if you want to just jump out of the block, you can simply use break. In fact, if you wanted to print a message by saying, hey, we are out of style. We can do that here. So you can say print out of stock. And now I feel on this code, let's say I want eight candies. You can see after printing five candies, it's saying out of stock. You know, this is what happens when you buy something, buy a new phone online. You know, we have this open sale. So some people can buy it, and then it says out of stock. Anyway, so this is how your break statement works. The next statement we have is continue. So the question is, so in the last video, I have given you the assignment, which is, you need to print numbers from 1, 200 or 1, 220. But then don't print the values, which are divisible by three or five. Okay, so you have to skip those values. So basically what I want is, I want to print 1, 2, 3. I want to print 1, 2. I don't want to print 3. Then I, because it's divisible by three, I want to print 4. I don't want to print 5 because it's divisible by five. I don't want to print 6 because it is divisible by three. I want to print 7, 8. Then I will not print 9 because it is divisible by 3. Okay, so I want to skip those numbers. How can we do that here? Of course, we will shorten the code. We will not be focusing on 5, only focus on 3. Okay. So I want to print all the values from 1, 200. But then I don't want to, I want to skip those values, which are divisible by three. And to do that, whatever it is, I will write a code. And this time we will go for 4. We can go for 5. I will say for I, in, and then we'll use the range here, and I will go to 1, 101 because that's what I want to go for. I don't want to print 0. So let me start with 1. Okay, so that's my for loop. And then I just want to print the value of I. Now, what will happen? It will print all the values. It will print the values from 1, 200. Let's check it out. So let's say run. And you can see we got all the values. But I don't want to print all the values, right? I want to, I don't want to print the value, which is divisible by three. In that case, whatever it does, I will say if, if my I value, which is I mod 3, is equal to equal to 0. Okay, let's not use on brackets there. If this is equal to 0, in that case, I just want to skip the remaining statements. Okay, when I say remaining statement, I don't want to skip the statement outside the loop. Example, if I say at the end, and it's a good idea to print by the end, because at least you will know what is happening. So what will happen now is when you say for I in range, 1, 200, every time you say if it is 3, in that case, I don't want to print I. I just want it to continue with the loop. Let me just run this code for you. Oh, we got an error. What's wrong? Oh, we are missing one thing, right? Now, how will you, how will you continue? So you have to say a statement, which is continue. So continue will skip the remaining stuff. So if I don't this code, and you can see we got all the values and look at the output now. We got one, two, we are, there's no three because in his divisible by three, we don't have sex again, we don't have nine, we don't have 12. So this is how you work with continuous. So what continue will do? It will skip the further execution if you say continue. It will not jump out of the loop. It will only skip the remaining statements. In fact, in the assignment, what we have done is, so in the assignment question, it was three or five, right? So we can do, we can say, or, I mean, we have to use a or symbol here. So we have to say, or I mod five is equal to zero, right? So now it will skip all the values, which are divisible by three or five. So you can see we don't have three, we don't have five, we don't have nine, we don't have ten, right? So this is how it works. In fact, we can also do it for and. So only skip those values, which are divisible by three and five, example of 15, right? So we have 30, so all these values. So if I done this code once again, and you can see it will skip only those values, which are divisible by both. In this case, it is 15, you can see we don't have 15. So that's how you can practice. And also we have continue here. It works, right? So the next one we have is pass. Now, when you will use pass, so just imagine we want to print one to 100. Okay? So I want to print all the values, but then I don't want to print those values, which are let's say odd numbers. Okay? Again, we are going for a simple example. I don't want to print values, which are odd numbers. So my condition here is don't print odd numbers. See, I'm not thinking about even, I'm thinking only on odd numbers. So my logic here is on order. How do I check odd? So we'll say I want to print the value of I, but it should not be an odd number. So in that case, my condition is only on order. So I want to do, so I want to print in else condition. So I will say in else you have to print this. So if I mod 2 is not equal to 0, then don't do it. But only if it is in the else condition, I want to print it. But that's what I'm trying to do here. Now, I know you'll be saying, why, why, why, why, what if you simply use even if you check for even and printed, but imagine if you have a scenario where you are checking for the odd values. You're not focusing on even, you're focusing on odd. In that case, I want to print it in else part. But then you can say it will not work. You can say it is giving you an error. You cannot simply put an if as empty block. So in that case, you will say, hey, I don't have anything here. I'm typing pass. So pass simply means there is no code, ignore it. So just pass the if block. In fact, another language is like cc++. We have curly bracket, so we can fully free it up. But unfortunately, we don't use curly bracket here. So we have to use pass. So if I'm on this code, you can say we got all the values, all even numbers, oh, if we got all the values, which are not odd, okay? So just replacing the point. So that's how we use break, continue and pass. So in the next video, we'll talk about some more patterns. Since we have talked about this thing now, so the next video will be exciting. Well, we'll talk about different patterns. So I hope you're enjoying this series. Let me know in the comments section. And if you have any questions, let me know that as well. So thank you so much, everyone. Bye-bye. We'll see you in the next video.","loop just, candies machine, print candies, loops right, loop want, print candy, loop runs, code candies, loop let, loop variable, loop applications, python, loop example, loop choice, use loop","Recommended Tasks:
- Add single-line and multi-line comments to a script.
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compare two objects using their attributes.
- Compute the factorial of a number using a loop.
- Connect to MySQL using mysql.connector and run a query.
- Create a Django model class with fields and explain what it represents in DB.
- Create a Python module and import it into another file.
- Create a class Car with attributes and a method to display info.
- Create a custom iterator that returns even numbers.
- Create a function that receives a list and prints the square of each number.
- Create a function with default and positional arguments.
- Create a list of 5 fruits and print each using a loop.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create an abstract class with an abstract method and subclass it.
- Create an array using the array module and perform basic operations.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create two unrelated classes with the same method names, and use them interchangeably.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Extend your loop to include all three: break, continue, and pass.
- Implement a linear search to find a number in a list.
- Install Anaconda and create a new environment.
- Install Django using pip and create your first project using django-admin startproject.
- Install NumPy and create a NumPy array from a list.
- Install Python and PyCharm, and run your first Python script that adds two numbers.
- Install Sublime Text and write a script to calculate the area of a rectangle.
- Instantiate objects of a class and call their methods.
- Launch Jupyter Notebook and run a simple Python cell.
- Make a dictionary storing student names and their scores. Print each pair.
- Practice positional, keyword, default, and variable-length arguments.
- Practice using Python IDLE. Run commands and explore how to clear the screen.
- Print a right-angle triangle using stars *.
- Print numbers from 1 to 10 using a while loop.
- Print the elements of a list using a for loop.
- Push code to GitHub using Git in PyCharm.
- Repeat the swap task but with user input this time.
- Research and list 3 real-world projects you want to build after learning Python.
- Setup MySQL Workbench and connect to it via GUI.
- Simulate method overloading using default arguments; override a method in a child class.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use filter, map, and reduce to process a list of numbers.
- Use for-else to search for an item in a list. Print a message if not found.
- Use if __name__ == '__main__': to separate code from execution.
- Use lambda to double a number and to filter even numbers from a list.
- Use the help() function to explore any built-in Python function.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program that prints ""Hello, World!"" and your name.
- Write a Python program to print your name, age, and favorite color.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program that converts decimal to binary, octal, and hexadecimal.
- Write a program to print the Fibonacci series up to n terms.
- Write a program using multiple variables and perform operations on them.
- Write a script and observe behavior during runtime (interpreted)."
22.1-Python-Tutorial-for-Beginners-Break-vs-Continue-vs-Pass-in-Python-part-2.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\028-22.1-Python-Tutorial-for-Beginners-Break-vs-Continue-vs-Pass-in-Python-part-2.mp4," Welcome back everyone. When we have talked about break, continue and pass, it created some level of confusion for some people. So I thought, okay, let's make another video and let's solve it out. To understand the difference between break, continue and pass, let's take another example now. In fact, I guess we are sure with break and I mean, we know the difference between break and continue. So what continue will do is it will skip the limiting statement, it will go back to the next iteration. So if you are using a ford loop here, so if I say for I in range and if I take a loop, let's say, a five and if I want to print, let's say, I want to print here, hello, and I also want to print the value of I. So I'm printing hello and I, right? If I want to skip the element, which let's say three, so when the I value is three, I don't want to print it. So in that case, I will say if I is equal to equal to three, in this case, you can simply skip. I don't want to print it. So you will say continue. So what continue will do is it will skip that iteration. So the moment you say it's three, it will say continue, it will go back to right, it will not print the statement. But so you can see, for this code, you can see we got hello, zero, hello, one, hello, two, there's no iteration for three, right? Because we are skipping it. That's the continue part. The next one is break. So what break will do is the moment you see I is equal to three, it will break that loop. So it will not continue with the loop. So even, so after second, it will simply not print anything. You can see the output is zero, one and two. So just skipping everything. So the entire loop gets break. Okay, that's important. So continue will skip particular iteration and break. Well, skip it. The next one we have talked about is pass, right? Now it is pass. Now again, it doesn't make any sense for this example. Whatever you do is let's take something else. Okay, so there's a concept as functions classes. Again, we'll be seeing that later. But when you talk about functions, the way we define that is by saying dev. Again, what is function? How it works? It's a separate concept, right? But let's say if you want to define a function, normally what we do is we say dev and we define a function name. So let's say a function name is fun. And I want to define something in this. So normally in function, you write certain statements, maybe one statement, three statement, ten statement. But normally we need to mention something in a function. Example, if I will say print, do something. So this function is doing something, right? It's printing something. It may be having multiple statements. So we can do the same statement multiple time. So you can say we have three statements, right? So normally in function, we expect that you'll be opening some statements. And then after you are done with the function, you can do your normal task. Let's say if you want to do something else, you can print something or you can assign a variable, let's say assign variable A equal to five, you can do all those stuff. And you can see there's no problem. There's no compile time issue. The moment you remove this statement, let's say if I think, hey, we will define the function later. So I know the function name now, function name is fun. But I don't know what to put inside this. Maybe I will change it later. Maybe I will implement that later. But as of now, I just want to define a function fun. But I don't know this statement in this scenario, you can simply say pass. So you are mentioning to your Python that, hey, I'm simply using this function. But I don't know how to implement that. So I will simply say pass, just skip this function. Okay. So if you want to keep a function empty, you will use pass. Okay. The same goes for if condition in this for low, if you specify a condition if, and you will say, if I is equal to four, maybe I want to print by, okay, at the end, I want to print by, but when you are not sure what you want to print, you just want to keep that condition, but you don't know what to print, you will simply say pass. Maybe you will type this statement later. When you have a block like if it's a block, right, a function is a block. So when you have a block, when you don't know that block, what we will have in a block, you will simply say pass. Same applies to class, maybe in future, when we learn about classes, so we'll say class human and we give a colon. And normally we write something in a class, right, variables and then methods. But as of now, if we don't know what to mention, just simply say pass. Okay. So again, it's very different from continuing break, because continuing break, we normally use them in a function or in a loop, but when it comes to pass, we normally use it to skip the block. Okay. So if you define a block, and if you don't know what to write inside that, just say pass. I hope it removed some level of confusion from your mind. Still, if you have an issue, let me know in the comments section, I will try to make another video. And I do read your comments. Okay. So maybe I will not reply at that point, but I will show you a little make a video if you are getting stuck somewhere. So that's it, everyone. I hope you're enjoying this video. Let me know in the comments section and do subscribe for for the videos.","iteration right, entire loop, difference break, loop, iteration using, iteration, continue skip, continue pass, equal break, break continuing, range loop, continue break, skipping continue, break skip, skip iteration","Recommended Tasks:
- Create a custom iterator that returns even numbers.
- Extend your loop to include all three: break, continue, and pass.
- Implement selection sort on a list of integers.
- Print a right-angle triangle using stars *.
- Print numbers from 1 to 10 using a while loop.
- Print the elements of a list using a for loop.
- Use for-else to search for an item in a list. Print a message if not found.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break)."
23-Python-Tutorial-for-Beginners-Printing-Patterns-in-Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\029-23-Python-Tutorial-for-Beginners-Printing-Patterns-in-Python.mp4," Welcome back, aliens. My name is Evan Reddy and let's continue with the series on Python. Now, till this point, we have talked about loops, while you follow and then view those beautiful keywords and in this video, we'll draw some patterns. Okay? Normally, if you are in college or if you are learning a programming, this is important because it will improve the way you think. Programming is all about solving a problem, right? So you have to understand the problem statement and you have to put that in a code. So mentally in your mind, you'll be having those solutions ready, but that will be in an abstract format. You have to implement that on your machine with the help of code. So what will do is we'll try to do some patterns so that it will improve the way you think about logic. So what will do is, initially, we'll do this. In fact, yeah, I know this is the assignment question you had in the last video. So we want to print this pattern. Of course, everyone have their own way of doing this and what you can also simply do is you can print this multiple hash multiple times, right? So I want to print this. So what I will do is I will simply, so if you want to do that, it's very simple. Just print hash, hash, hash, hash four times and then you can do the same. Let me just do that here. Okay? And then you can, so by doing this, you can see we got four hash, right? So at least we got the first stuff. But then what if I say you cannot use, you can only use one hash in one print. Of course, you can draw the entire box using four print statement, but let's say if you want to print only one hash within one print, so what I want is I don't want to have multiple hash here. I just want to have one hash because for now this code now you can see we got one hash. I want to do at least so we'll first complete the first row. Now, if you can see we have four rows and four columns, right? So let's complete the first row. Now if you want to complete the first row, you will print this multiple times or you will write print four times. Okay, let's do that. So I will just copy it. And we'll paste it here. We'll paste it here. We'll paste it here. So we got four prints, right? And if I done this code, or we got four hash, but then we wanted in row format, right? Not in vertical format. I want horizontal format. So what is happening here is after every period it is coming on new line. So solution would be we can give a comma and say, hey, don't just come on new line. So we can say end and double quotes. We can do the same thing for all the statement. Let me do it here. And now if I done this code, you can see we got four hash in one line. So this is what we got. We got the first block. Now what I want is I want four blocks, right? In fact, there is one problem with this code as well. We are writing the same statement four times. Don't you think it is weird? So the best option here would be I want to do the same thing multiple times, right? So we can use a loop. And I will be using a loop here, which is a four loop. So I will say for a reduce J in you can use any variable name, right? We have discussed about that, but let's use J here. So for J in, I want to have a range of, let's say four. Now, when you say range of four, it will start from zero and it will end. At three, right? I will give a colon. And now even on this, you got the same output, right? So instead of typing four times, we can just use a loop. Let's say, so we got first row, right? I want the second row as well. So we can just copy this code because this will generate the second row, paste. So we are writing a four look two times. So one for look for first row and second for the first second row. And if I done this code now, you can see we got, oh, we got eight hash, but then in one line, the thing is we need to make sure that before second for loop, I want to come on new line, right? Let's run this. Oh, we got it. So we got, we got four rows or two rows on four columns. Okay. This works. In fact, if I do the same thing for third time, we will need print print as well, the new line. So that's so that will come on new line, right? So if I found this code, you can see we got three times. If I do the same thing, we got four times, but then there's an issue here. Don't you think we are doing same thing repeatedly? And when we know that if you do the same thing repeatedly, well, you do only once, but then we will use a loop again. So the entire block, let me just give a tab, the entire block will come under another loop, which is in this case, I use a for loop, I in range of four. So the entire block is a part of the another loop, right? So if I find this code now, look at this, it's so simple, right? So this is how you learn about programming. This is how you learn about different logic. So what we are doing is we are printing hash, but multiple times in total, we are printing hash 16 times. You can see this loop runs 16 times. Let me just do it. So apply the break point here. Or it's a debug and let's it create, we'll say, a fate, you can see the value of I is zero, the value of J is zero and then it will print hash. And you can see in the console, we got the value one hash. Then the same loop will it create. So the value of J becomes one, it will print hash, the value of J becomes two, it will print hash, the value of J becomes three, it will print hash and now this is the fourth time, right? We'll go for, we got the fourth hash. Now it will jump outside the loop and in fact it will come on new line first. You can see it has, it will jump to new line now and then the value of I becomes one, yeah? And then the J value becomes zero, again it will start from zero to three. That's how it goes and then we got four hash and then it will say new line and then it will jump up. So this is how thing works, right? It's so simple. Okay, now once we have done this, what if I want this pattern now? So in this you can see we don't have the perfect square, we have a triangle shape, right? So how do I do triangle? Now if you concentrate here, look at the number of rows and columns because in the earlier version where we have the entire box, we were having four rows and four columns. So we can say this J represents the number of columns you have and I represent the number of rows you have, right? Because J is responsible to print the column at the end. So now here in this triangle you can see the number of columns in a particular row is depending upon the row number. So in the first row we have only one hash. In the second row we have two hash, right? So the number of hash is depending upon the row number, right? So what you can do is you can control this range. So we have to say, hey, don't go till four because if you go till four it will print four hash. I want to go till I. Okay, so I will go till I, you found this code. Oh, we got a triangle, okay? Because now we are not going at the end, we are going till only till I. So when the value of I is zero you can see it is not printing any hash. This is an output for that. When your I value is one is printing one hash. When the value of I is two it is printing two hash, right? But then this is something weird, okay? We wanted four hash at the end. The problem is the value of I starts with zero, right? So we will go for one. So it should be I plus one. So when your I value is zero it is actually first I want one. So you can see we got four hash now. This is what we wanted. So this was the earlier pattern we had and now I want to go for the next pattern which is this one. Now you can see this is also triangle but in another way. What is different here is I am printing the same triangle but in reverse order, right? The number of rows, okay? So in the first row we have four. In the second row we have three, in the third row we have two and then it ends with one. That means as your row number increases your number of hash decreases, right? So what if you can say four minus I. Now you will be thinking what is this? Think about this. When your I value is zero, in that case the j will go to four, right? It will print four hash. When your I value is two, the value for j will be three, right? It will print three hash. So depending upon your I value, it is printing those of hash, right? So if I'm this code, you can say this is what you got, right? So this is how thing works here. So this is how the other pattern we have worked with. I hope you are enjoying this series. Let me know in the comments section and do subscribe for the videos.","draw patterns, hash output, learn programming, use loop, patterns, hash multiple, print hash, python till, loops, printing hash, series python, programming learn, learning programming, print pattern, programming solving","Recommended Tasks:
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a class Car with attributes and a method to display info.
- Create a custom iterator that returns even numbers.
- Create a function that receives a list and prints the square of each number.
- Create a list of 5 fruits and print each using a loop.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Extend your loop to include all three: break, continue, and pass.
- Implement a linear search to find a number in a list.
- Install NumPy and create a NumPy array from a list.
- Practice positional, keyword, default, and variable-length arguments.
- Print a right-angle triangle using stars *.
- Print numbers from 1 to 10 using a while loop.
- Print the elements of a list using a for loop.
- Research and list 3 real-world projects you want to build after learning Python.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program to print the Fibonacci series up to n terms."
24-Python-Tutorial-for-Beginners-For-Else-in-Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\030-24-Python-Tutorial-for-Beginners-For-Else-in-Python.mp4," Welcome back aliens, my name is Evan Vetti and in this video we will talk about 4Ls. Okay, hold on. If you are coming from different languages like C, C++ or Java, we know one thing, we know 4Lop separately and we know that we can use Ls with the help of IF, but then we have never talked about 4Ls together. Can we do that? And the answer is yes. So in Python we can use 4Ls together. So to understand that let's take an example here. So when we talked about 4Lop we have taken an example that we want to print all the numbers between 1 to 20 and we don't want to print all the numbers which are divisible by 5. This time we'll do reverse. So let's say I have a list here, so let's take numbers. So let's have some values here so I will take 12, 15, 18, 21 and let's say 26. So we got this number here. So what we want to do here is I want to check if this list has a number which is divisible by 5. So if you have a number which is divisible by 5, we just have to print it. So if you can see we have a number. So we have 15 there which is divisible by 5. But how do we check that? So of course if you want to go from start to end we have to use a loop and we love 4Lop here. So let's take a 4Lop we'll say 4 and we'll send num in. Nums, I know that sounds weird but let's take it. So we have 4 num in Nums. Okay, so we are using a 4Lop and then inside this 4Lop I just want to check and how do we check we have to say if? If num mod 5 is equal to equal to 0 that means it is divisible by 5, let's give a colon and here I just want to print the number. Is that simple right? So we'll simply say print num. So does the thing right? Everything is done. So we got a 4Lop, we got if and now let's run this code and you can see we got 15. So yes we in this list we have a number which is divisible by 5. Example if I remove this 15 and if I make it 16 if I make this 26 as 25. So yes we still have one number which is divisible by 5. Let's run this and you can see we got 25. Okay, there's a one problem here. What if we have two numbers? In this case let's say if I make this one as 20. So we got 20 and 25. In the output you will get both. We got 20 and we got 25. We don't want that. What we want is we want to print only the first number. So that means we just have to say we got one number which is divisible by 5. So in this case I will use break. So basically we use break to come out of the loop. So whatever loop you are running it will just jump out of the loop. That's it. And now if you run this code you can see we got 20. It is not even checking for 25. In fact if you have this one as 10. In this case it will just run only once. It will only go for one iteration. And then it will skip all the remaining number because we are saying break. But we got a twist here. The twist is what if you have numbers here and none of the number is divisible by 5. Look at the numbers now. We don't have any number which is divisible by 5. And if you run this code you can see we got the output which is blank. Oh, that's a problem. So what we can do here is we can use a else condition here. So we can say else if it is not there you can simply print not found. So what we can say is if you don't have any number which is divisible by 5 you can simply print not found. And it should work if you run this code you can see we got not found but hold on we got not found five times. Because what is happening you know in every iteration it is checking for the condition and this else here is for if look at the indentation. So this else is for if. And that's why for every iteration if this if returns false it will execute the else bar. We don't want that we don't want to execute else every time you have the iteration. We want to execute else only when the entire loop is completed without break. So what we can do is we can just write else for for not for if if you can see this else is for the for look not for if okay. And if you run this code you can see we got not found only once. So what we are saying is if you have this loop in which you have a condition in which you are also saying break you can also use else because this loop is never break and that's why we can say else. So that's how we can use for this. So this is not something which we use in daily life but yes we can use it. Okay do we have something more here example let's say if I have the first value of 10 now since we have a number which is 10 it will not print not found you can it will print 10. So that's how it works. So it's the break is compulsory here so if you remove break and if you run this code you can see it will print not found. So that break is compulsory so it will work only when you have break. So that's it everyone that's how you use for and else in Python. So yes we can use for else. So I hope you are enjoying this video depending on the comment section and do subscribe for other videos. Bye bye.","iteration checking, 15 divisible, python use, python, use ls, list number, number divisible, python yes, divisible simply, numbers divisible, use 4ls, talk 4ls, 4ls answer, divisible check, 4ls understand","Recommended Tasks:
- Add single-line and multi-line comments to a script.
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compare two objects using their attributes.
- Compute the factorial of a number using a loop.
- Connect to MySQL using mysql.connector and run a query.
- Create a Django model class with fields and explain what it represents in DB.
- Create a Python module and import it into another file.
- Create a class Car with attributes and a method to display info.
- Create a custom iterator that returns even numbers.
- Create a function that receives a list and prints the square of each number.
- Create a function with default and positional arguments.
- Create a list of 5 fruits and print each using a loop.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create an abstract class with an abstract method and subclass it.
- Create an array using the array module and perform basic operations.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create two unrelated classes with the same method names, and use them interchangeably.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Extend your loop to include all three: break, continue, and pass.
- Implement a linear search to find a number in a list.
- Install Anaconda and create a new environment.
- Install Django using pip and create your first project using django-admin startproject.
- Install NumPy and create a NumPy array from a list.
- Install Python and PyCharm, and run your first Python script that adds two numbers.
- Install Sublime Text and write a script to calculate the area of a rectangle.
- Instantiate objects of a class and call their methods.
- Launch Jupyter Notebook and run a simple Python cell.
- Make a dictionary storing student names and their scores. Print each pair.
- Practice positional, keyword, default, and variable-length arguments.
- Practice using Python IDLE. Run commands and explore how to clear the screen.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Push code to GitHub using Git in PyCharm.
- Repeat the swap task but with user input this time.
- Research and list 3 real-world projects you want to build after learning Python.
- Setup MySQL Workbench and connect to it via GUI.
- Simulate method overloading using default arguments; override a method in a child class.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use filter, map, and reduce to process a list of numbers.
- Use for-else to search for an item in a list. Print a message if not found.
- Use if __name__ == '__main__': to separate code from execution.
- Use lambda to double a number and to filter even numbers from a list.
- Use the help() function to explore any built-in Python function.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program that prints ""Hello, World!"" and your name.
- Write a Python program to print your name, age, and favorite color.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program that converts decimal to binary, octal, and hexadecimal.
- Write a program to print the Fibonacci series up to n terms.
- Write a program using multiple variables and perform operations on them.
- Write a script and observe behavior during runtime (interpreted)."
25-Python-Tutorial-for-Beginners-Prime-Number-in-Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\031-25-Python-Tutorial-for-Beginners-Prime-Number-in-Python.mp4," Welcome back aliens, my name is Evan Weddy and in this video we'll write a code to find a given number is prime or not. Now first of all just to give you a brief idea of prime, so prime number is a number which is divisible only by 1 and itself. So if you take an example of 10, so 10 has a factor which is 1, then we have 2, then we have 5, then then we have 10. So we don't want that, so 10 is not a prime number, so 7 is a prime number, 13 is a prime number, the 19 is a prime number. So how do you check a given number is prime or not? Now when you say you want to check up given number is a prime number or not, it's very simple right, so let's take a number here, so let's say 7 in this case. So what you will do is you will try to divide this number by 2 because all the numbers are divisible by 1, so let's start with 2. So we'll check if 7 can be divided by 2, if yes, then it's not a prime number. If it is not divisible, then we'll go for 3, then we'll go for 4, then we'll go for 5, then we'll go for 6. So we'll not check for 7 because again it is divisible, so we'll start from 2 and we'll end with minus 1. So example if you take a number which is 19, so you will end at 18, right, that's what you will do. So every time you have to check, if you find the number, if it is divisible, you can simply print not a prime number. If it is not divisible, we can print, it's a prime number. So how do you write a code? So let's take a number, so I will say number is equal to, let's start with a prime number itself, let's start with 7. And then let's run a loop. So we'll start a loop, we'll say I as a counter variable, so we'll say 4 I in, let's use a range here. Now this range will start from 2 because we'll start from 2 and then we have to end at 7, so we'll end at num. Or we have to end at 6, right, so of course when you range will not take the last value. Once we got a range here, let's check what the condition, so what is the condition? So condition would be if num mod i, okay, if it is division equal to equal to 0, that's how you check if the number is divisible or not, if it is equal equal to 0, in that case you will simply print not prime, that's it, right, so you will simply print not prime because it is divided. Else you will print, it's prime, oh, is it that simple? Of course not, right, this code will not work. So let's run this code and you can see it says prime, prime, prime, multiple times. Okay, so we just want to do it once, right, now if you remember in the last video when we talked about for else, so if you want to do it only once, what you can do is shove using this else for if we should be using it for for, right, so we'll say else for for and then after this print you will simply say break because once you know if the number is not prime, why you have to check for the many numbers? Example for 10, it is divisible by 2, right, so why you have to check for the numbers? So you will simply say break there and I guess this will work, so if you have this code you can see it says prime, so that's what you're doing, right, so what we are doing is we are checking from 2 to the second last number which is in this case we are saying num, so it will take num minus 1 and then every time you will check if the number is divisible by that number, if yes, it's not a prime number, if no, you will complete the entire loop and you will simply print prime, that's it. Now let's change this number, so I'm sure of having 7, let's take 10 here and with this, let's run this code and you can see it says not prime, that's right, 10 is not a prime number. So you can check a given number is prime or not, okay, so this works, but don't you think this is not a efficient code, we have some efficient way as well, so this is proper but we are checking from the second number to the last number, what if you check only half even that works, in fact, so if you go more efficient we can also check for this square root, not that is something you have to find, so just go to Google and search for how to find a prime number in an efficient way, so that's how you improve yourself in the algorithms as well, how can you think about efficiency, speed efficiency, space efficiency, all those things. So at this point we have only worked with prime number but you can make it efficient, so let me know your efficient code in the comments section, so that's it from this video where we have talked about how to check a given number is prime or not, so I hope you are enjoying this series, let me know in the comments section and do subscribe for further videos, bye bye.","divisible number, check numbers, prime say, 13 prime, start prime, prime just, prime let, 10 prime, check divisible, prime okay, says prime, search prime, prime divided, prime multiple, prime check","Recommended Tasks:
- Check if a number entered by the user is prime."
26-Array-in-Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\032-26-Array-in-Python.mp4," Welcome back to Aryan's, my name is David Reddy and let's continue the series on Python. In this video we're going to talk about arrays. Now we have worked with least, we have worked with tuple and now we know how those things work. So if you want to have a list of values with you, of course you can go with least or if you want to make it constant you can go for tuple. Now while added then, now in array we need to have all the values of same type. So we can have the same list with integer, float and string in one list but that's not the case with array. So arrays are similar to least but with one difference that you need to have all the values of same type. So if you say it's an int array, it should be of int array. If you say it is float array, all the values should be float. This one advantage here, arrays in Python, they don't have specific size, they don't have fixed size which means you can expand, you can shrink it, example, let's say if you have five values and if you think hey, we want 10. We can expand it and if you feel hey, we have 10 values but we need only four values now, we can shrink it. So it is quite flexible to work with and it offers you certain methods to work with example. If you want to add elements, you can use append. If you want to find a particular element, you can use certain methods. In fact, we have a method called as index using which you can get the index number of a particular value. Hold on, we'll do that in the practical video here. Now basically when you will be using array, so think about this. If you have a list of students and then in that, so every student will have a mark. So let's say we have one subject which is let's say Python itself, so it's a language and you have a subject in your college and of course everyone will be having a mark. So if you have 10 students in a class, you need to create 10 different variables like marks 1, marks 2, marks 3 or let's say if you have 100 students need to create 100 variables. Now, instead of doing that, we can create an array. Now, how do we do that? So in order to use array, we will be using array but then the problem is we will not be getting this array by default. So we need to import a module called as array to use this. So how will you do that? You will say import array. So this up to you. So you have to say import array and in this module array, we have a function called as array. So we have to say array.arrow. This is how you create an array. I know it's a lot of arrays there. So if you don't want to use this array every time, you can also use array. So you can say import array as arr. So instead of using array every time, you can say arr.arrow. This one way. So again, you can use array.arrow by importing array or you can say import array as arr, which is you are using alize here. And then you can say arr.arrow. Now, if you just want to avoid everything, you can simply use. We have done that before, right? So if you want to work with modules, if you want to import modules, you can say from array input. Now, you can specify the functions you want to work with or you can simply specify stars. So star means you want to work with all the functions, right? Now once you have this function array, now let's see how do you get an array. So I want to create array of let's, we'll not go for a mark here. Let's go for valves. Now valves is basically values, okay? So it's a short form for values. Now I want to create an array with the name of valves. So you have to say adding. Now we have to specify two things. The first thing you have to specify is the type. And the second time, second you have to mention is the values. Now why type? Because in array, all the values should be of same type, right? So if you say, hey, we have int array, you have to mention that it's an int array. If it is a float, adding you have to mention that. How will you do that? Okay, if you have to use some keywords, right? Example, we can say int float. But that is now how it works here. So you have to use a type code. Now what it means, every type will have a unique code, okay? Example for integer. In fact, in the integer as well, we have different types of integers. We have byte, we have long and we have int. When you work with different languages like C, C++, Java, we have these types there, right? We have byte, we have long, we have int. Same way in here, in Python, we also have int. Now depend upon, you know, the moment you change the type, it will change the size in the memory. Example, if you want to say, hey, I want a smaller integer, you can say byte because byte is small integer, it takes only one byte. The other one is normal int, which will take two bytes and then we have long integer, which will take four bytes. Now, what if you want to have float values? For that, we, it will take again four bytes. So it is F float, which will take four bytes. In fact, double as well. So we have double float, which is, which will give you more memory of eight bytes. What if you want to go for character? Now that you have to use you, which is unit code, right? And it takes two bytes, okay? Because unit code need two bytes to show data. Okay, that works. Now the question is, what if you want to have unsigned integer? Now what is unsigned and signed? So let's say if you are going for normal integer, it goes from a negative range to a positive range, right? What if you don't want to store a negative value? In that case, you will be going for a unsigned integer because it starts with zero and it ends at a particular value. So we will not be considering negative numbers here, right? And you can see the table we have all the types. So if you want to work with unsigned integer, you have to use capital I. If you want to use sign integer, which is long one, you can use small L, right? So you can have a stable and we'll be using that here. So I want to create an array of integers. And the way you can do that is by saying I, because you are using an integer array and you can give a comma and you have to mention a square bracket because that's how you represent arrays. Now in this square bracket, you can mention values. I will go for simple values here just to make it simple. So I will say five, nine, eight, four and two simple values. We got five values here. And once you've got this array, you can print it and how do we print it? It's very easy. You will say print and you'll print the values here. We'll say, well, now for this code, you can see we got an array. So simple, right? We can see it is printing array of type eight and then we got the values. Okay. Now let me just do us twist here. But if I put a different value example here instead of having eight, let me say eight point five. Now, you can see this is where problem starts. And if I don't this code, you can see we got an error. Error says integer argument expected got float. Can you see that here? So this is the problem we have, right? When you say I with these integers and if you're trying to put float that will not work. So of course, you have to go for integers. Can I have negative values? Of course, we can have because small I means side integer, which starts with negative value so it will work. Let me just show this code so it works. You can have negative values. But what if I say capital I, which means you cannot have negative values now? And how many of this code? You can see we got an error. It says cannot convert negative value to unsigned int, right? So this is important to remember. So when you create an array, you have to make sure that you specify a proper type code. Okay. Now, once we have done with that in array, as we are working with arrays now, we can use certain functions. For example, if I say values dot, so one of my favorite function is buffer info. Now, buffer info will give you the size of the array, right? So if I say, okay, we were supposed to change this I small I so that let me on the score and you can see we got something. Now, it is did something. So this is a tuple here with two things. The first one is the address. So this is the address of your array and the second parameter there is actually your size, which is five, right? If I change the number of elements here, if I remove two, of course, you will be getting four values now. So it will be four, right? So that's how you can work with buffer info. In fact, we have some other methods as well. I would say values dot, in fact, we also have type coder, which will plant the type of the code you are working with, which is in this case. So you can say this I, which is integer, this was the property here. Now, what if you want to add a value, you can use append, what if you want to remove a value, you can use remove, you can if you want to reverse the entire adder, you can do that here. Let's try. So if I say reverse and if I print the values and if I say f 10, because reverse doesn't return value, so if you want to work with reverse, you have to save valves dot reverse. And you can see first, you got the array, it was reverse the array, it will give you the value. So if I say shift f 10, you got the value, which is array and then two four. So you can see all the values got reversed. Now, the point is, what if I don't want to print all the values as it is, I want to print the values one by one. Is it possible? Of course, right? So if I say add it and when you say add it is similar to least, so we can use index numbers, right? Index numbers start with zero, right? So we can use index number to print one value. So I would say values of and I want to say zero. Now, let's say values of zero, it will print the first value, right? In this case, it is two. Okay? Why two, because we are reversing it, right? Because after reversing, two will come first. Let's remove that. And because I don't want to reverse now, let's let's say run and you can see we got five. If you change this value to let's say, let's say one, it will print nine. But I want to print all the values not just one or two values, right? In this case, we will be using a loop. Your favorite loop, you can work with while loop, you can work with for loop, your wish. Okay? Here, I will go for loop for loop because for loop makes sense when you know the range. So I will say for I, in, well, in, in fact, I will be using range. I will start with range with go till four or five because we have five values, right? So range will start with zero, it will end at four. And every time this loop runs, I have to say I, now there are two things that I'm missing in this loop. The first one is the colon, right? And the second thing is this print belongs to a four loop. So you have to give a tab a proper indentation, right? And now let's run this code and we got the value, which is five, nine, minus eight, four, and two. So it's so simple. So this is how you do print all these values here. So this is fun, right? So you can print all the values one by one. It might be how one more way. So if you don't, so what is happening here is the value of I is changing from zero to four. Every time you run this code, it will say values of zero, values of one, values of two. But what if you don't know this length of it because here we know it's five. You can see that, right? What if you don't know the length or if you want to make it more dynamic? In that case, you can say length of valves. So length of valves will give you the length and you can pass that length in range, right? So indirectly, you know, at one time, it will be range five, right? Because the size is five and it works. Now this is one other way of printing. All what you can do is instead of saying range, you can directly say valves. So I will say for E, even I works, but then I will say for E, in valve, and I can directly print the value of E. So for is very dynamic, you know, so sometimes you can use for with range, which will go for index values. All here, it will directly go for the values. So in valves, we have five, nine, minus eight, four, nine, two. So it will fetch the value one by one. So E will refer to five, then E will refer to nine, then E will refer to minus eight. So your choice, the way you want to work with it, is how many of it on this code, it still works. Okay, so this thing is working. Now can I work with characters because we have seen how to work with integers, how we can also use float here? Can I work with characters? Of course you can. So what you do is instead of saying I, you have to say you, which is unique code, you can say characters. And here instead of having numbers, we should be using characters. I will say single code, a single code, e, and then single code, i. So we have a, e, i, and then if I run this code, you can see we got the same values. So yes, you can work with unique codes as well. Okay, this thing works. Now what we'll do is I will just undo it and I will go back to integers because I want to do one small operation. Okay, so what I want is I want to create a new array, okay? I will do the same values. Well, I will just take positive values now. Five, nine, eight, four, two. I want to create a new array with the same values. Is it possible? Of course you can do it, right? You can say a new array here. I will say a new array and equal to, you can say the same thing. You can say array and then i, then comma, you can put the same values. But instead of doing that, what you can do is you can say, array, bracket. And in this bracket you can mention, hey, I don't know the type. See, when you know the type is i, you can do it here. And you know the values you can type it here. But sometimes you want to copy it, right? Maybe you're getting this value from somewhere else. In that case, you cannot simply type the values, right? So in that case, you can say, I don't know the type. Just take the type from values. Instead of saying, you're simply saying type code from value and then the values. Now I don't know the values. So you can say, now we have a different syntax here to understand this. So what we are saying is, hey, I don't know the values, but take the values from values. So take the values A. Now A will represent one value of time, A for A in VALS. So what will happen now is it will, so this for loop will take one, one value from VALS and it will assign to the array. So it will say, hey, I got five assigned. I got nine assigned. So that value which is getting up is coming into A and then it is getting assigned to the new array. Just to prove my point, I will, instead of printing the VALS, I'll print a new array here. And you can see we got the values. So the old array values are coming into new array. So syntax is, first of all, you have to mention, hey, I don't know the type of it. Get the type from the old array which is VALS. And then the second one we are mentioning here is the loop. So we are saying, hey, I don't know the values. What you can do is take one, one value from VALS. And you can do that with the algorithm. So you're saying for A in VALS and then it will fetch one value. We are sending it to the array. It works. And then you can do one more thing. Instead of assigning the same value, what if you want to assign this square of it? Example, I want to assign 25, 81 and so on. I want to assign this square of a number. In that case, you can simply say A into A. So you're simply creating a square of a number. Let's run this code and you can see we got values. We got 25, 81, 64, 64, and 4. So you're getting this square of a number. So it's so simple to do all this stuff in Python, you know? If you do want to do the same thing in other languages, you have to write multiple lines of code. And that's why we say in Python, you can do multiple things in less number of lines. Now what if you want to plan this values using VAL loop? Again, we have done with 4. So we know how it works. Can we use VAL loop here? Of course we can. You know, a lot of people have this confusion with 4 and VAL. You can use VAL loop here as well. Now, but the thing is for VAL loop, you have to use three steps. Right? You have to use initialization. You have to check for the condition and you have to do increment increment by yourself. So let's do that. So I will say I is equal to 0. We have to check for the conditions. I will say while I, less than length of new array, because I don't know the length of new array, cool. And then here you will say print the value print new array. And then we have to use index value. So we have to say new array I. And once you have printed, you have to do increment or decrement because here we have to use increment. So we say I plus equal to one. So thing is you can do it, but the only thing is you have to do it manually. And you can say it works. And I know in this case for loop makes more sense. Because you don't have to initialize, you don't have to increment decrement and you don't even have to check for the conditions. Right? But you can use VAL loop. So now that the more to add is, in fact, we have so many things to work with add is now. So in this video, we have talked about the basics of array. How can we create an array and how can you print the values and how can you create a different array from from the existing array. So that's it from this video. I hope you are enjoying this series. Let me know in the comments section. Do click on like button if you're enjoying it. Thank you so much for watching everyone. Bye bye.","lot arrays, int float, advantage arrays, array values, type array, arrays similar, array float, arrays use, basics array, integer array, array integers, float array, represent arrays, python int, arrays python","Recommended Tasks:
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a simple decorator that logs the execution time of a function.
- Create an array using the array module and perform basic operations.
- Create arrays using np.array, np.zeros, and np.arange.
- Create variables for name, age, and marks. Print them all with labels.
- Implement a linear search to find a number in a list.
- Install NumPy and create a NumPy array from a list.
- Practice positional, keyword, default, and variable-length arguments.
- Print the elements of a list using a for loop.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a script and observe behavior during runtime (interpreted)."
Array-values-from-User-in-Python-Search -Array.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\033-Array-values-from-User-in-Python-Search -Array.mp4," Welcome back, aliens, my name is Avind Reddy, and let's continue with the series on Python. But till this point, we have seen some basics on Python and we have talked about array as well. But we want to do one more example here. So the previous assignment was about taking the values from the user and that's where we're going to start, right? How can you create an array where the values will be coming from the user? Because when you say your values will be coming from the user, you don't know the size of the array. If you don't know the size of the array, how can you create the array? Right? So in this example, we'll do that. So we'll create an array, a blank array, and then we will ask a user to enter the values, and then the end will ask a user, hey, you want to search the element. And if a user says, okay, I want to search for the element, and then let's say, if I use a say, say, I want to search for number five and tell me the index value of it. We'll be doing that example here. What I'm going to do here is very simple. We want to take the, we want to create an array and we want to take the values from the user. So step one, we need to create an array. Right? So I would say, a, r, r is equal to, now this a, r, r, I want it to be a blank array. And the way you do that is by saying, array, and then of course, right, when you work with array, you need to use, you need to mention the type of the, type of the values, right? So you will say, I, and you will give a comma here. And then you have to mention the array values. But when, but then we want empty array, right? So we'll give a square back it. So this is how you create an empty array. Now we have one small issue. We are using array, but we have, we forgot to import the array module. So we'll say import, not input will say from array, import, I want to import everything so I will say stark, right? So I want all the classes, all the functions, all the variables will say stark. Now once you've got the array, I want to add the elements. So when you say you want to add the elements, you'll be asking users to enter value repeatedly, right? So when you say, we'll say, hey, user, enter next value, enter next value, enter next value. But how many times do you have to say that? So before asking for the values, we will ask for the length of the array. So we'll say, hey, user, how many values you need? So user says, hey, I want to insert five values, let's do that. So we'll say n. And in this, I want to ask for the length of the array. Okay, so user will enter the value. We have to, we have to use input function, but input will give you strings so we will convert that into integers. So we'll say int. And here we'll say input. And in this bracket, you have to mention the, you have to mention the message, right? So I would say enter the length of the array, right? Now once you've got the length, now the next step is I want to ask a user, hey, user, enter the value you want to insert. But then I want to do that repeatedly, right? So I have to, so if a user says, say I want to insert five values, I have to ask for the element five times. Now of course, when you say you want to do something repeatedly, you have to use a ford loop, right? Of course, while you will do here, but I will use a ford loop. And I will use a variable i, i in. Now when you say you want to go for five times the best ways to go for range and the range would be five, we'll give a colon and enter. Now every time this loop runs, I want to ask a user to enter the value and I will put that value in a variable x, right? So I would say x equal to the way you can ask a value is very simple. Again, the same thing. You need to use this function. I will just copy and paste it here. Now, instead of saying enter the length of the array, we will change the message. I will say enter the value, right? Or we can say enter the next value. This makes sense, right? So every time a user enters the value that will go into x and the same value x will go into array now. And the way you do that is by saying, arr. How do we add values in the array? So for that, we have a function called as append, right? So we'll use append here and every time you want to add the element just pass x and your job is done. So you look, it trades and you will put the element in the array. Now, how will you vary further? We'll go at the end and here we'll print the values of array. So we can diagram the printed, we can say print array. So this one way, you can diagram the array or you can use a for look, right? Your choice. I will just run this code. I hope it will work. Okay, let me just verify if I say shift f 10, you can say it is asking for the length. I would say, okay, I want to insert four values. Okay, now we just asking for the next value. So I would say this is 16. The next value is less than 20 and then we got 48. We got 21 and we got let's say 10. So this is, this is my four values, right? Or it is going five times, that's bad. We said four, right? Why it's going five times? Because I made a small mistake, you know, we ignore something. My bad. Instead of saying range five, I should have saying n, right? Because we are asking for the length. My bad. Okay, let's do that again. Asking for the length. I will say four. Enter the value of 16, 20, 14, 52. You can see I have entered four values. I want to say enter we got four values, right? So that's your array and you, that's how you can take it from the user. So every time a user enters a value, you just have to append it to the array. Okay, this works. Now what I want to do is I want to ask a user to enter a value and then we will search for the index. Example if a user says value of 14, then we need to print the index number of it, which is in this case two, right? Now there are two ways of doing this. One, manually and second by using some inbuilt functions. Now what do you think we should be going for manual first, right? So we'll do it manually first and then we'll see which function we can use to fetch it. So how will you do it manually? Now when you say you want to get the index number, what you have to do is let's say if a user says value 14. So you have to check, you need to compare. Is 14 is same as the first value of array. Every is same, you got the index number. If it is not same, shift. Check for the second value. Is it matching? No, then shift. I mean next one, which is 14 and 14 matching. Yes. So you got the answer, right? So every time you run to the loop, you have to increment the value, right? And that will be your index number. So what I'm saying is just take a fall look. In fact, first of all, we have to ask a user to enter a value, right? So we'll say we'll say a value value itself and we'll ask a user to enter the value. So I will use the same, I would say enter the value for search. Right? This is what we will be asking the user. But the moment the user enters a value that we're going to value now, we will ask a, we will run a loop, we'll say I in array, the moment you iterate this loop, you will check if I is equal to equal to the value which you have. Now, say this I is the value of this I is coming from a range, right? So the range would be 0, 1, 2, 3, 4. But this I here is not coming from the range. The value is coming from the array itself. I know we have the same names of say E, okay? In short, saying I will say E because these are represent, right? So I we can take it as an iterator or the counter variable and we will say E is an element, right? So value of E will be coming from the array itself, 1, 1 element. So we are comparing if this E is matching with the value, in case if it is matching, we will print the index number, right? So how do we know the index number here? That's a confusion, right? Now to maintain the index number, we will use a counter variable. We'll say K, the initial value of K would be 0, right? So K will start with 0 and every time this loop it trades, we will increment the value of K. So it's a K plus is equal to 1, right? So we are incrementing it. But what if it is matching? In that case, you will print the value of K. That's it. So if it is matching, we'll simply say break because we don't want to search ahead, right? If it is matching, that's it, that's the end. So we'll say break. Now I hope it will work. Let's verify. Okay, so what is happening once again is you are using a loop and the value of E will be coming from the array itself. Now if that is matching with the value which are inserted, we will print the index number, right? Which is K in this case and you will say break. Let's run this code and you can see it is asking for the length again. I will say 4 and I will enter the value which is 14 or 52 or 98, 36 and you can see we have entered 4 values and that's an array there. Now it is asking Q for the value which you want to search for. I want to search let's say 52. Now when does the enter you can say it says 1 because that's an index number for 52, right? So this is how you can work with it, right? It's very simple. You can write out what I would suggest to you is after watching this video, don't practice that, but directly by watching the video, after finishing watching the video, okay, you can pause it and try it by yourself. Don't look at the code because when you look at the code, you feel it's this simple, but when you try it by yourself, that's where the problem starts, right? So try it out. Let me know in the comment section how it is going. So that's how you insert the value in the array. That's how you search for it. Oh, we are missing one more thing, right? How will you use functions here? My bad. If you want to use function, you don't have to do anything like this. You simply say print and in this print, you will use an array which you will use array and you will say a method called as index and just pass the value which is well. You know, don't have to do anything else. You don't have to use this loop stuff. You can simply say, hey, we have an array. We have an array of five. Let's insert the values. Some big values this time. Okay. So you can see I've inserted these values and now it is asking you for the value which you want to search. I want to search for five 87, right, which is index number three. The moment I say enter, you can see we got three and three. So we got the first three because of the loop. We got second three because of this method because of this function. Now that's the advantage. You know, so when you work with Python, we got so many functions to work with and it saves your time. But knowing how to search manually will be helpful if you want to create your own algorithm in future. So that's it. I hope you enjoyed this video. Let me know in the comments section. If you have any more questions, make sure that you post those questions as well. Do like the video because that's what motivates me and if you have not subscribed to now, do subscribe it. So thank you so much for watching everyone. Bye bye.","length array, python, array course, series python, saying array, array use, array know, array create, size array, values array, array search, create array, array asking, array ask, basics python","Recommended Tasks:
- Add single-line and multi-line comments to a script.
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compare two objects using their attributes.
- Compute the factorial of a number using a loop.
- Connect to MySQL using mysql.connector and run a query.
- Create a Django model class with fields and explain what it represents in DB.
- Create a Python module and import it into another file.
- Create a class Car with attributes and a method to display info.
- Create a function that receives a list and prints the square of each number.
- Create a function with default and positional arguments.
- Create a list of 5 fruits and print each using a loop.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create an abstract class with an abstract method and subclass it.
- Create an array using the array module and perform basic operations.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create two unrelated classes with the same method names, and use them interchangeably.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Implement a linear search to find a number in a list.
- Install Anaconda and create a new environment.
- Install Django using pip and create your first project using django-admin startproject.
- Install NumPy and create a NumPy array from a list.
- Install Python and PyCharm, and run your first Python script that adds two numbers.
- Install Sublime Text and write a script to calculate the area of a rectangle.
- Instantiate objects of a class and call their methods.
- Launch Jupyter Notebook and run a simple Python cell.
- Make a dictionary storing student names and their scores. Print each pair.
- Practice positional, keyword, default, and variable-length arguments.
- Practice using Python IDLE. Run commands and explore how to clear the screen.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Push code to GitHub using Git in PyCharm.
- Repeat the swap task but with user input this time.
- Research and list 3 real-world projects you want to build after learning Python.
- Setup MySQL Workbench and connect to it via GUI.
- Simulate method overloading using default arguments; override a method in a child class.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use filter, map, and reduce to process a list of numbers.
- Use for-else to search for an item in a list. Print a message if not found.
- Use if __name__ == '__main__': to separate code from execution.
- Use lambda to double a number and to filter even numbers from a list.
- Use the help() function to explore any built-in Python function.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program that prints ""Hello, World!"" and your name.
- Write a Python program to print your name, age, and favorite color.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program that converts decimal to binary, octal, and hexadecimal.
- Write a program to print the Fibonacci series up to n terms.
- Write a program using multiple variables and perform operations on them.
- Write a script and observe behavior during runtime (interpreted)."
28-Why-Numpy-Installing-Numpy-in-Pycharm.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\034-28-Why-Numpy-Installing-Numpy-in-Pycharm.mp4," Welcome back, Arians, my name is Evan Weddy and let's continue with the series on Python. Till this point, we have worked on arrays and we are happy, you know, because we know how to work with array, we know how to insert values, we know how to fetch a value. But here's a thing. We talk about arrays, we have different types of arrays available. Example the first one is single dimensional array and second one is multi dimensional array. Now when you say single dimensional, it means you have a one row, right? So you have one row and multiple columns. Example the array which we are working with. So it has one row and multiple columns, right? You can see we have multiple columns there. But what if you want to work with multi dimensional array, which simply means you'll be having multiple rows and multiple columns? When I say multi dimensional, it can be 2D, which is 2 dimensional, it can be 3 dimensional, it can be 4 dimensional, right? So it can have multiple dimensions here. Now the way you can represent that is something in this way. So when you say single dimensional array, this is how it looks like. When you say multi dimensional, you can imagine this is 2D, which is 2 dimensional array. Or you can imagine 3D, which is you can imagine as a queue format, right? Now when you say 2 dimensional array, you can use it for using, let's say, metrics. So let's say if you have, if you are working on some scientific calculation, you have metrics there, you can use 2D array, right? So it is so useful, right? Working with multi dimensional array. So can we do it in Python? Of course, we can, right? So it's one of the best language. But here's the thing. If we talk about the array, which is available in Python for you, in that you cannot work with multi dimensional array, unfortunately, because even if we try for that example, if I create an array, so let me just remove this, this code is from here. Because I'm using, I'm using array here, right? And if I want to create an array, which is multi dimensional, I would say, A R R is equal to array. And the type of the array will say, I, and we want to assign multi dimensional, right? So the way you do that is by giving multiple square because if you say one square, that's one row. If you want to have multiple rows, you have to give two square bracket. In each square bracket, we'll have a value. So we'll say 1, 2, 3. And then we got another array, which is 2, 4, 5, 4. So we got two arrays here. So when you combine them, it becomes multi dimensional array, right? And if I try to print this array here, you can say this will not work. So you can see we got an error here. Okay, so how do we work with multi dimensional because in array, we don't have that. So the package which we are using here, which is array, does not support multi dimensional. And that's where we can use a third party package. And that is your NumPy. Some people say NumPy does matter. So we have a package called NumPy and we have to use that. So we can simply say NumPy, instead of fetching from array package, we will use a NumPy package. Okay, and in NumPy also we can get an array. But we are getting error here. You can see if I go back here, it says unresolved reference NumPy. Spelling mistake, no, it's perfect. What if I say by default, NumPy package is not available in Python. You have to install it manually. But before doing this, let me just go to IDLE. So this is my IDLE. And here I want to use that package. Let's try. So I would say import NumPy. And you can see we got an error. It says NumPy is not a model which is installed. So it says no model name NumPy. So we need to install it. How will you install this? So in Python, we got this amazing tool called as PIP. So you have to use PIP. In fact, PIP 3 here. PIP basically stands for, it's a recursive, it's a recursive full form, which is PIP install packages. Okay, so if you want to install any other packages, in fact, we have a lot of packages available. And if you want to install them, we have to use PIP. So I will go to my command prompt. And here I will say PIP 3, okay, the version 3. And you need to install NumPy. So you have to say install NumPy. Okay, that's a simple command and say enter. It will take some time. Okay, so wait for some time to install it. Okay, you can see it says NumPy successfully installed. Because I'm doing this for the second time, I already had a NumPy. I removed it so that I can type the code here. But then if you install NumPy for the first time, I guess it will also ask you for the agreement or confirmation. You can simply say yes there. And you can see in this system now, we have NumPy. I will just restart my ideal. And I will again type the same things. I will say import NumPy. And you can see there is no errors. That means we have NumPy in the system now. But then it is for it is for ideal, right? How about PYCharm? So if you want to work with PYCharm with NumPy, you need to install NumPy here as well. Because you can see we are still getting error here. So how do you install NumPy in your PYCharm? To do that, we need to use a shortcut for Windows which is Control Shift, Control Alt S, which is simply going into settings. So we'll say file settings. And here you need to make sure that you click on Project Test Project or Project and your Project Colony or Project Name. Click on Project Interpreter. Here you need to install NumPy, right? So what you will do is you will click on this plus symbol. And here you have to search for NumPy. So we got NumPy here, click on Install. It's so simple, right? It just said next, next, next, everything is done. So it is installing it, it will take some time. It also depends upon your internet speed, your system speed. So it will take some time. And you can see it is installed. Now click on Close. Okay, so you can see we got NumPy here. This one which is a latest version is 1.15. So that's great. We got a latest version. So NumPy is installed but it is not referring. Oh, it's working. You can see that you can see we got from NumPy import style. And I think it should work. But there's one change here. When you work with NumPy, first of all, let's work with normal array. Okay, it's not that when you have NumPy, you cannot work with single dimension array. We can, I will just remove this two dimension array here. Let's work with one dimension array. Just to verify this working. I will say shift F10, oh, we got an error. Because in NumPy, we just need to change the way it works. We don't have to actually mention the type here. Okay, it is optional. You can skip the type and you can see if you say F10, it works, right? So this is how you work with NumPy. Again, we'll use NumPy to work with single dimensional, multi dimensional and we'll do some operations as well. But at this point, now we know why we need NumPy, now we know how to install NumPy and now we know how to create a simple array using NumPy. And yes, you can still mention the type if you want to example, if you want to mention this is int, at the end, just give a comma and say int, okay? So we need to do that as well. I mean, we can do that as well. So let's run this code. Okay, so it still works. So that's how you use NumPy. So in the subsequent videos, it will work more on NumPy. So I hope you're enjoying this. Let me know in the comments section. Click on like button if you're enjoying it. Thanks for watching everyone. Bye bye.","series python, types arrays, dimensional dimensional, dimensional say, dimensional means, say dimensional, arrays, single dimension, numpy array, 2d array, dimensional use, single dimensional, dimensional multi, multiple dimensions, array python","Recommended Tasks:
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a 2D NumPy array and perform addition and multiplication.
- Create a function that receives a list and prints the square of each number.
- Create a list of 5 fruits and print each using a loop.
- Create a simple decorator that logs the execution time of a function.
- Create an array using the array module and perform basic operations.
- Create arrays using np.array, np.zeros, and np.arange.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Implement a linear search to find a number in a list.
- Install NumPy and create a NumPy array from a list.
- Practice positional, keyword, default, and variable-length arguments.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program to print the Fibonacci series up to n terms."
29-Python-Tutorial-for-Beginners-Ways-of-Creating-Arrays-in-Numpy.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\035-29-Python-Tutorial-for-Beginners-Ways-of-Creating-Arrays-in-Numpy.mp4," Welcome back, aliens, my name is Evan Reddy. And let's continue with the series on Python. Until this point, we have seen how do we work with arrays and then we realize if you want to work with multi-dimensional array or if you want to perform some scientific calculations with array, we have a special package called as NumPy. I knew you to install them so we can install on command prompt or we can install them in the IDE itself. So in this video, we'll see what are the different ways of creating an array in NumPy. So we'll start with it. Now basically we have six ways you can create an array. The first way is array itself, the function array. The second one is line space, then we have log space, arrange zeros once. So basically we have these six ways and we have seen the first way, right? But let's do it again. So what I will do here is I will create an array and before using an array, we have to import them. So we'll say import NumPy. In fact, from NumPy import start, that's how you import, right? Now once you've got this, once you have saved import, now let's create an array. So I will say ARR is equal to array and in this you need to mention the values you want to put. So I will say 1, 2, 3, 4, 5. So we got these five elements, right? Now if you remember, in normal array package, we need to specify the type as well, right? But here we don't need to do that. It's, I mean, we can specify the type, but then by default, it will guess the type of values you are entering and based on that, it will convert. And if I say I want to print the value, so you can simply print the value I would say print and here I will print a. So ARR, the array. The moment I run this code, you can see we got the output, which is very simple, 1, 2, 3, 4, 5. We can also check for the type of it. What type of values we are going for? So if I say d type and if I run this code, you can see it says int 32. So by default, it will check for the type of values you have since it is integer, it will say, okay, integer means I will take, so all the integers I will take into it. But what if I specify some weird value? So if I say 5.0, now what will happen? So if you look at this code, we have integers and we have flowed together. Now if you remember the concept of array, all the elements should be of same type. So now you guess what will happen? All the values will have the same value possible, right? So let's try. So if I run this code, you can see it is float. So what happens now is all the values here, they have been converted into float. Example, if I print the array here, so if I say print ARR and if I run this code, you can see all the values. Look at the values, it is 1.2.3.4.5. So every value here is converted into float. So that's the thing. Of course, all the values should be of same type, so we have to do conversion. Now since you are not doing it explicitly, that's where your implicit conversions comes to the picture. So your Python says, hey, I can see one float there. I will convert it into float format, all the values. Now, you can also specify the type of element you are working with. So you can give a comma and you can say, hey, this is end. So all the values I want to be end. So you can see we got into it too and then we got the values. What happens if you have the values which is end, but then you are saying float. If I run this code, you can see we got the output. There is no error, but we also got float 64 and look at the values. So when you say float, even if you insert integers, it will convert them into float. So these are you create an array in numpy. Now once we know this, so this is one way, right? This is one way of getting an array. The another way of getting an array is using a different function called as linsepace. So what I will do is I will type the same element. And in fact, let me just do that with the help of linsepace. I will not be using this d type anymore. So I will be using linsepace. So I would say linsepace. Again, this function is coming from numpy itself. So I would say linsepace. linsepace will take three parameters. So you can say it says start, stop and you have to also specify the step. Now, what it means? Example, if I say zero and if I give comma 16, now you can see I'm not specifying the third one, which is steps. So if I run this code with this, I will. So any guess what we'll get? OK, in fact, I will type the third element and then we'll try. So if I say 10, normally what happens in normal, if you remember, we have range in least, right? Or we can use range as well. Now, if you use range, we it also take three parameters. The first one is start, stop. Now, the stop and range is excluded. But in this case, this 16 here is included. And then this 10 is not this step here. This 10 is basically means the number of parts you want to go for. So if I say 16 here, so what it will do is it will take this value from 0 to 16, right? I will go for 0 to 15. So 0 to 15, the values, number of values is 16, right? So it will break those values. So it will break the range into 16 different parts, right? So if I run this code, you can see the, see the output. So you are getting the values from 0 to 15. Now you might be thinking why dot here, because all the values here, they are float. I float because you are breaking this range into parts, right? So this range is getting divided into 16 parts. And normally when you divide into parts, you might get a float value. Okay, this is awesome. So when you say 16 and this thing is perfectly works. But what if I go for 20 parts? So now this range, which is from 0 to 15, will be divided into 20 parts. So if I run this code, you can see you got 20 parts and you also got some float values, right? So this is how you use line space. Now what if I don't specify the third element, if I only say first and last one, in this case, it will create 50 parts because that is by default. So if we don't specify the parts, number of parts, it will be 50. And you can see we got 50 parts here. So that's line space. The next one we have is a range. Now it is not a range, it is a range, okay? So even I got confused when I was doing this for the first time. So this a range, you can say a range. Yeah. Now in this a range, the same as range. So in this case, you have to mention the first element. You have to mention the last element and then you have to also mention the steps. Okay. Now this is not, this is not the number of parts, these steps. So if I say to now in link space, it will create two parts, right? But here it will not get two parts. It is its steps. So it will print one, then it will skip to numbers and it will print three. Okay, let me just let me do that. So if I say run, you can see we got the values here, one, three, five, seven, nine, eleven and tenets. This is what you got. So again, as I mentioned, there are different ways of doing this, right? So this is one of the way. Another way of creating an array is using a concept called as log space. Now log space is different from link space. The difference is in log space. I mean, of course, link space and log space, you have this, you create parts, okay? You break down the range into number of parts. But in link space, the gap between two elements is fixed, right? Example, if you say, if you take any two elements, consecutive elements, the gap between those two elements will be same. But that's not the case with log space. In log space, if you mention data like one comma 40 comma, let's say five. Now the difference between the number of parts would be five. So the spacing between two numbers would be dependent upon the log of it, okay? So it will start from, so this will start from 10 rest to one. So 10 rest to one to 10 rest to 40 and it will get divided into five parts. Let me just do that. So if I said one, you can see we got 10 rest to one. The last number is 10 rest to 40 and all the numbers are in between. So if I print the first element here with the specific syntax, I don't want to print E here. I want to print in normal format with first, only the, after point, I want to just print two digits. So you can do that with the help of percentage. In single code, you have to say percentage dot 2 F again, a percentage. So from this code, you can see this is the first one. So zero is the first one, this 10 rest to one. And if I say the last one, which is five parts, right? So it will be four. And if I run this code, you can see the last one is now we have to count, okay? So it should be somewhere around 40. So this is how it works. This is how you use log space. So all the values, the difference between different values is of log. So look at the values. So those are differentiated with the help of log of the log value, okay? So that's about log space. So till this point, we have seen four functions, array, Lin space, arrange, and log space. Now we have two more. Now this two more are actually very efficient. The first one is zero and the second one is once. And you can, you can guess it, right? So if you want to create an array, let's say off, let's say, of size 10 and all the values by default should be zero. In that case, you will be using zeros as a function. So I will be using zeros. And in these zeros, we have to specify the size of it. Example, if I say five, it will create an array of size five with all the number of zeros, right? In other case, we can also use once. The difference is zeros will give you zeros, ones will give you one, right? It's so simple. But if you can see the output, we are getting one point, right? Which means you are getting float values. That's the same case with zero point, right? So when you say zeros, it will give you zero point. What if I want to mention, hey, I want to work with integer. In that case, you have to say five comma, int. Now you are mentioning, hey, I want to work with integers. So please give me integers. If I don't score, you can see we got all the ones, but in the integer format. So that's how you can create arrays using different functions, right? So we know it's very, it's awesome stuff. So that's how you create an array. So I hope you enjoyed this session. Let me know in the comment section and do click a like button if you're enjoying it. Thank you so much for watching everyone. Bye bye.","calculations array, numpy fact, arrays using, dimensional array, arrays realize, python, series python, arrays, create arrays, array import, numpy knew, coming numpy, called numpy, numpy import, import numpy","Recommended Tasks:
- Add single-line and multi-line comments to a script.
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compare two objects using their attributes.
- Compute the factorial of a number using a loop.
- Connect to MySQL using mysql.connector and run a query.
- Create a 2D NumPy array and perform addition and multiplication.
- Create a Django model class with fields and explain what it represents in DB.
- Create a Python module and import it into another file.
- Create a class Car with attributes and a method to display info.
- Create a function that receives a list and prints the square of each number.
- Create a function with default and positional arguments.
- Create a list of 5 fruits and print each using a loop.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create an abstract class with an abstract method and subclass it.
- Create an array using the array module and perform basic operations.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create two unrelated classes with the same method names, and use them interchangeably.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Implement a linear search to find a number in a list.
- Install Anaconda and create a new environment.
- Install Django using pip and create your first project using django-admin startproject.
- Install NumPy and create a NumPy array from a list.
- Install Python and PyCharm, and run your first Python script that adds two numbers.
- Install Sublime Text and write a script to calculate the area of a rectangle.
- Instantiate objects of a class and call their methods.
- Launch Jupyter Notebook and run a simple Python cell.
- Make a dictionary storing student names and their scores. Print each pair.
- Practice positional, keyword, default, and variable-length arguments.
- Practice using Python IDLE. Run commands and explore how to clear the screen.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Push code to GitHub using Git in PyCharm.
- Repeat the swap task but with user input this time.
- Research and list 3 real-world projects you want to build after learning Python.
- Setup MySQL Workbench and connect to it via GUI.
- Simulate method overloading using default arguments; override a method in a child class.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use filter, map, and reduce to process a list of numbers.
- Use for-else to search for an item in a list. Print a message if not found.
- Use if __name__ == '__main__': to separate code from execution.
- Use lambda to double a number and to filter even numbers from a list.
- Use the help() function to explore any built-in Python function.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program that prints ""Hello, World!"" and your name.
- Write a Python program to print your name, age, and favorite color.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program that converts decimal to binary, octal, and hexadecimal.
- Write a program to print the Fibonacci series up to n terms.
- Write a program using multiple variables and perform operations on them.
- Write a script and observe behavior during runtime (interpreted)."
30-Python-Tutorial-for-Beginners-Copying-an-Array-in-Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\036-30-Python-Tutorial-for-Beginners-Copying-an-Array-in-Python.mp4," Welcome back, aliens, my name is David Reddy and let's continue with the series on Python. Till this point, we have talked about arrays and numpy and we know how to create arrays in numpy using different methods, right? Now in this video, we'll do some more operations on array using numpy. Not just that, we'll also use a concept or we'll also work on a concept called a scoping and array. How can you create another array from the existing array? So before going for copying, let's do some operations here. The first one is, what if you have an array here? Let me just create an array for you. So let's imagine we have this small array here which has five values. What are those? I want to add this array with the value five. So whatever values you have here, example, we have one, two, three, four, five, right? So I want to add five to each element. Now there's one way you can do that if you want to do it manually. So you can use a loop, right? It's right the loop and just add the value five to each element, right? You can do it. In fact, that will be our assignment, okay? So just try it out. I will not be using any for no fear. What I'll be doing here is I'll be using a simple operation. So I will say arr is equal to arr plus plus five. That's it. The moment you do this, it will make sure that it will add the value five to each element. You don't trust me. Let's try it out. So I will say print arr. And that's one this code. I hope it will work. And can you see that regard values, which is six, seven, eight, nine, nine, ten, right? So we are adding five to each element. So it's so simple when you work with arrays here. In fact, not just this, you can create, you can add two different arrays. Let's say we have this one is one array now. I will, I will name this as array one and then we got another array and this one I will have different values, of course, I will say a six. So six, one, nine, three and two. So this is my values, right? What I will do is I want to add these two arrays. Is it possible? Of course, it should be right. I will say this is array three and this one is array one plus array two. So if you want to add two arrays, it is very simple. Just need to say array one plus array two. So what will happen is it will add the two, it will add two arrays, but with each element. So when you say one plus six will be seven, then two plus one will be three. Right? So it will give you that output. So let's run this. Let's see what happens. And you can see we got seven, three, twelve, seven and seven. So that's how you add all the values here. So it is so easy to add two arrays as well. Now this is also called as vectorized operation. Okay, so that's how you add two arrays. So what else we can do? If we talk about mathematics, right? So since numpy stands for num, right? We just numerical. So of course, you can perform certain mathematical operations, right? Example, we have trigonometry operations, which is sine, sine, cos and tan. Can you do it here? What if you want to find the sum of the array? Let's try. So imagine if we have the first array here. Let's see what the second array and with the first array, I want to perform some operations. So you can find the sign of the array. So you can say sine and you can simply pass an array there. And if you run this code, so that's how you can find a sign value for each element there. You can do the same thing for cos. Instead of having sine there, we can say cos and of course, you will get the value. How about finding a log of it? It's very simple. Just replace the function name, right? So you know, it provides you so many functions to work with. We have sine, we have cos, we have log. In fact, we can also find square root, but let me run this code first. And you can see we got the log values for the existing values here. How about square root? So I will say sqrt and just run this. And it works. You can see the square root of this numbers. For four, the square root is two. And you can see that we got the exact value here. For one, this square root is one itself. So and for other values, we got this square root as well. So here's this thing works. In fact, you can find the sum of an array. So you can simply say sum and the moment you run this code, you can see we got the addition of the entire array, which is 15 in this case. You can also find the min value. So you can say min and run this code. Okay, you can see one. One is the min value. You can also do max, which is the maximum, which is five. Right? So that's how you can find min value, max value. In fact, you can find the unique element. And you can also sort this array. Now, luckily, we have the array sorted here, but you can sort the array if the values are not in ascending order. Right? So you can do all those operations. We have a function like unic, we have a function called a sort. So I would request you to do all those stuff by yourself. Okay, so just write it out. The more you try, the more you learn. Right? In fact, if you want to concatenate two arrays, you can do that as well. Example, we were having this earlier added. Right? So let me just undo the operations here. So you can see we had these two array and I want to concatenate this to two arrays here, which is very simple. Just need to use a method or function called as concatenate. And here you have to pass two arrays, a comma, not a, a, r, r, one comma, a, r, r, two. That's it. You just need to use this function. And you can see we got the big array with all those values. Right? So that's how you can perform certain operations. So I'm doing all this stuff. Let's talk about the serious stuff. Right? The main topic of this video, which is how do you copy and array? It quite be very simple, right? So if you have an array here, let's say we have a, r, r, one. So let's say we have this array. And now I want to create another array. Okay? By copying this, it's very simple. Actually, you can simply say a, r, r, two is equal to a, r, r, one. Simple, right? And then if you print or if you print both of this numbers, I would say a, r, r, one. And I want to print the second array as well. Now what do you think? Will you get the, will you get the output? That's the first question, right? Will you get the same value? That's a different question. So first let's find out will it work? And yes, the answer is yes, it will work. What about the values? In fact, the values will also be same. So if you have this code, you can see we got the same values, right? So that perfectly works. But then what happens is, so what do you think? Will you really have two adders in your memory? Not exactly. Any memory you still have one add-in, okay? Now how do I know that? If I print the address, you know, remember we have worked with ID, ID before. If I try to print the address of a, r, r, one, and if I try to print the address of a, r, r, two, now look at the values. Okay, I'm not printing it, my bad. So I've added the print statements and let's run this code and you can see the, you can see the address there. Both the add-ins has the same ID, which means even if you have two different variables, we still have one array. That means both are pointing to the same array, right? Or same memory address. Now there's also called as a lysing because you are creating a new alliance for the same array, right? So you can modify the values using a, r, r, one, or you can modify the values with the help of a, r, r, two, right? Your choice. Okay, this is fun. Now what if you really want to create two different arrays? I don't want to have same array. I want to create different arrays. How would you do that? So I want to create one array, which will take different address, second array will take different address. The unsight simple. Instead of saying, ar, r, two is equal to ar, one, you will say ar, one dot view. Now view is a function which will help you to create a new array, okay? At a different location. Now how do I know this? Let's run this. Let's see what happens. So if I run this code, look at the address. Of course, you'll be having the same values because we are coughing it, right? But look at the value. Look at the address. The address is different. That means we have two different variables with two different address locations, right? Okay, this is fun. But there is one little problem here. The copy which we are doing here, in fact, when you talk about copy, we have two different types of copying, okay? One is shallow copy and second is deep copy. I know. Name is confusing, but let's get started. So when you say shallow copy, it simply means it will copy the elements, but then both the array are still dependent on each other. But what I mean by that is if I change the value of at least one element here, so before printing, of course, I will say ARR1, I want to change the second element. So I would say A of 1, the ARR1 of 1 is equal to let's say seven. So I'm changing that value six to seven. Now what do you think? What is the output? Of course, when you print ARR1, it will print two, seven, eight, right? And what about ARR2? Now, since we are not changing the value of ARR2, it should be two, six, eight, right? But unfortunately, since we are doing shallow copy, you can see the values are changing for both. It's not just changing for ARR1, it's changing for ARR2 as well. And that is something which we don't want. So this is shallow copy. Okay, now how do we achieve deep copy? Now when you say deep copy, it's simply means so there are two different arrays and they're not linked with each other in any way, right? So, instead of using a function called as view, we will be using a function called as copy. So copy will give you a deep copy, right? So if we look at the output now, of course, they got two different addresses as you can see here and look at the values as well. So the changes has been reflected only in the first and not the second adding, right? So that's how you basically copy an array. It's very simple. So basically, we have three ways. One, you can say ARR2 is equal to ARR1, your job is done, but that will be simply alizing because you still have one array. The second way is using view. In view, you use a shallow copy, right? And in deep copy, you just have to say dot copy and it will copy. So it will get two different arrays and two different values that are not linked with each other. So I hope you enjoyed this video. Now you know how to copy an array. In the next video, we'll talk about one of my favorite topics, which is my choices. So let me know in the comments section how much you're enjoying these videos and if you have any questions, let me know as well so that I can make a video clarifying those questions there and do click on like button if you're enjoying this. Thank you so much for watching everyone. Bye-bye. Bye-bye.","array create, numpy just, series python, array simply, arrays called, numpy stands, array existing, numpy, create array, arrays possible, existing array, add array, using numpy, numpy using, add arrays","Recommended Tasks:
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a 2D NumPy array and perform addition and multiplication.
- Create a function that receives a list and prints the square of each number.
- Create a list of 5 fruits and print each using a loop.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Implement a linear search to find a number in a list.
- Install NumPy and create a NumPy array from a list.
- Practice positional, keyword, default, and variable-length arguments.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program to print the Fibonacci series up to n terms."
31-Python-Tutorial-for-Beginners-Working-with-Matrix-in-Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\037-31-Python-Tutorial-for-Beginners-Working-with-Matrix-in-Python.mp4," Welcome back, aliens, my name is Evan Dreddy and let's continue with the series on Python. Till this point, we have talked about NumPy, right? But there is still one question. We have talked about NumPy 3 to 4 videos before and then the reason we started with NumPy is by talking about multi-dimensional array and till this point, we have not touched it. So that's the awesome thing about NumPy. Other than multi-dimensional array, we have so many features, right? But in this video, finally, we are talking about multi-dimensional array. Now what is multi-dimensional? So we have seen the theory, right? We have one dimensional, we have two dimensional, we can create three dimensional. Now with that, I want to perform certain operations, right? So in this video, we'll talk about two dimensional and what operations you can perform here. Okay, so let's create a two dimensional array. Okay, so we got an array and then since with the moment you say you want to create multi-dimensional array, you need to use this symbol, right? So this is one array. This is one big array which you have and inside this one big array, you want two different arrays and that's the idea, right? If you have one array with multiple elements, that's one array. If you have a big array, inside that array, you have array itself, that is multi-dimensional array, right? So this is one big array, right? And in this one big array, you have two more arrays. So you will say we have two more arrays and each array will have certain values. I would say 1, 2, 3, right? The second array will have 4, 5, 6. So what we have here is we have two dimensional array. Okay, now how do you know that this is two dimensional? So if you have an array and if you want to check, first of all, let's print the array as it is. I would say a or a one, run this code and you can see we got an array. So this is the output. So we got one big array inside that we have two arrays. Now there are certain functions you can apply here. The first function is called as d type. Now using d type, you can guess, you will know what type of data you are working with. So at this point, we are working with int. We have another keyword or the attribute you can say, which is n-dim. Now n-dim is dimension, which will give you the number of dimensions and you can see the output is two. So when you work with single-dimensional array, it will give you one. When you say three-dimensional array, it will give you three, right? So it will give you the number of dimensions you have. And plus it is also for the ranking. So it will rank. So it is one, the array is a 2D array or 3D array. Now we have one more which is called as shape. So I will say shape here. Now what shape will give you is, let's run this. So shape says 2,3. Now what it means? It will give you the number of rows and columns. So we have two rows and we have three columns. So it will give you two with the number of rows and number of columns. The other attribute we have is size. Now using size, it will tell you the size of the entire block and you can count it now. So we have three and three to be six. So that's one and you can see we got six. So there are multi-mangetals you can use. In fact, we have one function which is awesome. Example, if I have an array which is ARR2 and I want to create another, I want to create this array to with the help of array one, but this should be the, this should be one, the array. Okay, so how can you convert a 2D array into one, the array? It's very simple. You say ARR1 dot, there is a function called as flattened. So the moment you say a flat array, it will flat the array, right? So from two dimension, you will get one dimensional now. And I want to print of course the ARR2. And if you on this code, you can see we got one dimensional. That's where you can create from multi-dimensional to single dimensional. How about from single dimensional to multi-dimensional? Because now this is, so ARR2 is one dimensional, right? I want to create three dimensional. How can we do that? Now, first of all, to make it three dimensional, I want to have some more values. Of course, then it will work, right? That means I do again and nine. So we got six values here and let me take six values here as well. Because six plus six is two, when it is easy to create a three dimensional array when you have this number of values. So I will create the array three and this should be a three dimensional array. From one dimension, I want to create a three dimensional array. So you will say ARR2 dot, the function name is reshape. So you can convert a single dimensional array into three dimensional, three, three array. Okay, but then what you have to pass here? So when you say you want to create three dimensional array, you need to pass the number of, so let's try with two dimensional first and then we'll go for three dimensional. So I would say three here, I want to print three. Now you have to pass the number of rows and columns. So I would say I want three rows and the number of columns will be four, right? So we have three to four to 12. So we have three rows and four columns. If I don't this code, you can see from one, the array we got to the array. So we got three rows and we got four columns. Now, it is also a two D because in an array, so the outer array has single dimensional arrays, right? Now what if you have a big array in which you have two arrays? Okay, I know that's difficult to understand, but let's try it out. So I would say two comma two comma three. So two comma two comma three is 12, right? So two into two is four, four into three is 12. Now what it will do is it will create a 3D array, okay? Big 3D array and that 3D array will have two dimensional arrays. So it will be having two two dimensional array and each two dimensional array will have three values or two arrays with three values. Okay, let me show this code for you. So you can see this is what I was talking about. It will give you a 3D array and this 3D array will have two 2D arrays. So you can see this is one 2D array, this is two, second 2D array. And each 2D array will have two array itself, two 1Ds array, two 1D array. And then each 1D array will have three values. That's what you're saying. We got two, we got one big array which has two two dimensional array, which has two two two single dimensional array and then we have three values. Okay, so that's what you have to say and you got the output here. So here's this, this is some functions you can apply to performance and operations on 2D array. Now once we talked about 2D array and some operations, the main thing about mathematics, you know, we have a concept. When you talk about arrays in mathematics, we have a concept of metrices. I'm sure you have done that in your college, right? Now when you talk about metrices, what is metrices? You can imagine a two dimensional array, right? So we have multiple rows and multiple columns. Now we can have one row and multiple columns, right? We call them as row matrix, right? Or we can have a column matrix, which has multiple rows but single column. But ultimately, you can represent that with one D array, right? So even if you have one row, one column, you can say that's one D. What if you want to have 2D array or matrix format, you know, multiple rows, multiple columns? We can do that here, right? In fact, the earlier array, which we were working with, this one, this is a 2D array, right? So I will just remove all this stuff and I will put, I want to print one. And I don't want all this value here. Let's reduce it. We can have 2 rows and 4 columns. So if you want to score, this is your matrix, right? But then to actually work with metrics, there are some options we can perform. So you have to convert this 2D array into a matrix format. And the way you can do that is by saying metrics M is equal to, there is a function called as metrics. And in this metrics, you have to pass ARR1. So you pass a 2D array, it will give you a metrics format, let's run this code. And this is your metrics, sorry, not this one. Let me print M. So this is your metrics. I know the output looks similar, right? Output is almost same. What is difference is with this M, you can perform more operations, the operations which we do in matrices. Now, this is not the only way of creating a metrics example. If you don't have a 2 dimensional array, if you have a string with you, maybe you are taking input from the user. In that case, you will pass, you will say, hey, I got a value 1, I got a value 2, I got a value 3 and value 6. Now, how can I differentiate between two rows here? You just have to give a semicolon at the end. And then again, you have to say 4, 5, 6, 7. And even this works, if I done this code, so you can say, even this works. You don't need a separate array to save the value. You can simply run this code and you can say, it's still works. If you want to create multiple rows, I mean four rows and two columns, you can just give a semicolon after every two values. So this will convert it into four rows and two columns. We got four rows and two columns. So let me just do some modification here because we want to perform some operations here. I will say three rows and three columns. So you can see we got nine values. We have three rows and three columns. If I done this code, this is what you got. Now, there's a concept of diagonal elements. What if you want to have diagonal element here? I don't want to print all the entire metrics. I just want to print the diagonal, which is 147. Or you can do that with a function called as diagonal. Just say diagonal and pass M and you're good to go. You can see we got all the diagonal elements. So this is fun. So if you have metrics, you can perform these operations. In fact, not just this one. But what if I want to, let's try. So I will say M dot. So there is a function called as min. So you know the answer, right? So when you say min, it means the minimum element. So if I done this code, that is your one, of course. And if you say max, it will give you the max element. So the operation, which we do with add-in, can be done with metrics as well. But with matrices, you get this amazing power. Now, if you remember, if you have done with metrics before, if you have worked with metrics before, we have this concept of adding to matrices. That is very easy, right? You simply have to add the elements. The problem starts when you want to multiply to matrices. Now, if you're thinking, if you want to multiply to matrices, simply take the values from here, simply take the values from here, multiply. That's not the case. In multiple-sure matrices, you have to do some rows and column combinations, right? If you remember your matrices, if you have not done that before, I would suggest you to watch my video on how to multiply to matrices. So you'll find the link in description area. But what's that video if you have not done that? And if you know how it works, how will you do it programming? In fact, if you have done CC++ Java before, you know, we have to use multiple loops to make it work, right? So if I ask you to, hey, you need to multiply to matrices, go with C programming. You know, it will take entire one page. That's not the case with Python here. What Python says is, if you have to matrices, that's well-engrout. Let's create another matrix here. Let's call this m as m1. And regard this as m2. We can change the values, of course. I will say this is two. This is a, it doesn't matter. You can have the same matrix or different one. I want to multiply this. It's very simple. You create m3 equal to m1 into m2. Now, this is not a simple multiplication. Okay, first let's try with addition. If that works, and at the end, I will print m3. Okay, let's run this code and you can see it works. You are adding to matrices. It's straight forward, right? You can just see, you can just see the combinations there. But what do you find, say, multiplication? Now, this is not a normal multiplication, okay? So if you see the output, it's not normal multiplication. It's not one into one. It is not two into two. It is something different. So this is where you add, you multiply, I wrote with column combinations, right? Now, this is done automatically in matrices. And that's the, that's the amazing thing about Python. We have so many stuff available, right? So it's such a should do this manually also. So as a assignment, you can, you can do matrix multiplication, but manually. Now, how will you know the logic of it? So in the description area, there's all the video. In that, I have talked about the theory of it. How to multiply to matrices? Just look at that video and try to convert that into algorithm and try to convert that into a code in Python, okay? Not using the simple multiplication. So that's it. That's how you multiply matrices. Let me know in the comment section if you have any questions. And if you're enjoying this video, let me know in the comment section as well. Do like, button, if you're enjoying it. Thanks so much for watching everyone. Bye bye.","numpy videos, numpy talking, dimensional create, arrays 2d, thing numpy, dimensional single, create dimensional, array 3d, array dimension, 2d arrays, 3d array, dimensional operations, single dimensional, numpy multi, dimensional multi","Recommended Tasks:
- Build a calculator that performs +, -, *, /, and % based on user input.
- Create a 2D NumPy array and perform addition and multiplication.
- Create arrays using np.array, np.zeros, and np.arange.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Install NumPy and create a NumPy array from a list."
32-Python-Tutorial-for-Beginners-Functions-in-Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\038-32-Python-Tutorial-for-Beginners-Functions-in-Python.mp4," Welcome back, aliens, my name is Davan Reddy and let's continue with the series on Python. Until this point we have seen basic stuff right, we have talked about variables, we have seen arrays and then we have also talked about numpy. Now in this video we'll talk about functions, but why do we need functions? To understand this listing scenario, let's say you are working on a project and it might be a complex project or a simple project. Now when you have a complex project, what you will be doing is you will be breaking that project into smaller tasks. Right. Now when you talk about that small task, of course you will be writing multiple statements, right. So example, if you want to achieve, you want to perform a payment operation. Now in that payment, you will be writing multiple statements, right. Now all this statement you can keep it together so that you can reuse later. Example, let's say if you have the multiple places where you will be doing the payments. So of course, so you'll be using same set of lines in multiple places, right. So you can put them together. So you can imagine if you want to do any task. So make sure that all the statements of that one task stays together and it should also be reusable and that's where we will create functions. Now till this point, we have seen multiple functions, right. We have seen print, we have seen square root, right. We have used most of the inbuilt functions available in Python. Now can we create our own functions? Of course, right. That's the video is all about. How do we create our own function? It's not that difficult. What do we do is so that two steps involved here, the first step is you will be defining a function and second step is you will be calling a function. So let's go for the definition. So you have to remember this syntax for it. Syntax is you have to say, Dev, that's how do you define a function. And of course, you have to mention the function name as well. At this point, I will say, greet. That's a function name. And whenever you work with a function, you have to make sure that you put around back it here. So how do your Python knows that this greet is not a variable. It's a function. So you have to give around brackets there. Now, once you define a function, you have to give a colon because this function will have multiple statements, right. Example the same way we have done with for loop, if else, right. Because in if or in while you have, you might be having multiple statement in the same way, in this function definition, you may be having multiple statement. So you will say enter and this is where you will write your statements. I will say print. I want to print. Hello. And then I also want to print good morning. So then I want to create someone with this two things, which is hello and good morning. So what I'm doing is I'm putting those things in a function. Of course, you can do a lot of big things in functions. Okay. This is just an example. So this is just your first step towards function. So let's keep it simple. And later you can see what a function can do for you. So we got this function, right. Now, this is how you define a function. So step one is you have to say, Dev. And then you have to give a function name. Then you have to mention a colon in that function. You have to define the statements. So this thing which are together, they are called as sweet. Now once we got this, will it work? Let's run this code. Let's see what happens. The moment you run this code, you can see we got the output. But in output, we are not getting hello or no, we are not even getting good morning. What's wrong? So the thing is the function is ready for use. Okay. So we have defined the function. So this function will be called only when you are explicitly calling it. Of course, you have to call it, right. How do we call that? The way we call other functions, right, when we worked with print, when we worked with square root, we just have to call it, right. So you have to say, great bracket, right. So this is your function definition. So this is your function definition and this is your calling. So if it, if you don't call it, will not execute the function. So if we run this code and you can see we got the output. This is how you define a function, a beauty, right. Now, of course, as I mentioned, using function, you can do a lot of stuff, right. You can ask a function to do something for you. Or you can imagine in your project, your one function is your one helper. So let's say if you are building something big, you need some help, right. So you can say, hey, function, this is your job. Hey, other function, this is your job. And in the industry, the way we allocate project to every one or allocate the task to every person. In the same way, you can allocate your task to every function. Of course, you have to define the function as well. Now you can call this function multiple times. So let's say if you have a big project of 1000 lines and in that, this is the fifth statement. And after some statement, I want again, I want to greet. So I will say, great, you don't have to repeat those statements. You don't have to say hello, good morning, every time. Just define it once and you can call it multiple times, right. Let's run this code and you can see we got hello, good morning, two times. That's that is what we want, right. Okay, now let's do something different. Of course, really working with functions. What I want to do is I want to add two numbers. You know, the simplest example of functions, right. So let's go for addition of two numbers. How will you add two numbers? I want to say, hey, I want to add because till this point, we have seen multiple functions, right. We have seen square root, we have seen power. But then those functions are in build. And of course, we have to pass parameters as well. So when I say parameters, they variable the data which you want to perform. Example, when you say square root, in the bracket you mentioned for what value you want to square root of. So here as well, in this add, you have to pass a value. I will say, hey, I want to add four and five. I don't know the output. I just want to add these two numbers. But the question is, do we have this function available? Of course, not right. So we have to define one more function. Now this is a different function here. So we'll say, death. And we have to, so we have to mention a function name which is add. Now, this function will take two parameters. Okay, now this is important. Okay, remember this keyword called as parameters. Or you can say arguments. So normally we can call them as arguments. So we'll say, we have to pass two arguments here. One is x and y. So whatever value you're passing from here, which is you're saying add five comma four, you have to accept it somewhere. Right? So you have to say x, which will have five. You have y, which will have four. Then to give a colon, not so far. And here you can perform your operation. So I want to say, c is equal to x plus y. That's how you add two values, right? Or two numbers. And once you have done with the addition, you will simply print it. Now the advantage is next time when you want to add two numbers, you don't have to say, c equal to x plus y, you don't have to perform this operation. You just have to call this function called as add by passing the values it will add for you. Again, we are focusing on simple stuff. Normally, when you work on a project, you do complex tasks with one function. Let's run this code. Let's verify it is working. And you can see we got nine. So yes, it is working. Now you can see we have, we have not got hello. Good morning. We are not calling great. Right. So if you want that output as well, we need to call them. So important thing is you can create multiple functions and you can call them as many times as you want. So this is fun. Right. Now there is one more thing you can do. See as a function, you have two choice. One, when you, when you call a function, a function will do a task for you. So the function which is you are using here is simply printing it. Right. Then we have another type of functions, which will return you the value. But let's say I don't want to actually print it print the value. I just want this addition of to this two numbers. And then I want to save it in some value. I would say result example. When you worked with square root, remember when we worked with math module and then we had square root, the square root function was giving you something. Right. So your function can return a value as well. To understand the scenario, let me just take an example here. So let's say if you are watching this video and so let's say if your name is Rahul. So I will say, hey Rahul call Tina and say tomorrow I will be late for the session. So I'm not expecting anything in return, right. That's one scenario. The second scenario is I will say, hey Rahul, ask Tina what time we have a session tomorrow. So this is where the hour will as a function will return me something. So function can be of two types. A function will execute the task or a function will return you something. Right. So in this scenario, I'm expecting something. So we define a function which will return something. You have to do that. You have to send stuff printing it here because I don't want to print. I will say return and then you have to return C. So return is a key while which we use to return the value. So what you are doing is you are saying, hey add function, add these two values and give me the addition. Okay. So what the addition is, it will be assigned to this result. Now it is your choice if you are doing, if you want to print result, if you want to store you this result into database or you want to post this result on Facebook. I don't care what I care is I am giving you the value. I am not responsible to print it. I am not responsible to put that value on Facebook. I am responsible just to add those two values. You can do whatever you want. But then here I just want to print it because I don't want to write a code for Facebook here. So I will say result and let's run this code and you can see we got the output. So there's important a function can return a value of function. You can write a function which will not return a value. Okay. This makes sense. Right. Now time being just to make it clean. I will not be using this is a great thing. So these are we can define a function. What if I want to return two values because see we are passing two values right and we are returning only one value. What if I want to return two values but what do I just have to return. Let me just change this to have another name called as add and sub. So the function name itself is add sub and you can guess it now. This will provide you two things. The addition and subtraction as well. So let me take two variables here. One is C and one is D and D will take X minus Y. So in total we have two results here C and D. I want to return both. So I will say C comma D. So yes. So yes you can return two values. So you can call a function a function will accept two values or multiple values your choice and you can return multiple values. Okay. But there's one problem you can see we are getting error here. It says on result. So we'll say hey function name is not add it's add sub. Okay. Passing two values five and four that's perfect. But don't you think we are reading two values. So when you return two values you have to accept two values. So we'll say result one comma result two. So when you're returning two values you have to accept two values as well. And here you can print result one comma result two. So you can do that. That's one this code and you can see we got nine and we got one. So from one function you can return multiple values. Now trust me once you start working on projects. This thing is very, very important. Okay. So at this point just remember function is a block where you will have one task. So if you want to achieve one task just write a function for that. It's always a good practice to have a separate function for separate task. Right. So that you can you can call them again. In fact there's one advantage. You know in future if you feel that you want to modify something if you want to modify one code you will be changing only one function right. It will not affect other functions. You can test a particular function individually. So it's always better to create a function. Okay. So next time when you work on a project make sure that you create functions. So that's it from this video. I hope you enjoyed this video. Let me know in the comments section if you have any questions and do click like button if you're enjoying it. Thanks for watching everyone. Bye.","project function, function definition, python, function types, example functions, function individually, tasks function, functions times, working functions, python create, function choice, multiple functions, functions build, functions understand, create functions","Recommended Tasks:
- Add single-line and multi-line comments to a script.
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compare two objects using their attributes.
- Compute the factorial of a number using a loop.
- Connect to MySQL using mysql.connector and run a query.
- Create a Django model class with fields and explain what it represents in DB.
- Create a Python module and import it into another file.
- Create a class Car with attributes and a method to display info.
- Create a function that receives a list and prints the square of each number.
- Create a function with default and positional arguments.
- Create a list of 5 fruits and print each using a loop.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create an abstract class with an abstract method and subclass it.
- Create an array using the array module and perform basic operations.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create two unrelated classes with the same method names, and use them interchangeably.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Implement a linear search to find a number in a list.
- Install Anaconda and create a new environment.
- Install Django using pip and create your first project using django-admin startproject.
- Install NumPy and create a NumPy array from a list.
- Install Python and PyCharm, and run your first Python script that adds two numbers.
- Install Sublime Text and write a script to calculate the area of a rectangle.
- Instantiate objects of a class and call their methods.
- Launch Jupyter Notebook and run a simple Python cell.
- Make a dictionary storing student names and their scores. Print each pair.
- Practice positional, keyword, default, and variable-length arguments.
- Practice using Python IDLE. Run commands and explore how to clear the screen.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Push code to GitHub using Git in PyCharm.
- Repeat the swap task but with user input this time.
- Research and list 3 real-world projects you want to build after learning Python.
- Setup MySQL Workbench and connect to it via GUI.
- Simulate method overloading using default arguments; override a method in a child class.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use filter, map, and reduce to process a list of numbers.
- Use for-else to search for an item in a list. Print a message if not found.
- Use if __name__ == '__main__': to separate code from execution.
- Use lambda to double a number and to filter even numbers from a list.
- Use the help() function to explore any built-in Python function.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program that prints ""Hello, World!"" and your name.
- Write a Python program to print your name, age, and favorite color.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program that converts decimal to binary, octal, and hexadecimal.
- Write a program to print the Fibonacci series up to n terms.
- Write a program using multiple variables and perform operations on them.
- Write a script and observe behavior during runtime (interpreted)."
33-Python-Tutorial-for-Beginners-Function-Arguments-in-Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\039-33-Python-Tutorial-for-Beginners-Function-Arguments-in-Python.mp4," Welcome back, aliens, my name is Ivan Reti and let's continue with the series on Python. Till this point we have talked about functions, and we know now how to create functions. Now, again, when you want to, when you have a big project and if you want to break down your project into smaller tasks, each task can be represented with the help of function. And those things are reusable. That's why we define in that one particular block, right? When you want to use a concept of modularity, we use a concept again of functions and then we get modules. And we will talk about them later in detail. Important point here is, we talk about functions, of course, we call them, right? So again, in this example, let's, we'll focus on two things. The first one is, how to pass a parameters to a function? And what happens with the variable when you pass it to a function, if you modify the value, what will happen? Again, we'll see that. And then we'll also see different types of parameters we can pass, or you can say, arguments we can pass, right? So let's get started. Now, let me define a simple function here. I will set deaf, and you can go with any function name, doesn't matter. I will say, update. Okay, you can say modify or any function name doesn't matter, right? So we have a update function. Now, this update function will take a value from a user, and let's say the value is in a variable called as x. I love this variable name x. So we have a function which is update, and we are passing a variable x. Inside this update, I will be saying x equal to 8. Now, you tell me if I update the value, and if I print it here, of course, will it get updated? Whatever value you pass, let's try it. What I'm talking about is, if I call this function update by passing a value 10. So initially, the value of x is 10, but then later we are saying, hey, I don't want to use the value 10. I want to change the value to 8, and then I want to print it. So will it print at 8 or will it print 10? So think about it. Of course, value should print 8 because we are updating a value, right? So let's run this code. And here we go. We got the output as 8. So it works. That's great. So we are getting the update value. What will happen to the value? Example, if I create a variable here outside of it outside this, if I say there is a variable called as a, and the value for this a is 10, and I'm not passing 10, I'm passing a. So basically, I'm passing the value of a. So we are passing 10, right? The value of a is going to x now. Let's run this code. This works. Now, let me print the value of a. So what do you think? What will happen now? Of course, the value of x. So this print will print 8, of course. What about this print? Will this print 8 or 10? That's a question. Because here, we are printing the value of x. Let me just specify that explicitly there. So here, we are printing the value of x, and here, we are printing the value of a. So this is what we are doing. So let's run this code again. So what do you think? Will it update the value for a as well? And if you run this code, you can see a is still 10. So even if you are updating the value for x, it is not affecting a. So we have a concept called as pass by reference and pass by value. So if you have learned other languages like C, C++, or we have this concept there, right? Pass by value and pass by reference. So what happens in Python? Is it called by value or called by reference? Let me just give you a thing. What is called by value is now? When you say you are calling a function by passing a variable value, it will be passed as a value. Notice a variable example here. When I say update a, I am not passing a and passing 10. That's important, right? I am passing the value of 10. Okay, I am not talking about Python here. I am talking about the general concept of pass by value and pass by reference. So if you say it's a pass by value, it simply means you are passing a value, not the address. But in pass by reference, you are passing the address itself. Now, why it's so important? Example, if you pass a value. Now, whatever happens with that value, this A is not concerned about it, right? Because the moment you pass a value, it will create, it will use a different memory, right? So when you say pass by value, it will say if you pass 10, or if you pass the value of A, the X will take, X will get a different memory, okay? Different memory of 10. So even if you update that 10, it will not affect A. That's the difference pass by value. The next concept is pass by reference. Now, what is pass by reference is you are passing the address, which means you are not passing 10. You are passing the address of A, which means the moment you change the value for X, it will affect the value of A, okay? That is called by reference or pass by reference. What happens in Python? What if I say in Python, we don't have any of this concept. We don't have pass by value, we don't have pass by reference. So, patterns with different here. Now, before changing the value, what are we all doing? Before changing this value, in fact, we have talked about this before. Everything in Python is object, right? Everything is object here. So, if I pass a value here, example, if I'm passing A, and before passing, before calling update, let me print the ID for A. It should print some ID, and let me print the ID of X as well. Now, if there are two different variables, if there are two different variables, we'll be having two different IDs, right? Of course, there are two different variables, but if they are taking two different memories, they will be having two different IDs, where that means on this code, and you can see before updating, we have the same memory. That means, when you pass a value, they are still referring to the same object, okay? A and X refers to the same object. So, of course, this is not pass by value. Is it called by reference or pass by reference? Not exactly, because in pass by reference, when you change the value, it will affect the original value as well. So, this is none of them, okay? The moment you change the value of X, and if I print the ID of X in this case, okay, let me just print on this. So, you can see, we are updating the value. So, we got a new ID. So, the moment you change the value, it will give you a new ID. In fact, we have talked about this in a video called as mode on variables, right? So, we have talked about this before. So, remember this point, when you pass a value to, when you call a function by passing a value, they will share the same ID, the value, which is the variable data, which has been passed and the variable you are accessing it here. But then, the moment you change the value, it will change the address. Okay? Normally, if you are going for interviews, they might ask you this concept, you know? So, in Python, what is, what, in Python, what we use? Is it called pass by reference or pass value? So, I'm saying this none of this. We don't use any of them here. The reason when you change this value, it will create a new memory is because integers string they are immutable, right? What if you use something which is mutable here? Example, instead of having this a, let's imagine this is least. And in this least, we have written values. Let's say we have 10 and we have 20 and we have 30. Now, in this case, when you have these three values, and if you are passing this least, okay, let me just print the ID as well. And I want to update the least, not the normal variable here. And I want to print the least as it is. And here as well, I will change the name of it. It doesn't matter if you change, if you use the same variable, okay, it works. Even if you use the same variable name. And if I say LST, let me change a value for LST, I will not change all the values I will change to one value. I want to change the index number one. I want to make it 25. So, it should be 10, 25 and 30. That's what I want. Now, I'm changing the least, right? Will it change the ID? That's a question. Let's print the LST here as well. And let's run this code. And you can see we got the updated value here. That's perfect. And it is also updating the original list, is it? Yeah, it is updating the original list as well. Because the ID is same, right? Because since we have the same ID here, it will not change. So, it is mutable, right? That's the idea behind LST here. So, we have talked about something amazing, right? So, that's about this video. In the next video, we'll talk about different kinds of arguments we can use in Python. So, I hope you are enjoying this series. Let me know in the comments section. And, do you like what if you're enjoying it? Thanks so much for watching everyone. Bye-bye!","python talking, functions course, talked python, python called, use python, create functions, python object, concept functions, python use, modules talk, function things, modules, modularity, concept modularity, modularity use","Recommended Tasks:
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Connect to MySQL using mysql.connector and run a query.
- Create a function with default and positional arguments.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create variables for name, age, and marks. Print them all with labels.
- Implement a linear search to find a number in a list.
- Practice positional, keyword, default, and variable-length arguments.
- Print the elements of a list using a for loop.
- Research and list 3 real-world projects you want to build after learning Python.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use lambda to double a number and to filter even numbers from a list.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program to print your name, age, and favorite color.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero."
34-Python-Tutorial-for-Beginners-Types-of-Arguments-Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\040-34-Python-Tutorial-for-Beginners-Types-of-Arguments-Python.mp4, Welcome back aliens my name is Devon Dreddy and let's continue with the series on Python. Now till this point we have talked about functions right and now we know how to pass parameters as well but when we talk about parameters all you can call them as arguments we have different types of arguments we can work with. Of course arguments are arguments at the end but then we can we can use in different way. So what I'm talking about here is let's say I want to add two numbers. A very simple example I would just want to add two numbers here so what I will do is I will say dev I will get a method name as some or the function name as some and here I will mention two variables of course right when you want to add two numbers we need to ask for two values right and we can give them name as a and b so in a we'll be having the first number in b we'll be having second number right and in order to find that we have to put a corner at the end and you will say c equal to a plus b. Now you have a choice here you want to add when you want to print the value here itself all you want to return but that's not the main concern for this video so time when I will simply print it what is important here is when you call this function which is add you have to pass to values you cannot simply say add right of course you have to pass values so when you are accepting an arguments here you need to pass the argument as well otherwise it will give you error right you can see so when you press the control button and if hold it it says we have to pass two parameters right now in that case if I pass 5 and 6 so we are passing two values right now these are all this arguments so the things which are accepting here that there are arguments I want this is an argument now this a here so this a b here they are called as a formal argument so we have two names here we have formal arguments and we have actual arguments so when you define it it is this formal and when you pass the value when you are calling a thing which is called as actual argument because you are actually passing something right so this actually itself the actual arguments has four types it is position keyword default and variable length arguments so let's start with the first one I guess not that difficult it's just with the different names okay so when you pass a value example if I want to pass 5 for this a of course it is position right in fact just for this example we will take a different name okay we will take a different method name I will say if the function name is person and instead of so when we talk about a person we that two things are very important here the first one is name and second one is 8 so we want these two parameters and of course you have to pass them as well so if I change this let me change all the values here so I define the function which is person it takes two arguments one is name and age and from so I am calling that I am calling person by passing name and age so name is Navin and age 28 28 so if on this code you can see we got the value it is working perfectly right now how do we know that this Navin is going in name and 28 is going in the age so that's where positions comes into picture if you have 10 variables and if you want to make sure that it is the values are assigned to the particular variable we have to take care of the position you cannot simply exchange the position okay so positions are very important here so when you are only depending on the positions then of course we have to go for we have to maintain a sequence but what if I don't know the sequence so let's say I have defined that this function somewhere else okay I don't have the access to this function what I know is there is a person function which takes two parameters name and age but I am not sure about the sequence in that case example if I forgot the sequence here and instead of having instead of passing Navin Navin first time passing 28 and then I am passing Navin this is very problem starts you know because we are passing a number first and then we are passing a string of course in this case it will work it will not give you any error of course you will get the output in a different format the the area of passing but let's say if you are performing some operations on age I want to print I want to print the age minus five that's what we all do right so whatever age is we always say minus five with that and if I understand this code you can see this is where problem starts because you cannot simply subtract a number by a name because so Navin is getting passed in age right that's where the problem is I don't know do that I don't want to assign the value 28 to name and Navin to age in that case if we don't know the sequence you can simply say hey age equal to 28 and name equal to Navin so in this case we are using keyboards right so when you say keyword it means you are mentioning the variable name itself so variable is age which is 28 and variable is name which is Navin in this case it will work okay you can see we got Navin and 28 so this is the keyword arguments the next argument is default now what it means example I want to pass a name and I don't want to pass an age because by default like let's say if you want to open an account in social network website like Facebook maybe there's a criteria that you should be 18 to join a Facebook profile now in this case if I if I pass a age that's well and good if I'm passing an age which is 28 that's well and good what if I don't pass the age since that case what I want is by default the age should be 18 so if I'm not passing the age which means it should be 18 but in this case if I don't this code it will give you error because you are expecting two variables and we are passing only one this is wrong right so in this case what you can do is you can mention hey age don't feel bad while calling a function if you are not getting the value don't worry just assign the default value it is completely fine just run this code and it works okay so if you are not passing a value it will take the default value but what if I pass a value in that case it will override the existing default value so you can see in this time it was 28 that's default so once you have talked about default keyword and position we let's go with very important function arguments which is variable length arguments now what that means to understand this variable length argument concept I will change the function again let's get back to some because it will make much more sense there of course you can take different example but then let me let me make some there or we can say add function but let's say some some takes two parameters a comma b and here I just want to add those two values I will say c equal to a plus b and it's I just want to add them now I want to pass five comma six and of course I missed one thing I want to print this sum which is c okay now will this work let's verify say if I say shift f 10 it works you can see we got 11 so when you say you want to add two numbers right see we don't always add two numbers maybe sometime we want to add three numbers maybe you want to add five numbers because in capital we can do that right we can say two plus three and then you also say plus four plus five plus six plus ten plus hundred we can do that how can I pass multiple values here so maybe as a user you want to say hey I'm not sure how many values I want to add maybe I will pass two more values you should be able to do that okay so as a developer it's your responsibility right if you're defining a function make sure your function accepts multiple values then what you will say hey we will create multiple functions you know we create multiple function with different parameters or different arguments we can do that but the thing is don't you think it will be very very very lengthy process so that's where we have a variable length argument consa what it means is you can define a function where the number of arguments are not fixed so in this case you can say hey at least we have one parameter right at least we'll be having one argument of course if you want to add two numbers we will be having at least two arguments so the first one is confirmed the second one length is not confirmed so in this B I might accept one variable or one value or multiple values in that case you will say star B star B means it can have multiple values so this five will be assigned to this A and this six 34 and 78 will be assigned to B okay in as a tuple now let's run this code let's verify okay we got an error the error is see there is no error by while calling it the error is with the help of int and tuple right so we cannot simply add an integer and a tuple because A is integer and B is tuple okay now do we add this value that's a question right so first of all before before adding this values whatever those I will print the value of A just to verify what is happening and I want to print the value of B just to verify let's run this code and you can see we got five and we got a tuple which is six 34 and 78 so it perfectly makes sense right now how will you add this value of course the first value is fixed so what we can do is we can say C is equal to A initially C will have the value of A and then we'll fetch one one value from the tuple and we'll add a C right that's the plan so I will take four I in my B which is tuple and in this case I will say C is equal to C plus I right that's how you create so every time you loop runs it will add the new value to C and at the end we'll print the value of C that's what that's the complete idea let's run this code and that out we got an error okay that was an indentation problem you know so I was I have given one extra space and you can see it works we got one 23 that is what we wanted right so this works great in fact we can do some customization here what if I say I will simply mention B star okay so it doesn't matter how many value you pass why do we even need a rail right so if our pass four values everything will be there in B so in that case initially you will say C equal to zero that's the only change you have to make and everything works the way it is right so because you're not passing A so we are not using A so let's remove A right so that's it that's how we use a variable length argument so in fact it's not just integers you can pass integers string or flow together that's fine you can try it out and let me know the let me know your question in the comment section so that's it we have talked about different types of arguments in this video we have talked about default position keyword and variable and arguments so I hope you enjoyed this section let me know in the comments section thank you so much for watching bye bye,"takes parameters, function add, takes arguments, add integer, passing number, passing values, series python, having arguments, arguments arguments, add function, adding values, function arguments, parameters arguments, add numbers, python","Recommended Tasks:
- Add single-line and multi-line comments to a script.
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compare two objects using their attributes.
- Compute the factorial of a number using a loop.
- Connect to MySQL using mysql.connector and run a query.
- Create a Django model class with fields and explain what it represents in DB.
- Create a Python module and import it into another file.
- Create a class Car with attributes and a method to display info.
- Create a function that receives a list and prints the square of each number.
- Create a function with default and positional arguments.
- Create a list of 5 fruits and print each using a loop.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple Django form that takes two numbers and displays their sum.
- Create a simple decorator that logs the execution time of a function.
- Create an abstract class with an abstract method and subclass it.
- Create an array using the array module and perform basic operations.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create two unrelated classes with the same method names, and use them interchangeably.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Implement a linear search to find a number in a list.
- Install Anaconda and create a new environment.
- Install Django using pip and create your first project using django-admin startproject.
- Install NumPy and create a NumPy array from a list.
- Install Python and PyCharm, and run your first Python script that adds two numbers.
- Install Sublime Text and write a script to calculate the area of a rectangle.
- Instantiate objects of a class and call their methods.
- Launch Jupyter Notebook and run a simple Python cell.
- Make a dictionary storing student names and their scores. Print each pair.
- Practice positional, keyword, default, and variable-length arguments.
- Practice using Python IDLE. Run commands and explore how to clear the screen.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Push code to GitHub using Git in PyCharm.
- Repeat the swap task but with user input this time.
- Research and list 3 real-world projects you want to build after learning Python.
- Setup MySQL Workbench and connect to it via GUI.
- Simulate method overloading using default arguments; override a method in a child class.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use filter, map, and reduce to process a list of numbers.
- Use for-else to search for an item in a list. Print a message if not found.
- Use if __name__ == '__main__': to separate code from execution.
- Use lambda to double a number and to filter even numbers from a list.
- Use the help() function to explore any built-in Python function.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program that prints ""Hello, World!"" and your name.
- Write a Python program to print your name, age, and favorite color.
- Write a function that accepts any number of keyword arguments and prints them.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program that converts decimal to binary, octal, and hexadecimal.
- Write a program to print the Fibonacci series up to n terms.
- Write a program using multiple variables and perform operations on them.
- Write a script and observe behavior during runtime (interpreted)."
35-Python-Tutorial-for-Beginners-Keyworded-Variable-Length-Arguments-in-Python-kwargs.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\041-35-Python-Tutorial-for-Beginners-Keyworded-Variable-Length-Arguments-in-Python-kwargs.mp4," Welcome back to Arian's, my name is Ivan Reddy and let's continue with the series on Python. Until this point, we have talked about functions and now we know how to pass parameters or arguments to the function, right? And we have talked about different types of arguments we can pass like we have keyword, we have position and default. And then we have talked about very important topic which is variable length argument, right? So, let's continue with that and we just need to complete one small topic in that. So, what I will do is I will simply create a function here which will take some data from the user, okay? Now, it will be a person data as we did last time. So, it will, so these are function, the function is person and it takes some parameters, okay? That's not too big. And the parameters which I want to pass is something like this, okay? So, what I will be doing with those parameters are the different thing, okay? Here, the important thing is I have a person function, I want to pass some arguments, okay? When I say parameters, arguments, you can imagine they are same. Okay, so we have person here and then a person want to send different data, example, a person want to send the name, so I will say Navin. And then I want to pass my age, I want to pass, let's say the city of which I live in, so I will say Mumbai. And then I will also mention my phone number. Let's say that is 9, 7, 6, 5, 4. So, we have a phone number here. So, we have a name, we have age and we have city and a number. Now, we talk about a function person. And of course, the most important thing is name here, right? So, every person's name doesn't matter if you want to reveal your age or you want to reveal your city, you live in or maybe your mobile number, but name is something which should be all reveal. Now, here, I may want to accept one parameter, so we will say, hey, I will say, okay, name is something I will get for sure. So, name is something I will get for sure. But I'm not sure about the other parameters which are user will be sending, maybe a user will send age or city or number, I'm not sure. Now, in this case, of course, we have seen this, we have to accept a variable length argument, right? So, in this case, you will say star and you will say data, right? So, you will say the data. But there is one problem here. The problem is, even if we try to work with that data, let's say I want to print all the data here. Now, anywhere this data is tupled, right? So, if you want to print all data, you will be using a for loop. Before that, what I will do is I will just print the name first. I will print a name here. And then I also want to print the data. So, I will say print data. Now, of course, this data will be printed and it will be printed in tuple format. So, I will say run this code and you can see we got data, we got name and we got data as well. That perfectly works, okay? But the problem is, if I want to print this individually and I don't even know what the user is sending, what is 28? Is it the phone number or the age? What is Mumbai? Is it maybe the state? So, we have to convey our message in a proper way. Maybe Mumbai is a workplace or a home place. You never know, right? So, in that case, so we also is a concept. It's a called as keyword variable arguments. Now, the difference is in variable arguments, you pass a number of parameters, right? But you have to also mention the keyword, okay? Example, I will say, hey, this 28 is my age. This Mumbai is the city which I live in. This is my mobile number. So, I am also sending a keyword there, right? Now, if you want to work something like this, because if I done this code, you are getting an error here. It's got an unexpected keyword argument age because when you say start, it will not accept a keyword argument and that's where you will say start. So, when you say double start, it means you are passing multiple arguments, but with the help of keywords. And the moment you run this code now, and you can see it works. We got data. Yay, okay? So, it's so simple, right? So, if you want to pass multiple data and that to with the help of keyword, then we have to use keyword variable length argument. Make sense, right? In fact, here we can also use a for load to print the key and a value pair, you know? So, we can say for and we have two things, right? We have a key and a value. So, I will say, so we have to say for IcomaJ in and then you have to fetch from data, right? In fact, in normal books or projects, we normally write KW, which is keyword arguments, but that's fine. You can use any name here, it doesn't matter. So, here you will say for IcomaJ in data, so you cannot simply say data, you have to say items, right? So, you have to use a function called as items and then you will print one data, you will print I and then so you will say, so you will simply print IcomaJ, you will print the key and a value pair, right? So, let's run this code and that's what you got. So, you got, I mean you got H28, you got Sadim Mumbai, you got mobile number, right? So, that's it from this video. I hope you're enjoying this video. Let me know in the comments section and do subscribe for other videos. Thanks for watching everyone. Bye bye.","function person, parameters okay, function data, parameters want, keyword arguments, takes parameters, person function, arguments, say parameters, parameters user, variable arguments, multiple arguments, arguments pass, pass parameters, arguments function","Recommended Tasks:
- Create a function that receives a list and prints the square of each number.
- Practice positional, keyword, default, and variable-length arguments.
- Simulate method overloading using default arguments; override a method in a child class.
- Use lambda to double a number and to filter even numbers from a list.
- Write a function that accepts any number of keyword arguments and prints them."
36-Python-Tutorial-for-Beginners-Global-Keyword-in-Python-Global-vs-Local-Variable.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\042-36-Python-Tutorial-for-Beginners-Global-Keyword-in-Python-Global-vs-Local-Variable.mp4," Welcome back to areas, my name is Avon Vendee and let's continue with the series on Python. Now we have talked about variables and we have talked about functions right. Now when it comes to functions and variables, of course we will be creating variables inside a function and normally we can create variables outside the functions as well. That's where a concept comes into picture called a scope. Now what is scope here? So let's say you have a normal variable right. So let's say I will take a variable called as a because we all love this later. We have a variable called as a and the value for this a is let's say 10 okay very simple. And then I want to create a function. So I will say a func of course I want to print this a as well. So I will print I will print the value of a here. So of course when you run this code it will be 10 right. They will not they are not doing anything else. So we got 10. But let's say if I define a function in between okay. And this function name is let's say something because we don't care what the function name is. So we got a function name for something and then this something function. I'm creating another variable. I will I'm saying the variable name is again a that's weird. So we have a variable again a and then I'm printing the value of a here. So you can see we have two variables now is it possible to create two variables in the same code. Yes, if they have different scope example here. This a the a outside the function this it is called as a global variable. And the a inside the function is called as a local variable. So it is local right local to the function which also means you cannot use this variable outside. Example if I create a variable here which is B. And if I say B is eight and then if I try to use this variable outside here if I say print B. So you it will not work you know because we don't have a B variable. You can see we are getting an error which is unresolved reference. Now of course we have B but it is inside a function right. So the scope of that variable is inside the function. But what about this a again this is a local variable. So the scope of that a is inside the function and scope of this a is everywhere right. So you can access this a from every and even the file. Okay, that's perfect. Even if you have 10 functions you can use that a. So now the question is if I if I done this code what do you think the output would be. In fact I will print here function at least we will know from where you're getting the output right. So here I will say outside. Okay, so we have in function and then we have outside. Okay, so you tell me what we have the output. So this in function able print 15 or 10 or this one will print 10 or 15. Now first of all we are not calling something right. Of course something will not be called then. So we have to call something as well. So now let's run this code and let's see what happens. The moment you run this code right saying shift f 10 you can see we got the output which is in function 10 15 and outside 10. Which means the local variable inside the function the preference. Okay, that's important. The preference will be always given to the local variable right. So that's right we got in function a. So this a is a local variable and that's why you got 15 right now what about outside of this. This will print 10 because this is what you're accessing here right. You cannot access the local variable outside the function. Okay, that's perfect. But what if what if I don't have a variable here. So in this case if you don't have a variable inside the function can I use this global variable inside a function directly. You can see there is no other as of now but let's if I done this code or it works. So you can see we are able to get that here that's perfect. So we can access a global variable inside the functions as well. It's so simple right even if you have 10 functions you can access that variable anywhere. But here is the rest. What if after let me change the value of it I will say the value of it is 15 now. So I'm changing the variable a to 15 but is it a local variable or the global variable now because I'm changing it right. That's what the problem starts because still this point we were thinking that's a local variable. But I want to change the value of a global variable now. Every time you say a 15 it will create a new variable and you can see the outside the global variable is still 10. Okay now how do I change it. So if you want to specify hey this a which we are using here is not a local variable. It is a global variable in that case you have to mention explicitly global a. So this is the this is where you're specifying to Python. Hey Python my intention here is to use a global variable not a local one. Okay, that's why I'm saying global a and I've done this code. Here you go you can see that the outside the global variable also is 15 now because the change is not on the local one because we don't have a local variable here. Okay, we don't have a local variable here. This is a global variable simple right. So this is how we refer to a local variable and a global variable. So if you want to use a global variable you need to use a key word call as global. Okay, of course you can access it but the moment you reassign the value it will create a local variable. We don't want that right and that's why say global. So this works but there's a problem here. If you say global a which means in this function we have a variable now and if you want to create another a variable you cannot do that example. Once I go ahead and if I say a equal to nine now I want this a to be local variable can we do that can we have a global a and local in the same function. It's not possible because the moment you say a now it will treat that a as a global variable. So that's a problem now. So we want to achieve we want to use a concept of global and local in the same function. So in that case of course this is not a good idea so we will not use this. We will create a local variable which is a equal to nine so we want that. Okay, let's not change it. So the idea here is we want a local variable a but we also want to change the global variable a. How can we do that? So that's where we have a special function called as global. So using global we can access the local variable address. So the global variable address. So what we can do is we can say X or see if we just want to get the access to that a right the global one. So you will say X equal to there's a function called as global and now this global will give you all the global variables. Not just one because you might have multiple variables right you will say you have b equal to nine you got c equal to nine. So you might be having different multiple variables in that case. So when you say global is it written all the global variables but we only want one right. So in that case you need to specify hey I want a global variable with a name a. So we are trying to get the access of that a. Okay now if you want me to prove it let me just do that. So let's not so let's also print the IDs of the variables. So I will say print the ID of a and also print the ID of X. So if they are same if they are pointing the same address that means our job is done right. So let's verify see look at the IDs now so both the IDs are same that means this X is also referring to the same value which is 10. Okay that's important and now we can change the value. So if you want to change the value don't change the value of X because the moment you change the value of X it will create a new variable called as X. So we have seen that before right if you change the value of X it will just create a new memory. In that case what you will do is you will say if you really want to change the value. So you will say globals of a sure of getting a different variable simply say globals of a is equal to 15. So now what you're doing is you're changing your global variable. Okay that's important. So if you want to change the global variable a without affecting the local variable that's where you will use globals a and you can see the global variable now is 15. And you can see that we got in function 9 which is the value of local variable a and we got outside 15 which is the global variable value. Okay that's fun. So this is how we use global and local in the same function. In fact if you can also print the value of X which will give you the initial value of a which is 10. So that works. This is how we use global and globals in Python. To click on that thumbs up button it does motivate me and thanks for watching everyone. Bye bye.","variable use, variable called, scope right, global variables, global variable, define function, different scope, variable global, scope let, scope inside, function variable, functions concept, functions variables, called scope, scope scope","Recommended Tasks:
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate instance, class, and static variables.
- Demonstrate use of a global variable inside a function.
- Import a file and observe how __name__ behaves differently.
- Use if __name__ == '__main__': to separate code from execution.
- Use lambda to double a number and to filter even numbers from a list."
37-Python-Tutorial-for-Beginners-Pass-List-to-a-Function-in-Python.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\043-37-Python-Tutorial-for-Beginners-Pass-List-to-a-Function-in-Python.mp4," Welcome back, aliens, my name is Darwin Dreddy and let's continue with the series on Python. Now, tell us point we have talked about functions and in that function we are passing some arguments right. So, we try different type of arguments we have tried positions default right. Now, can we pass a list of elements? Is it possible? Because see, we were passing one or two elements of we were using the variable length argument. Can I pass a list? So, we'll try a simple example here just to make you understand how can you pass a list and then we'll try to return multiple values not just one a function can return multiple values right. We have tried that we have done that. So, we will get a function which will take multiple values or which will take a list and it will return multiple values as well. So, if I pass a list in that list you will be having multiple values you just need to return the number of even numbers and odd numbers right. So, we have to return two values the number of even numbers and number of odd numbers. So, the problem statement is if a user gives you a list of elements you need to pass that list in a function that function will return you the number of even and odd numbers and then you have to return two values right. So, let's do it. So, what I want is I want to create a function which will return me two values one is even number and odd number. I mean, number of even numbers and number of odd numbers in the list and the function name is let's say count and this count will take a list right and we don't have a list here. So, let's get a list. Service a list is equal to again you can take this input from the user. So, you can try that as assignment. You have to take this list as as a user input. So, let's take the input from the user. Okay. So, now we got some values okay. I don't know how many even numbers and odd numbers are there let me just count it here. So, we got one, two, three, four, five, six. I guess we have six even numbers and then we have one, two, three odd numbers. I guess let's count it with a code okay. And that's why we created software right because we are very bad with calculation. So, here I will just pass the list and it will count. So, we don't have this function count here. So, let's define it. Service a define a count and this will take a list of course and let's define it. Let's create something. So, I will take two values here. One is even which will count the even numbers initial value of even 0 and we'll say odd numbers initial value of odd will be 0. Okay. Now, once I've got this two variables, the next thing we have to do is we have to use a four look right because we need to increment the values. Service a for I in LSD and every time you get an even number or odd number, you just need to increment even odd right. So, in this case you will use a condition if else right. So, you will say if I mod 2 is equal to 0, that means it's an even number. If it is true, then you will say even plus equal to 1 that's simple right. And then in the else part, you will say odd right. So, odd plus equal to 1. So, every time you get the even number, you will increment the value of even every time you get an odd number, you will say increment the value of odd. Now, once you have done that, you will simply add two values now. One is even and one is odd. So, there is no compulsion that your variable should be same as the global. So, you can see here we are using even here we are using even. So, there is no compulsion that you have to it should be same. You can say E O that's fine completely fine. Now, once you got these two variables here, let's print even and also print odd. Okay. And let's run this code and it works. You can see we got six even numbers and we got three odd numbers. You can actually count it. Okay. Or you can also print this in a proper format. I know I'm not a back big friend of format, but let's try. So, I will say even and then I will give I will give a colon. I want to print even colon value and then odd colon value. So, here I want to replace this with the actual values right. So, the curly back is should be replaced with the actual value. And that's where we use a string which is a string which is even number and then odd. We have to use dot. So, in the string we have this option of function. So, we have to say dot format because this format is a function belongs to string. And we have to pass two parameters here. The first one is even value and odd value because we have to replace two formats. Right. This one and the next value brackets. And let's run this and we got it. We got even six and odd three. So, that's what in this we have we have talked about. You can try different examples here. You can check how many three have assignment here. The assignment is take 10 names from the user and then bound and display the number of users who has lent more than five letters. Okay. So, that's the assignment. So, that's it. See you in the next video. I hope you enjoyed this video. Let me know in the comments section. And do subscribe for other videos. Bye bye.","list equal, list count, values list, pass parameters, list right, let list, function passing, series python, assignment list, argument pass, passing elements, list elements, function multiple, passing arguments, list return","Recommended Tasks:
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a function that receives a list and prints the square of each number.
- Create a list of 5 fruits and print each using a loop.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Implement a linear search to find a number in a list.
- Install NumPy and create a NumPy array from a list.
- Practice positional, keyword, default, and variable-length arguments.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a function that accepts any number of keyword arguments and prints them.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program to print the Fibonacci series up to n terms."
38-Python-Tutorial-for-Beginners-Fibonacci-Sequence.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\044-38-Python-Tutorial-for-Beginners-Fibonacci-Sequence.mp4," Welcome back aliens my name is Avindreddy and in this video we will try to plant Fibonacci series in Python. But what is Fibonacci series? Now the number which you can see here this is a Fibonacci series but can you find a pattern here? Of course, if you want to plant something in programming there should be some pattern. So you can pause the video, guess the pattern and then I will let you know what is the exact pattern here. So if you see the first number second number which is 0 and 1. Now if you add them you will get 1 which is at next number. Then the second number and third number which is 1, 1 will make it 2 and that's the fourth number. Then we have 1 and 2 if you add them you will get 3. So that's what you have to do. You have to add 2 numbers so to get the next number. So basically you have to add the second last number and the last number to get the next number. And that's how you can build a Fibonacci series. Of course there is a use of this in mathematical world in the real world of course but here we are not concerned about that logic, we are concerned about how can you plant this one in Python. So let's do it. Now of course first of all you want to plant. So just to make it simple what I will do is I will call a function name as Fib and in this Fib I want to specify so you know you can also mention till what point you want it. I mean how many numbers you want? Top five Fibonacci all first 10 first 15. So at this point let's go first five. Let's blend them. Now unfortunately we don't have this function in build so we have to build this function by ourselves. And the way you can build functions in Python is very simple you said dev. Let's mention the function name as Fib itself. We'll give a bracket here and we have to accept that number and let's accept that in N because that makes sense right. Okay let's define this function. So what you want to do here. Now if you can see the code we first we want to print zero. So let's do that quickly. So let's print zero and then let's print one. So we are printing zero and then we are printing one. That's what we want right and after that we can print one two three four. But at this point let's run this code. Now if you can see on the right-hand side we also have a console where you can see the output. So let's run this code and you can see we got zero one. So that step is done. Now if you are thinking I will be printing one then two then three then five. We can do that but then how many numbers I can do that? Maybe I can do it for 50 top five. I'm in first 50 first 100. It should be automated right. It should be done by computer. And that's where you want to repeat this step. So I do want to add and you have to repeat and in programming if you want to repeat something we have seen how to do that. That's right you can use a loop here. So what I will do is instead of having that in zero and one directly we can use two variables I can say A will hold zero and B will hold one and here instead of having zero one we can print A and we can print B. Is that simple? But now I also want to print the next number right. So after printing zero one I want to print next next number and that too it should be repeated and to repeat something we use a loop right and famous one we all love which is for loop. So let's use four here we'll say four I that's the counter we normally use for I in and we have to use a range now. So I will say range now since I'm printing the first two numbers so we don't have to start the range from zero let's start the range from two because the first and second is done. So let's start with two and then I want to go till end right because that's how many numbers we want to print. In fact you know you should be going with three because first and second number is printed we have to go from three but unfortunately when you say any here and simply means so if you say 10 it will it will take nine. So if you start from two you know instead of three you can actually go from nine it will be around 10 numbers. Okay now once you got that loop you want to print the next number it's actually very simple you can simply print the next number by saying A plus B. Don't you think about job is done here if you're on this code you will get the output it's one of the easiest let's try first. Oh okay it's not working because something went wrong here. You can see the moment you say A plus B we got one but we are not getting the next number because every time you add you will simply add a zero and one you don't want that. So what you'll do is initially when you say zero one that is A and B for the next iteration what if you shift this numbers what if you shift A and B. Now what will happen is the new A and B will be one one once you add them then again you have to shift so it will be new A and B would be one and two that's what we want right. Okay so how do we do that and for that we have to use the third variable right which is C in this case. So let's use C and we'll say C is equal to A plus B initially that's what we want and then once we add the value of A and B which it didn't see let's swap okay so how do we swap so we'll say A is equal to B and then we'll say B is equal to C so that's how you shift. Now once you got shifted we got new values for A and B we can simply okay let's print C. In the next iteration you will add the new values and that will go in C and then this will be continued. I hope this will work now so let's run this code and yes it worked so you can see we got first five Fibonacci numbers. Okay let me just reduce the number of lines here we don't want extra spaces so this is awesome right in fact you can ask for this value of five from the user so you can say hey user entire numbers or whatever number is entered by the user you can pass it here and then you can pass the same number in the Fibonacci in the Fib function and it will do the calculation for you. Okay but we have a twist here what if someone says hey I want the first number that's it. In this case also you can see we got two values we wanted one but we got two values so in this case also we can apply some if conditions so you can say if you know before printing A and B you can say if if the number is equal to equal to one in this case only print A so we'll print A right so this part the next part should be done in the else and then we can give a tab here so that's what you can do so if your number is one you can print only one and you can see this works you will get only zero if you say you want to it of course it will print two so you can see we got zero one and whatever number you provide so if you provide ten it will give you a first ten Fibonacci numbers right in fact let me just expand this so that you can see all the numbers okay so you can see we got first ten Fibonacci numbers in fact you can do it for a hundred or whatever number you want in fact you can also do one more so what if someone says the value is minus three now in this case if you are saying you don't want to do that it should be invalid right so you can see you're still getting two we don't want that so this is your assignment if anyone enters any number below zero you should check that first if the number is negative and then only you should be doing all the other processing so that will be assignment if you complete that in the comments section do that mention your answer that's what you can do okay that's how you do Fibonacci in Python okay so we have some more modification here so what we are asking from the user is the total number of Fibonacci number you want to see but what if you don't ask for the total numbers you want to ask for the number hundred let's say if I say hundred now you will get first hundred Fibonacci numbers we don't want that what we want is I want to print the last number which should be less than hundred so next this time second assignment for you is if I say hundred it is not the number of Fibonacci numbers we want we want the last number should be less than hundred so that means it should end at 89 that will be assignment so that's about Fibonacci in Python if you have any questions let me in the comments section and do subscribe for for the videos bye bye","series pattern, pattern number, series python, plant fibonacci, assignment fibonacci, got fibonacci, say fibonacci, fibonacci 10, okay fibonacci, fibonacci fib, fibonacci series, build fibonacci, fibonacci numbers, python fibonacci, fibonacci python","Recommended Tasks:
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a function that receives a list and prints the square of each number.
- Create a list of 5 fruits and print each using a loop.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Implement a linear search to find a number in a list.
- Install NumPy and create a NumPy array from a list.
- Practice positional, keyword, default, and variable-length arguments.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program to print the Fibonacci series up to n terms."
39-Python-Tutorial-for-Beginners-Factorial.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\045-39-Python-Tutorial-for-Beginners-Factorial.mp4," Welcome back, aliens, my name is Avon Reddy and let's continue with the series on Python. Now in this video we'll try an example where we'll try to find a factor number. Notice factorial. So if I give you a number of 5, you have to say 5 into 4 into 3 into 2 into 1. Or you can say 1 into 2 into 3 into 4 into 5. So ultimately, the answer will be same. So if I say factorial of 5, this is the value. If you say factorial of 4, this is the value. So I want to execute this in a programming because a user can give you any big value. So you have to find a factorial of it. Normally if you want to achieve this, of course you have to start with 1 and you have to end till the number. Or you can go in reverse order as well, but let's go in ascending order. So what I will do is I will say, hey user, I mean a user will give you any value, you can actually take the input from the user. But time been, let me assign a value. I would say the value is 5 here and I want to call a function which will give me a result and I will call the function as fact. Again, you can do this without functions as well. But since we are working with function, it's a good practice to do it in that way. Right? I will use a function called as fact in which I will pass x. See, I don't know what this function will do at this point, but then I'm saying, hey, I want a fact function which will give me a fact, total of a number. But unfortunately, we have not defined that yet. So we will do that. But I want to also print the value of result. That's the main job we have here. But of course, we don't have this fact function. So it's defined it. The way you define that is by saying, deaf, and you have to mention the fact, the function name which is fact, and you have to pass a variable or you accept a variable which will say x. Again, there is no compulsion that you have to use the same variable. In fact, we'll use a variable name as n, okay? We'll give a colon. And here, how do I find the factorial here? So if you see the example here, when you say the factor of 5, you have to go from 1 to 5, right? So of course, we will be using a loop. So we'll say for i in. Now we want to start from 1 and we have to go till 5, right? And that's where we will use range. Now in range, if you specify only 5, then it will start with 0. It will end at 4. And that's a issue. I want to start from 1 and we have to end at 5. In that case, I will start with 1, not with 0. And I have to end at n, right? So we have to say n plus 1. Because if I only say n, it will stop at 4. We want to stop at 5, right? We'll give a colon. And this is where you will do the calculation. But after every calculation, we have to see. Ultimately, we have to say 1, 8 to 1, okay? Because we want the initial value. And then the result will be multiplied by 2. That result we multiply by 3. That result we multiply by 4, right? That's what we want to achieve. So in this case, I will take a variable call as f equal to 1. Initially, the value of f is 1. And every time this loop runs, you have to say f is equal to f into i, right? So if the i value is 1, then f into 1 will be 1. If the value of f is 1, right? If the value of i is 2, then the value of f is 1, right? 1 into 2 is 2. And then the value of f now is 2. Then you have to say, the value of i will become 3. So you have to say 2 into 3, right? So that's how it goes. And ultimately, you have to return the value of f. That's simple, right? So if I run this code, you can see we got the factorial as 1, 20. Now if I change the value to 4, the factorial of 4 is 24, let me just verify. And that works, right? Now you can also use, you can also do step by step here. Example, if I want to see how it works, I will start with this point. That's the execution point. And I will say run and debug. Let's do step by step here. So for the step, for the step where we have f, let's do that. So I will say f rate and you can see the value of x is 4. And then we are calling the fact function. And fact function is giving me 4, right? We can also do that here. We can apply a break point here. Let's do that. So when you say f, you can see the value of f is 1. And it goes into i. The value of i is 1. The value of f is also 1. It will multiply the value of f becomes 1 now. And then when you go back, i becomes 2. The value of f changes to 2. You can see that. And when you go back, i value becomes 3. The value of f becomes 6. That's important. When you go back, i becomes 4. The value of f now becomes 4 into 6, which is 24. And then the value of, that's the end. We have to reach till 4. And if you return, the return value would be 24. That's what we got. That's simple. So that's how you can do the factorial. Now there's one more way of finding a factorial, which is very amazing that we'll be doing in the next video. Just to give you the hint, it is about recursion. But what is that? We'll talk about that in the next video. So that's it from this video. I hope you enjoyed this video. Let me know in the comment section. And do subscribe for the videos. Bye bye.","try factor, say factor, series python, notice factorial, python, factor number, factorial normally, factorial amazing, got factorial, factorial 24, factorial 20, factorial example, factorial way, factorial value, value factorial","Recommended Tasks:
- Add single-line and multi-line comments to a script.
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compare two objects using their attributes.
- Compute the factorial of a number using a loop.
- Connect to MySQL using mysql.connector and run a query.
- Create a Django model class with fields and explain what it represents in DB.
- Create a Python module and import it into another file.
- Create a class Car with attributes and a method to display info.
- Create a function that receives a list and prints the square of each number.
- Create a function with default and positional arguments.
- Create a list of 5 fruits and print each using a loop.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create an abstract class with an abstract method and subclass it.
- Create an array using the array module and perform basic operations.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create two unrelated classes with the same method names, and use them interchangeably.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Implement a linear search to find a number in a list.
- Install Anaconda and create a new environment.
- Install Django using pip and create your first project using django-admin startproject.
- Install NumPy and create a NumPy array from a list.
- Install Python and PyCharm, and run your first Python script that adds two numbers.
- Install Sublime Text and write a script to calculate the area of a rectangle.
- Instantiate objects of a class and call their methods.
- Launch Jupyter Notebook and run a simple Python cell.
- Make a dictionary storing student names and their scores. Print each pair.
- Practice positional, keyword, default, and variable-length arguments.
- Practice using Python IDLE. Run commands and explore how to clear the screen.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Push code to GitHub using Git in PyCharm.
- Repeat the swap task but with user input this time.
- Research and list 3 real-world projects you want to build after learning Python.
- Same as above, but include print statements to show call stack.
- Setup MySQL Workbench and connect to it via GUI.
- Simulate method overloading using default arguments; override a method in a child class.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use filter, map, and reduce to process a list of numbers.
- Use for-else to search for an item in a list. Print a message if not found.
- Use if __name__ == '__main__': to separate code from execution.
- Use lambda to double a number and to filter even numbers from a list.
- Use the help() function to explore any built-in Python function.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program that prints ""Hello, World!"" and your name.
- Write a Python program to print your name, age, and favorite color.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program that converts decimal to binary, octal, and hexadecimal.
- Write a program to print the Fibonacci series up to n terms.
- Write a program using multiple variables and perform operations on them.
- Write a script and observe behavior during runtime (interpreted)."
40-Python-Tutorial-for-Beginners-Recursion.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\046-40-Python-Tutorial-for-Beginners-Recursion.mp4," Welcome back to Aliens, my name is Avindreddy and let's continue with the series on Python. Now in this video we'll talk about a topic which is my favorite called as recursion. Now what is recursion? So generally when you talk about recursion it means you are calling a function from itself, okay? So you're calling a function from a same function. Now what I mean by that is let's say, so let's say we have a function here and I will call that function as greet, okay? A simple function called as greet and this function does nothing but it prints only hello. That's it. So we are printing hello, nothing else? Hello, right? And I want to call this function, right? So of course we have to go out and say greet, okay? So if I run this code, of course the output will be greet, right? So if I run this code you can see the output would be hello, that's perfect. Yeah, so let's say I want to print this hello multiple times, lot of times. So what you can do is of course we can use for loop, right? But there's one more way. But if you call a function again, so what you're doing is you are calling greet once, okay? So at this point you're calling a greet function. Then this greet function is getting executed and this greet function again is calling the greet function. I mean it prints hello and then it is calling itself, that is recursion. So what do you think? How many times it will get called? Is it one, two times? Because once we are executing it that's for sure. But only two times or three times or ten times or hundred times or infinite times. Okay, technically it should be infinite times, right? Because you're calling itself. So a function is calling itself. So greet is calling greet, greet is again calling greet again calling greet. So it will just go on and that's where if you run this code you will get lot of hello's, right? You can see we got all hello's if I scroll up, you can see that you can see the scroll by that if it is visible. So there's so many values here and at the end it will give you an error. See technically it should be infinite but then there's a limitation, right? See why we have to put a limit here? Because by default you can do this recursion only for a thousand times, okay? All right, that's a limit. So you can see it says maximum recursion that exceeded. So by default the limit is a thousand. You cannot go beyond that. Of course you can by doing some customization but time will it will go till a thousand. But you will think why a thousand if you want to go beyond that or if you want to go for infinite, why not? The problem is see, sometimes as a programmer you let a code and your intention is not to go into recursion but by some, you know, due to some mistake you are going into recursion. And if your code goes into recursion without condition and if it is going in finite time your system, your software will hang, okay? So Python takes care of that. So Python says, hey, I will give you only a thousand. If you want to change it you can do that. So I want to actually count, okay? How many times it going? You can see it says there should be some number here. Okay, there's no number. Oh, there's this number here. It says previous line is repeated nine, nine, two more times. Okay? So basically it is a thousand limit. In fact we can actually print, okay? What's the limit is? So the way you can get the limit is first of all you have to import says if you really want to know the limit of recursion and the function is, okay, so print. So we'll say sys. There's a method called as get recursion limit. Okay? So you can see that the moment I say sys.get recursion limit it will give you the limit here and I will not call greet at this point. Remove that. And if another code you can see the limit is thousand, okay? So there I'm not executing this function a greet, okay? So I'm not calling greet so it will not getting executed. So the limit is thousand, okay? We got that. So I increase the limit. So the way you do that is by saying sys.set recursion limit and you can provide any number here, okay? Okay? When I say any number I tried with 2000 it worked. Maybe you can try different number. Let me know in the comment section which is not working for big numbers. And now if I don't this code you can see the limit has changed to 2000, which means if I, if I call greet it will print hello to at least 2000 times. Okay? And then if I say for another code you can see it says oh, okay? How do I know how many times it's getting printed? So what do I do is I will take a counter here and I will say counter is zero. Initially the counter will be zero. And before printing hello I just want to increment the counter. So let's also print the value and now let's run this code to see at till what point it is going. Oh, the problem is, okay. There's one problem. See, I is a global variable right? And we are trying to use that variable inside the function. In that case you have to use a global keyword. Remember we have talked about global before. So I will say global I. Now you can access I inside the function as well. Let's run this and okay we got another error. It says oh, I'm using plus. That's my value, okay? Since I'm coming from Java background so we have this habit of using plus there. So if I run this code you can see we got it and the last value for I is 91996. But it is going, so the limit is 2000. It is stopping at 1996. So that's awesome right? So this is how you do recursion. You can call itself. But does it make any sense? Think about this. You are doing it for fun here and that perfectly makes sense. So when you work on a project do we really use recursion and the answer is yes. Okay. So a lot of projects we do use recursion because recursion gives you something which you can do without recursion but then it makes much more sense to use recursion there. In fact in the next example we'll be doing factorial with recursion and that will be fun. Okay. I will try to do something amazing so that you will understand how to do factorial using recursion. So I hope this makes sense. So recursion basically means a function calling itself. Okay. That's what we have done here. So does it from this video? I hope you are enjoying this series. Let me know in the comments section. And do subscribe for further videos. Bye bye.","recursion does, right recursion, goes recursion, recursion know, recursion gives, talk recursion, recursion function, gives recursion, recursion code, use recursion, called recursion, recursion means, recursion fun, recursion generally, recursion basically","Recommended Tasks:
- Same as above, but include print statements to show call stack.
- Use recursion to calculate factorial."
41-Python-Tutorial-for-Beginners-Factorial-using-Recursion.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\047-41-Python-Tutorial-for-Beginners-Factorial-using-Recursion.mp4," Welcome back to A-Neil's, my name is David Reddy and let's get you over the series on Python. Now till this point we have talked about functions, we have talked about recursion and we have also talked about factorial. Now in this video let's combine everything and let's find a factorial of a number with the help of recursion. Now just to recap what is recursion it's a function calling itself. So let's say if you have a function A and if a function calls itself that's recursion right. In fact we have done that with the help of read function and then we tried to print hello right. So let's find a factorial here. Now when you say you want to find a factorial is very simple you will say you will take a result variable and in that you will be storing a factorial of a number time been let's find a factorial of 5 maybe you can take it from the user that's your choice and now let's print the not paint let's print the value of result. Okay that's that's what we want to do but then we don't have this function fact right let's define it so the way you define a function is by saying death and then you mention a function name right so we'll say fact. Now this fact will take a variable okay it will accept an variable so I will say n and in this n you will pass a value so time when we are passing 5 right now the thing is we need to pass we need to return the value of factorial. Now we know we know one way of doing it okay we have done that before we have used a follow right so we can start from one and we can reach to that point and then we can multiply the numbers as we have done that example for this it will be one each two into three into four into five right but in this case this is not what we want to do so let's imagine I am fact function okay so you are the user and you are saying hey hey fact give me a factor of five so you are talking to me okay so I will say okay my job is to give you the factor of five so that means I have to say five into four into three oh hold on for that I have to use a follow right what I will do is I will say okay five into four factorial because if I can find that I will give the value right but unfortunately we still have to find four factorial so what I will do is I will say so I will take a help of someone I will say hey fact oh I am calling myself there hey fact can you give me a factor of four okay because so you are asking factorial of five right I am asking factorial for four so I am calling myself so I will say hey can you give me a factor of four or factor of four right it's very simple so what I can do is I can say four into three factorial but I don't know how to find a factor of three so I need help here hey can you give me a factor of three okay I always do that so I will say three into some I job is to find three into two factorial I don't know what is two factorial is hey can you help me with that oh two factorial right so it's very simple it's two into one factorial or but I don't know what is one factorial hey can you help me with that hold on one factorial is oh for that I have to say one into zero factorial right because we are following the pattern here okay so for that I have to say or I don't know what is the factorial is hey can you help me with that of course zero factorial it's one everyone knows that it's one so one is one into one is one okay two into one is two oh three into two is six okay four into six is 24 okay so now we got four factorial which is 24 right so now my answer is five into 24 which is one 20 so you got the answer so if you can see we got a factor of five and I am calling myself right so there is no for loop here I am calling the same function name so this is called as recursion and you got the answer right so let's implement the same concept here now so whatever we do is I am calling myself right but if you can observe here what I am doing is I am simply saying I want to return the value by saying five into four factorial but hold on we cannot simply your number here right so five is n right so I will say n into but I also find the factor of four right so I will say fact of now when you say you want to find five into four factorial later you will say four into three factorial that means it is always one less than the n right so I will say n minus one right so I have to find n into a factor of n minus one but we have an issue here because we are calling itself right so there should be some limit in that case what you will do is you will first check if the number is zero because if remember the top one is so the moment you say zero if n is equal to zero in that case you will simply return one because we all know the factorial of zero is one right so this this is how you do it so it's so simple right there is not not a lot of code here and let's run this code and you can see we got the output is 120 so that's how you find a factorial of a number so with the help of recursion you can do a lot of stuff okay there's just one example so in some of the videos we'll talk more about recursion what else we can do or you can try with different examples here so let me know in the comment section if you're enjoying this city so do subscribe the channel for further videos bye bye","factorial simple, factorial knows, recursion right, help recursion, recursion lot, factorial later, say factorial, let factorial, recursion talked, factorial know, know factorial, recursion just, called recursion, calls recursion, recursion function","Recommended Tasks:
- Compute the factorial of a number using a loop.
- Same as above, but include print statements to show call stack.
- Use recursion to calculate factorial."
42-Python-Tutorial-for-Beginners-Anonymous-Functions-Lambda.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\048-42-Python-Tutorial-for-Beginners-Anonymous-Functions-Lambda.mp4, Welcome back to Alien's My name is Darwin Vedy and let's continue with the series on Python. Now till this point we have talked about functions right and how do we define functions as by using dev keyword and then we mention the function name as well right. What if I don't mention the function name can I do that? If I don't mention a name it becomes anonymous right and that's where we can create a function in Python called as anonymous functions functions without name or you can also call them as lambdas okay. So let's see how what that means is. So what I will do is let's say if I want create a function normally what we do is we say dev and if let's say if I want to find a square of a number so what we do is we say square and we pass some parameters let's say if I pass a and on this a I want to perform an operation which is a into a and then the way you call them is by saying if you say result is equal to square you call that function right and you pass a number so let me pass number five I want to find a square of number five and in this case I'm now so I want to print the value for result now of course this will work right we have done that before it works you get 25 but look at the code now so we have this function definition right so normally when you can talk about functions we expect it will have at least three to four lines of code and maybe five lines of code right look at this it only has one line of code what is doing is it is retaining that value right so we have only one expression which is returning a value that's eight we are wasting two lines with our dev keyword with our return keyword with a new function right so what if you want to use a function only once and you don't want to define the name of the function right and if you only have one expression can we do that when we talk about function there is one thing about functions we can pass functions to a function okay so that means the way you pass values the way you pass objects you can also pass functions because functions are object in python if you talk about this squared now look at this code it perfectly works right but the only problem with which I have here is I will not be using this squared function multiple times I will be using that squared function only once and that do it it has only one expression so instead of defining a function we can define a function when you want to use it directly okay you can simply say a colon this is your function but arguments okay so you have to say a that's your arguments the arguments which are passing and the operation on that argument which is a into a right so we got this function which is anonymous okay which accepts a value a and what you return is a into a because you want to find a square of it but the thing is you need to use one more keyword here which is lambda because the anonymous function there are also called as lambda expression so like all you can say lambda lambda functions or lambda expression you can say whatever you want and then if you want to use that lambda okay the thing is as we mentioned that functions are objects in python so of course you need to assign to someone so you will say f equal to lambda now this f represents your function okay and you can pass that function to any function you can if I will be seeing that later so we can use this function in other functions as well we will see that now whatever you want to do is I want to find a square of five so look at this we are simply saying lambda a colon a into a and that assigned to f now since this is a function we have to use a back it right so whatever you pass here in five goes to a we will perform some operation on that a and then you will get it back now I know at this point it looks bit weird but hold on once we talk about you know some other functions available how can we use lambda functions in other functions it will be awesome okay but time been this is how it works okay so if I run this code you can see we got the outweb is 25 let's say if you want to define a function which will add two numbers okay we can do that let's say if I pass five comma six okay so we are putting a function f which doesn't have a name okay and you are saying five comma six and then that value will go into two variables right so I will say a and b and I want to perform the operation right so you will say a plus b so point to the member you can pass any number of arguments but it should be only of one expression which is in this case a plus b or a something like that it should be one expression so that's your anonymous functions okay so we are defining a function with the help of lambda and it doesn't have a name okay so you will understand this mode when you start with when you see a next video say next video we'll talk about how can we use lambdas in other functions okay so that's it from this video I hope you're enjoying this let me know in the comments section so that's it everyone bye bye,"functions objects, create function, function definition, function arguments, defining function, lambda functions, lambdas functions, functions using, define functions, functions lambdas, function anonymous, functions lambda, anonymous function, anonymous functions, function python","Recommended Tasks:
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a function with default and positional arguments.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate use of a global variable inside a function.
- Implement a linear search to find a number in a list.
- Import a file and observe how __name__ behaves differently.
- Practice positional, keyword, default, and variable-length arguments.
- Print the elements of a list using a for loop.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use filter, map, and reduce to process a list of numbers.
- Use for-else to search for an item in a list. Print a message if not found.
- Use lambda to double a number and to filter even numbers from a list.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a function that accepts any number of keyword arguments and prints them.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break)."
43-Python-Tutorial-for-Beginners-Filter-Map-Reduce.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\049-43-Python-Tutorial-for-Beginners-Filter-Map-Reduce.mp4," Welcome back aliens, my name is Avindreddy and let's continue the series on Python. Now in the last video we have talked about lambdas, we have talked about anonymous functions. We are still not confirmed, we will use it. Of course we know the concept that we have a function without name, it should have only one expression, it can take multiple arguments but hold on, we will use it. So in this video we will use three functions. One is filter, map and reduce. And let's try to use this lambda there and you will understand the importance of it. So to understand this what I will do is I will take an example here, the example is let's say if I have a list of values, I will say numbs and in this numbs I have certain values. Let me just drop those values here. So we got these values here, okay. I don't know how many numbers are even or are. Of course we can do some complex example here but just to make it simple, just to keep it simple, let's go with this. So we got this number. I just want to check how many numbers are even. In fact I want to fetch all the even numbers from this list. So I want to get a new list which is evens and in this evens, I don't know if it is a good name, evens but it doesn't matter. So in this evens I want to assign all the even numbers, okay. How you do that? Of course you have to write a function, right. And then we have an inbuilt function in Python called as filter. Okay, so we have this functions. So what this filter will do is it will take the list from you and it will filter those list, it will give you the values. So you will say, hey, I want even numbers, filter will say, okay done, okay. So filter will take the sequence and it will give you a sequence but we want a list and return, right. So this filter will give you something I want a list out of it and that should work. But there's one problem here. When you say filter, how would filter know what exact what values you want? Because see, we will pass num. That's perfectly right. That's why we will pass nums to our filter. That's a sequence, right. That's a list. But then how it will return. So what should be the condition, right. And that's why filter says, hey, you give me function. If I say control space here for filter, so filter takes two arguments. The first one is function and second one is it label, which is sequence in this case. But what function we are talking about. So what we do is we have to say is even function. So we are passing is even, but is it an inbuilt function? Of course not. So that means we need to define this function. So I will say death. I will define this function is even. I just went with this name because we don't, we are not able to recall any name here. And this is even takes a value. Let's say the values a or n. And this will return true or false. If that n is even number, it will return true. If that n is odd number, it will return false. Example, let's say if I give you a list of phones and some phones are android phones and some phones are non Android phones. Maybe Windows phones, iOS or BlackBerry. So if I give you those phones, your job is to filter it. So I will say, hey filter based on Android, non Android. So you will take the phone and you will say, okay, this is Android, keep it here. This is not Android, keep it there. So this is what we are doing. So in filter, this is what it does. So if it is true or false, depend upon true, it will give it the value. If it is false, it will not give you the value. So we'll say return i, mod 2 is equal to 0. So if it is not i, n, how can I say i? So I will say n mod 2 is equal to 0. That's it. Okay, so this function returns a value true or false based on this expression. Right? And this should work now because if I print this events, see the output. It gives you all the even numbers. So in the list, you do have odd numbers. Unfortunately, we have only two odd numbers, but that's fine. So in the even numbers, you can see we only have even numbers now. So this thing, filter, takes two arguments. The first one is the function, which where you will have mentioned the logic. And second one is the list or the sequence. But don't you think this function here is only to be used here? Right? See, normally when you talk about functions, we use functions so that it can be reusable. But look at this function. Don't you think this is a very customized function only for that purpose? And it only returns one value. So in that case, you can use lambda. So you want to know how to use lambda here. It's very simple. We don't need this function because in this function, we need only two things. The variable name n and the expression. So I don't want this. So instead of using is a one, we'll mention the function here itself. So you have to say lambda space, mention the variable name, which is n, already variable name for that matter. Give a colon and mention the operation, which is n mod 2 is equal to 0. That's it. This, we are defining a function. So you're saying, so this is my sequence, which is released in this case. And this is my function based on that filter it. And it works. Okay? So that's the beauty about lambda. So you can reduce the number of lines you are using. And it makes your code look cool, right? So that's what programmers do, right? Making things cool. Now let's try with map. So let's say we got all the even numbers, right? So in this, we got all the even numbers. Now my job is to double all the values. So whatever even numbers you got, I want to double it. Or maybe I want to plus say to plus two. So whatever even numbers we have, I want to say plus two. So even numbers are two, six, eight. I want to say plus two. So two should be four. Six should be eight. Eight should be ten. So that's what I want to do. Now, if anybody want to change every value, we can use very simple concept for this map. Okay? Now, if you have ever heard about big data concepts, right? So when I was learning big data for the first time, was when I was doing something with Google's map-reduced concept, this is what we do. So we take the chunk of data and then we try to filter that data and then we map it and then we try to reduce it. Okay? So this same concept can be implemented here. So if you have a bunch of values, filter out the values which you don't need and then apply some operation with the help of maps. So map what map does is it takes the value, apply some operation maybe plus two in multiply, depend upon what you want. And then you can also use Reduce function, which we'll see later. So if I give you chunk of data, let's say if you want to add all the values, Reduce, if you want to multiply all the values, Reduce, if you want to find one value out of the chunk, you will use Reduce. It can be some, it can be any other logic. Or maybe average, right? So here what I will do is I want to find, I want to double all the values, I would say doubles, right? So we got events and then we want to find double software. So of course I want in the least format and this time I will not, I don't want to filter it, I want to map, I want to change all the values. So I will say map and in this I will pass events. But then when you say map events, you have to also pass one more thing because map takes two arguments. So map takes a function and it's a table, again the same problem function. Now what function I'm talking about is the logic, right? So if you can do that here, we can define a function. We will say update because it's updating the value, it will take n and what we do is you have to just add two, so you will say return n plus two. So whatever value you are getting, you will simply say n plus two, right? But and then we have to pass that update function here, right? So map takes two arguments, the function and the sequence, we are doing that here. But there's only one thing, right? I don't want to use this function because the only purpose of this function is to work with map, right? We will not be using this function anymore. So in that case, instead of doing that there, here itself, we can say lambda as we did before. We can say lambda n colon n plus two, right? It's so simple, you can simply create an anonymous function or lambda here itself, right? So this works, we got double. And the last one is I want to perform, reduce, I want to reduce all the values. Example, if I print this double first, let me just print doubles. So these doubles, you will get the same stuff, but then you are saying plus two. Oh, we were supposed to do double, right? So I have to say into two, not plus two. And in fact, you're logic, right? So you want to double it or you want to say plus two. But since then I have taken the name doubles, I will make it double. Let's run this and you can see we got four, 12, 16, 8, 12 and four. That perfectly works. But now, what I want to do is I want to reduce the values. So instead of having multiple values, I want only one value. I want to add all these values, right? Now technically, when you add values, how we do it, as you simply say, okay, 4 plus 12 is 16, 16 plus 16 is 32, 32 plus 8 is 40 plus 12 is, I mean, this goes on, right? So you, at one time, you only add two values. Even if I give you 10 values, you will add two values at a time. That's important. So how will you do it? And that's where we will use reduce. So I will say some is equal to, I, of course, I'm not expecting multiple values here. I'm expecting only one value. That's why I'm not, I will not be using list. So I will use a function called as reduce. But the probability, you can see it says, no, that means we are not able to use reduce. The thing is, this reduce function, it belongs to a module called as function tools or func tool. So I will say from func tools, import, reduce, because we want to work with reduce, right? And then we can say, now we can perform this operation, so we can say reduce. And now reduce, if I say control space, oh, reduce also takes two things, okay? That thing is, we have to pass two things, right? The first one is the function, get the logic of course, because it depends upon what you want to do. Maybe you want to add all the numbers, maybe you want to multiply all the numbers. So you have to pass a function and then you want to pass a sequence. So sequence is there in doubles, because I want to add all the values of doubles, but I also need to specify, okay, what I did, I just made a mistake there. Okay, and then this, you have to pass a function. Now, which, what function I'm talking about? So what I will do is, here I will create a function, which is deaf, and I will call this function as add all. Of course, you can use any function name, and this will take two parameters, okay? So when you say a function for reduce, it will always take two values at a time. So I will say a, b, and here with those two values, see, it doesn't matter what you want to do, you always take two other times, so you will say a plus b, depend upon what logic you write, it will do that. And here, you have to pass add all, okay? That's what you do. So in reduce, you pass two parameters function and sequence, and now, when you start printing double, I will print some, okay, we got an error, okay, my bad, okay, so I'm doing reduce inside of the, reduce my bad, what's wrong with me? Okay, you can see we got the argument with 56, okay? You have to trust me at this point, it should be 56. So now, let's use lambda here, right? So in short, doing this, let's use lambda. So in lambda, what you will do is, you will again, instead of using add all, you will say lambda, you, now you need two parameters, right? You will say a comma b, and you will say a plus b. So it will take two values at a time. So when you say, you have doubles, let me also print doubles here because I want to see, I want to show you how it will add those two values. And we don't need add all, function now, let's run this code, and you can see it will, it is finding double of all this, it is adding all these values, right? At one time, it will add 4 and 12, which is 16, and then that 16 will be added with another 16, right? And then it will be added with eight, and then 12 and then four, right? That's the sequence it follows. Set one point, it will take two values, and that's what this is doing. So that's how we work with filter, map, and reduce with the help of lambda. Okay, you can set lambda expression, all lambda function your choice. So I hope you understood something from this topic, try it out, practice because this is not that easy. So let me know in the comments section if I facing some issues, and do subscribe for the videos. Bye bye.","lambda colon, lambda right, function python, set lambda, lambda okay, lambda want, use lambda, lambda instead, lambda expression, lambda reduce, expression lambda, lambdas, lambda simple, function lambda, lambda understand","Recommended Tasks:
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create variables for name, age, and marks. Print them all with labels.
- Implement a linear search to find a number in a list.
- Practice positional, keyword, default, and variable-length arguments.
- Print the elements of a list using a for loop.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use filter, map, and reduce to process a list of numbers.
- Use for-else to search for an item in a list. Print a message if not found.
- Use lambda to double a number and to filter even numbers from a list.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break)."
44-Python-Tutorial-for-Beginners-Decorators.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\050-44-Python-Tutorial-for-Beginners-Decorators.mp4," Welcome back, aliens. My name is Durin Vetty and in this video we will talk about one of the amazing features of Python which is decorators. Now think about this. When you talk about functions, functions are built to perform certain tasks, right? It's example, let's say we have this file and in this file we have a function which is pretty fine. So let's get a function here and this will be for division. Of course, you can write any complex code, but just to keep it simple, let's go for division. And of course, a division function takes two parameters. So we'll take a and b and this will return the division of this tool. So I will return a divided by b. Simple code, right? Of course, you can make it complex. You can go for complex code, but just to keep it simple, we got two lines, a division which divides to numbers. And then if you call this function, if you say, let's say if I pass 4, 2 and if you learn this code, of course, you have to also print instead of returning here, let's print. So if you call this function now, let's write, lick and say run, you can see we got 2.0. This is what we wanted, right? We wanted the output. Okay, that's great. But what if I pass the value, which is 2 and 4? So what are you expecting the output here? So the output, which I'm expecting here is of course 0.5, because that's what you will get. And you can see we got 0.5. So what if I say I want a different logic here? The logic which I want is, it doesn't matter in which sequence I pass the value, it should be always the numerator should be bigger than the denominator. So example, in this case, if I'm passing 2 and 4, it should be reverse while dividing. Only when my numerator is less than denominator, I want to swap them. Okay, so in this case, even if you are passing 2 and 4, the division should be 4 divided by 2. Okay, so we can do that, right? We can have our own logic. So just for the example, we are going for this. Okay, so what do you think what we have to do? So of course, as a user, I should be passing 4 and 2. But let's say as a user, I want to pass 2 and 4. It is your job, developer, to make sure that they are getting swept. Okay, you will say, okay, it's my job, I will do it. So you will go to the existing code which is division and you will say, okay, so before dividing those two numbers, I want to apply a logic. The logic is if a is less than b, I just want to swap them and we know how to swap two numbers, right? We can simply say a comma b is equal to b comma a. Simple logic and then once you have done that, if you're on this code, you can say we got 2.0. It was so simple, right? But we got a twist. The twist is, as I mentioned, imagine this code, the division code which you have here is not with you. This is in some other file and you're importing it. Maybe you don't have the access for this function and maybe you don't want to change the code of the existing function. So I want you to swap those two values without touching the new function. Is it possible? And that's where decorators comes into picture. So what are decorators? So using decorators, you can add the extra features in the existing functions. I know that sounds weird, but we can do that. So just to explain that, whatever it is, I will create a new function. Now this will be a decorator for div. So I will say, we'll call it as smart because it can change the code, right? So we'll say smart div. Now what this smart div will get? Now smart div will take div as the function or as a parameter. So let's pass the function here. So it will accept a function. Again, why we'll talk about that later? So this smart div will accept a function and then, so if you want to change the logic, you have to write a code, right? I want to do that in another function. So we can write a function inside a function. That's the beauty of Python. So let's get a function here. So we'll say, we can have any function name. Let's go for inner because of inner function. And then this inner function will take the same parameter, we just taken by div. Two parameters, let's take a comma b. The name should not be same, but you can have any name, but the number of parameters should be same. So you're passing two, you have to accept two. Now in this inner, you can write the logic, which you were trying to write in div. So which was if a is greater than p, in this case, you will swap them. So swapping is a comma b is equal to b comma a. Just to remove these spaces there, let's do that. And that's okay, let me just have a space here. So you can see, we are creating a smart function here, which has a inner function who is doing our job. So this is the code which I want inside my div. Now once you have done that, you simply have to return. So you have to return the function, which you are accepting here. Basically, you know, you are actually calling div here. So in the return, you will pass that two values, a and b, the new values. So the original values were two and four after swapping your passing four and two. So you are calling a function by passing these two values. Now this function is your div function, but you will be thinking how they are matching. Just give me some time. And then after this, you just have to return the inner function because that's the function, which is actually doing the job for you. Okay, but will this work? Let's try. Let's run this code and you can see, you're still getting 0.5 is because there's no connection between this smart div and this div. Let's create that connection. So what we can do is before calling the new div function, we can say div is equal to let's make it smart. So we can assign the function to a function because everything in Python is not checked, right? So we can say div is equal to smart div in which you will passing the new function. Now this new function is the original function you have. And this is a new one. In fact, you know, just to give you an idea, I'll make this as do one. And let me call that function do one by passing to n4. So basically, we are calling div, but indirectly. Okay, so we are calling day one, which is calling, which is using this smart div function by passing the values. It will swap the values in build and then it will actually call the div function at the end, which will represent the values. Let's run this code. And you can see we got the output, which is wrong. That's weird. Okay, I guess there's something wrong with the if condition, my bad. So it else. Okay, so as a programmer, you always make mistakes, right? So you can see it should be less than right. That's what you want to spam. So if you're on this code now or we got to that's what we wanted, right? In fact, the amazing thing is you don't have to go for a new name. You can actually replace with the original name itself, which is div div. So it looks like we are calling this new function, but no, just before calling them, we are changing the definition for div, right? So this is the old div. We are making a new div now. So you can see we got 2.0. The amazing part about decorators is you can change the behavior of the existing function at the compile time itself. So that's the decorators for you. So just to recap what we are doing is we are getting a new function, which takes functions a parameter. And that's the beauty that this is not possible in all the languages. So yes, we can do that in Python because Python is also a functional programming. And then we can define a function instead of function, which is actually replacing the code of div behind the scene. And then before calling div, we are saying div is equal to smart div and we are passing div. So basically we are changing the way div works. So that's how you can use decorators in Python. I hope you got something about decorators in this video. So I hope you are enjoying this series, let me in the comments section and do subscribe for further videos.","complex code, using decorators, passing division, division function, decorators, return division, division tool, decorators using, python let, functions built, function division, python python, python, python functional, python decorators","Recommended Tasks:
- Add single-line and multi-line comments to a script.
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compare two objects using their attributes.
- Compute the factorial of a number using a loop.
- Connect to MySQL using mysql.connector and run a query.
- Create a Django model class with fields and explain what it represents in DB.
- Create a Python module and import it into another file.
- Create a class Car with attributes and a method to display info.
- Create a function that receives a list and prints the square of each number.
- Create a function with default and positional arguments.
- Create a list of 5 fruits and print each using a loop.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create an abstract class with an abstract method and subclass it.
- Create an array using the array module and perform basic operations.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create two unrelated classes with the same method names, and use them interchangeably.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate shallow and deep copy of lists and NumPy arrays.
- Implement a linear search to find a number in a list.
- Install Anaconda and create a new environment.
- Install Django using pip and create your first project using django-admin startproject.
- Install NumPy and create a NumPy array from a list.
- Install Python and PyCharm, and run your first Python script that adds two numbers.
- Install Sublime Text and write a script to calculate the area of a rectangle.
- Instantiate objects of a class and call their methods.
- Launch Jupyter Notebook and run a simple Python cell.
- Make a dictionary storing student names and their scores. Print each pair.
- Practice positional, keyword, default, and variable-length arguments.
- Practice using Python IDLE. Run commands and explore how to clear the screen.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Push code to GitHub using Git in PyCharm.
- Repeat the swap task but with user input this time.
- Research and list 3 real-world projects you want to build after learning Python.
- Setup MySQL Workbench and connect to it via GUI.
- Simulate method overloading using default arguments; override a method in a child class.
- Sort a list and use binary search to find an element.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use filter, map, and reduce to process a list of numbers.
- Use for-else to search for an item in a list. Print a message if not found.
- Use if __name__ == '__main__': to separate code from execution.
- Use lambda to double a number and to filter even numbers from a list.
- Use the help() function to explore any built-in Python function.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program that prints ""Hello, World!"" and your name.
- Write a Python program to print your name, age, and favorite color.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program that checks if a number is positive, negative, or zero.
- Write a program that converts decimal to binary, octal, and hexadecimal.
- Write a program to print the Fibonacci series up to n terms.
- Write a program using multiple variables and perform operations on them.
- Write a script and observe behavior during runtime (interpreted)."
45-Python-Tutorial-for-Beginners-Modules.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\051-45-Python-Tutorial-for-Beginners-Modules.mp4," Welcome back, aliens, my name is Ivan Dredey and let's continue the series on Python. Now till this point, we have talked about functions, right? And then we have done so many stuff till now, we know how to add numbers, we know how to find factorial. But think about this, when you work on a project, of course you will be solving a real life problem, right? And that may be a complex project. Now when you say a complex project, it should be simple for the users, right? You should not build a complex project for the user, but then for the programmer and every project is a complex project. Because you're writing a lot of code, right? Maybe 1000 lines of code. Now this is where the problem starts, you know? See we have a concept as debugging. Now when you say debug, it simply means removing bugs, right? What about coding them? If debugging is removing bugs, then coding is actually adding bugs, right? So every time you code, you add new bugs. Now even if you don't do it intentionally, it happens, you know, because we are trying to solve a problem and around that you will be writing some code which will increase bugs. Okay, now how do you manage this stuff, right? Because if you increase bugs, of course, at some point you need to read your own code, you need to understand how to remove those bugs and your software should be maintainable. When I wrote this code on the God and I understood what I did and now on the God knows, right? So it happens, you know, when you write a code, after some time, even you will not understand what you have written. Because when you have thousands of code, it is difficult to track. The second problem is if you write everything in the same page or if everything at the same place, it is difficult to manage it and if you change one point, it may affect other code as well. And that's where what you will do is if you want to solve this problem, we will be using a concept of modules. So instead of writing one big software in one file, you will break it down into small, small parts, right? Example, let's say if you have a, b, c, d as a software, you want to build a software in which you have this four features and that's a one project, right? It's a combined project. So what you will do is before, even before starting the actual project, what you will do is you will break it down the components on papers or you will write, hey, we have a, b, c, d, now we have to break it down in logical parts, right? Of course, you cannot simply break down software, you have to think about it, you have to break it down in logical parts, right? So all the same features should belong to same modules. So you will say, okay, we have a, b, c, d, well, a and c can be one module and b and d can be one module. Okay, so that's what we have done. And then further you realize, okay, we can actually also break it down a and c. So you have saying a module, c module, b module and d module. So we are breaking things down. The advantage is you will be building four different modules, right? The first advantage would be if you want to change something in a, it should, it will not affect other modules, right? Because they are separate now. It may, if you are doing some tight coupling stuff there, but normally it doesn't affect. So when you write a code, if you change something in a, it will not affect other modules or it may not affect other modules. But the next thing is you can also reuse your modules. Example, let's say after this project, you are building a new project with some similar features example. Now this time you are building maybe g, a, d, p. So we have this other project. Now here, you can actually use a and d module because you have to be built it, right? So that's the advantage of using modules. Now, can we do that in a project? In fact, we'll not be building a complex project here. Let's do it simply. But then if we talk about a module, what it will have. So in Python, we have this concept of variables. We have functions. We have classes, right? I can, we'll be talking about classes later, but we have that concept. So in one module, you can have all the different stuff, right? So we can have variables. We can have functions and we can have a class. All you can imagine at this point, your one module will be one file. So where we are doing a file here, we have demo.py. This is your one module, right? We can create another file as a separate module. Let me show you something. So let's say this is my main file, right? And here I want to add two numbers. So what normally with doors, we simply say A is equal to nine and you say B is equal to seven. And here you will add those two values, right? Maybe you want to perform all the operations, right? Additions, sub-action, deletion, multiplication. So you can do that here itself or you can create functions. And now we know how to create functions, right? So we can do that here. But we can create modules, right? So you can create those four functions here in the same module or you can create a separate module which will have all these functions. And that makes more sense, right? Having a separate module. So let's do that. So what I will do is to create a separate module, I will create a new file. So I will say new and let's go to Python file. We'll name this as a calc because this calc will have all the functions which you need. So this is a separate module for you. And let's define the functions. I will say def and the function name would be add which takes two parameters, which is a and b in this case. And we'll simply turn a plus b. That's our first function. Likewise, we can create four functions. Let me do it quickly. So you can see now we have this module which is cal which has four functions, right? We can see that here. Now I want to use this function in another module which is demo. How can I use that? So because if I simply type add, it will not work, right? You cannot simply call add it. Of course, it will not work directly. So even if I pass a comma b by saying a c equal to add a comma b, it will not work because it is in separate module. So we have used some inbuilt modules till this point, right? So if you remember, we have worked with import. Right? So we should say import something and then we have also used from our module import specific functions or the classes. We have done that, right? But we have done that for the inbuilt modules. How about our own module? Because calc is my own module now. So what I will do is. If you want to use calc, we need to import it. And the way you do that is by saying import calc. You know, it's done. You're saying import calc and when you want to use it, you will simply say calc dot add. So this one will write can use a module name and then say dot add or if you don't want to say calc every time because of course, if you want to add, if you want to supply, you will be using cal dot supply cal dot multiple times. Instead of that, you can say from calc import whatever you want to import. I can say import add. So in the one line, you can say add and the next one, you can say import sub import multi or you can say import start, right? It will import all the functions for you. And now you don't need to call calc. It will simply say add it will work, right? It's a beauty, right? So this is how you break down your project into small, small parts. And of course, it doesn't make sense to have a separate module for separate functions, right? So all your logical functions should work together in one module, not just function classes, variables, whatever you want, right? And now once we got this, you can print the value of C and it perfectly works. Let's run this. Okay, so you can see we got the output which is 16, 1 and 6. So that's what we wanted, right? 9 plus 7 is 16. We can also do that for subtraction. Everything will work here. And you can see we got two. So that's how you use modules. You can create multiple modules, not just one or two. You can create 10 different files as a different modules and you can import them the way you want, right? In fact, in Python itself, we have different modules available. So that's it from this video. I hope you enjoyed this video because in this video, we have talked about modules which is very important for your project. So do click on the like button there and do subscribe for other videos. Thanks so much for watching everyone. Bye bye.","programmer, writing code, say project, building complex, increase bugs, project break, debugging say, debugging, say debug, adding bugs, bugs software, build complex, project writing, project complex, python concept","Recommended Tasks:
- Add single-line and multi-line comments to a script.
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a Python module and import it into another file.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create two unrelated classes with the same method names, and use them interchangeably.
- Create variables for name, age, and marks. Print them all with labels.
- Implement a linear search to find a number in a list.
- Install Python and PyCharm, and run your first Python script that adds two numbers.
- Practice positional, keyword, default, and variable-length arguments.
- Print the elements of a list using a for loop.
- Push code to GitHub using Git in PyCharm.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program using multiple variables and perform operations on them."
46-Python-Tutorial-for-Beginners-SpecialVariable__name__.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\052-46-Python-Tutorial-for-Beginners-SpecialVariable__name__.mp4," Welcome back to Alien, my name is Lavin Dreddy and let's continue with the series on Python. Now in the last video we have talked about modules right and it is awesome. Now in this video we are going to talk about a very special variable name as name. So it's a variable, such a variable name. It's because we use a double underscore here. So in Python we have this special concept word of underscore. Again we'll talk about that later but at this point let's focus on name. Now what is name? So let's say if I go back here and if I say print, I want to print a name variable. So we can actually use the one to score and send name and the moment you run this code you can see we will be getting main. Now what is main? Now if you are coming from C, C++ or Java background, we know that you know, main is a starting point of execution. Same goes for Python. The moment you run this code, if this is your first code, okay, because in your project you might have multiple modules, right? Maybe five module, ten module, but there will be some module which you will run first. So this example demo.py is my first module. Maybe with this demo I will be having multiple modules, right? So but this is my first module. So the first module name is always main because that is the point of execution. So that's where your code starts. So the value for name here is main, but here's a twist. What if if I go back to Calc, okay, so this is demo, right? This is the file which I'm working with now is demo. If I go back to Calc, so you can see Calc is empty. At this point just to test, I will print hello, that's it. My main purpose here is to print hello, that's it. So if I run this one, you can say it says hello. Nothing else just says hello. Now after hello, let me print the name variable here. So I will say name underscore underscore. Now what do you think? Will it print main or something else? Of course since I'm running Calc, it will print main because I'm running Calc, right? But if I input a Calc in demo, let me just do that. I will say import Calc. Now what will happen is everything which is there in Calc will come to this demo file, right? Including the print statement. So that's why for this code, of course, this will print name. You should just printing name, let me also print demo says. So I'm saying demo says name. So demo will print what? Of course demo will print main. What about Calc? Now Calc will print the name of the module. So you can say it says hello Calc, which means that's the name of the module. So if you are running Calc, of course, this name will be main. But if you are importing Calc in other module, then it will print the name of the module. Okay, that's important. So the moment you said name, it's very special, you know, the value changes. That's what's called variable, right? So name value changes as per the place values in it. So if you are running the file as a main code and if you're using name, that will print main. But if you print name, which is imported as a module, then it will print the module name. Now why is helpful? It's because we have talked about functions, right? And we say that everything. So let me just remove this part as of now. So why is helpful? Why is name is helpful is because when you work on a project, of course, everything should be in a function, right? Example, even if you want to print hello, that's it. My main job here is to print hello and then I want to welcome the user. So if I want to say print hello and then I want to say welcome user. So I want to do these two things, okay? I want to say hello, I want to say welcome user. Now I want to do this only when this demo is the first file, okay? So I want to print hello and welcome user only when the demo is the first file. So if I don't this code, you can see we got hello and welcome user. But the problem is if I go back to Calc now and Calc is doing something, okay, Calc will have its own statement. But here I'm also importing demo and as I mentioned Calc will have its own feature. Let's say it's time to calculate. That's it. I just want to print in time to calculate. Now since Calc is my first code here, okay, so I'm not running demo, I'm running Calc. So demo becomes a module for me, a separate module. The moment I run this Calc, it is also printing hello and welcome user. I don't know I do that. So to avoid that, what you can do is you can define this in a function. You will set def and you will write the function name as anything. Maybe I will just time and I will say main and I will put these two statements inside main. So you can see I have written those two statements inside a main function. Okay. Now of course you need to call it, right? So normally if you want to execute that from demo itself, you have to call them. So if I don't demo now and if I don't this code, you can see it will print it. Okay, that's the issue. I want to call main only when this is my first code. So in this case, you can check if the name variable, remember the name variable? If the name variable is equal to equal to main, right? Now say the magic. If I don't this code, it will print hello and welcome user. But the moment I go back to Calc here and if I say run Calc, this time I'm using demo as a module and you can see it only prints in. It's time to calculate. So this is the idea. Okay. So if you want to start up code and if this is the first thing you want to show the user because this is the start of the code and you want to call it, that's where you will use this thing. And that's why if you see Python codes, awesome books, this is what they're right. Okay. So it simply says if name is main, then only execute main otherwise if you are importing this as a library, you don't want to print main. So that's it everyone. That's how you use this special variable call as name. I hope you enjoyed this video. Let me know in the comments section and click on that thumbs up button there. Thanks for watching everyone. Bye bye.","print main, code print, goes python, print hello, print module, variable use, called variable, py module, underscore underscore, say underscore, word underscore, double underscore, python codes, thing python, python special","Recommended Tasks:
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create examples of int, float, string, and boolean variables. Print their types.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate use of a global variable inside a function.
- Implement a linear search to find a number in a list.
- Install Python and PyCharm, and run your first Python script that adds two numbers.
- Practice positional, keyword, default, and variable-length arguments.
- Print the elements of a list using a for loop.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use if __name__ == '__main__': to separate code from execution.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a Python program to print your name, age, and favorite color.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break)."
47-Python-Tutorial-for-Beginners-Special-Variable__name__part2.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\053-47-Python-Tutorial-for-Beginners-Special-Variable__name__part2.mp4," Welcome back aliens, my name is Evan Reddy. In the last video we have talked about a very special variable called as name. Now in that video we have discussed about the importance of name and how do we use it with main. But again it created some kind of confusion so let's clear it here. If you don't have any doubts in that particular video, you don't need to watch this video. You can simply skip it and watch the next video. In case if you are not feeling is with that video, this is where I will try to remove your confusion. To define that, let's go for another example here. So let's say I am working on a project and of course when you work on a project you will be creating some module. So in this case I have two different modules. We have demo and then we have calc. I am now working only on demo. I am not focusing on calc as of now let's focus on demo here. Now inside demo I want to accomplish some task. The way you do that is defining some functions. Now in this I will define a function. I will say def and this is fun one. This is my first function and in this function I will do certain task. I will use some variables. I will assign some values to it and then I will perform some operation on that and at the end let me print from fun one. That's my first function and let me define one more function here. The way you do that is by just coming down here and paste and I will define this function name as fun two and I will say this fun two. Okay so imagine this function had a lot of statements. Now if I try to execute this file if I say run demo of course you will not get any output because we are not calling them right. So the ultimately when you define a function you need to also call them. The way you do that is by saying fun one and then you will say fun two. Okay these are the two statements we are printing here. So it means on this code and you can see we are getting fun one and fun two. The twist is normally when you define function normally when you work on a project if this is your standalone application or standalone code of this is the only file you are going to write in your project. Normally what we do is we define everything in a function because statements should be a part of a function. So even this function calling should be done inside another function will say this is def main. Now this is the standard question of which we all follow because if you are coming from other programming background let's say C C++ Java we do that. So main is a starting point of execution. So generally we define the function name as main and of course main will not be calling itself right. But if I say then demo you can see we are not getting any output because of course you need to call main as well. So at the end you will call main and it will work. So you are calling one function main and main will take it how to execute all the statements and then you can call them right. This is how generally we make a software. So we have a main function from the main function you will call all other functions. So this perfectly makes sense. Let's go back to Calc. Okay now let's say I'm defining a calculator here and then in the Calcuda as well let me define some function. I will say dev sum and this function does something of course it will add to numbers and I will say result one is okay something like that okay. So I'm defining this function and let me also define another function which is let's just subtraction. Okay you can define this function fully if you want but as of now let me just keep it simple so we say sum and we have sub. In fact it should be add right it makes more sense. So we have add and we have sub. Of course to call this function as well I need to say dev and in this dev I will say mean of course to call them in to mean a remain function and from this mean I will call add and from this mean I will call sub and at the end we have to call mean as well otherwise we cannot call them. So from this code you can see we got result one is result two is this is how we define files right. So we got two different modules we got demo and we got Calc and they are working perfectly. Now you want to use Calc in this so when I say function one function one want to use add so when I say from from one I also want to call add function from here. So let's I want to reuse the code right so I want to reuse this add function in this demo that's what we do that's why we define functions. Now in order to reuse that function what we have to say import Calc or maybe you can say from Calc import add so now we are importing that particular function which is add right and you can see we are writing add here. So will this work of course let's try let's run this demos I'm not running Calc now I'm running demo right so the output which I'm expecting is from one and from two and of course we are calling add so it should print result one right that's this is what I'm expecting I'm not expecting result two because I'm not running Calc I'm running demo and in demo we are not using result two the moment I run this demo can you see that we are also getting result two and we are getting result one as well this is we are right we don't want this the reason we are using this demo is we want to print from one we want to print from function two and we also want to print result one because we are calling it we are not calling substrate is printing result two it's because the moment you import a library if you the moment you import a module it will execute all the statements and in that you can see we have main it is calling main right and main calls all the functions we don't want that right so we have to say hey I want to call main only when I'm executing this particular file as a standalone program so I want to call main only when I call this as a standalone program I don't want to call main when I'm running it from another file so here I'm just concerned about add I'm not concerned about main so in that case because if I print a statement here I will say in Calc main and if I go back to demo so I'm not calling main from here and you can say it still says in Calc main why you need to call a main of calc that's the question right because we are running demo this is my first code I'm using calc as a module in that case what you will do is you will call main only when I'm running calc as a code so you will say if now how do you know that this is the code I'm running so whenever you go down a code and whenever you execute a code there's a variable call as name which will hold the name so if this is the code which I'm running at the start the name variable will have main as a value so let me repeat if this is the file which I'm running this name variable will have main as a value otherwise this name variable will have the module name example let me print inside add let me also print I will say result 1 is and let me print the name variable let's see what happens so I'm printing a name variable okay let me go back to let me just run this calc first I will say right click and run you can see it says result 1 is main okay so that means this code is running itself right this is your standalone code the moment you use calc as a module in some other code and now if you're on this you can see it says run result 1 is calc okay it's because the name now is printing the module name so that's important that's the importance of this name and you can also see when you've done this code we are not getting result 2 because now you are saying if the name is main then only call main otherwise other code will use this as a module I hope you are getting my point here so I try my best here so let me know in the comment section if you still have any questions I will try to you know maybe because the another code in future videos will be using this a lot maybe it will clear your confusion there itself so that's it everyone I hope you enjoy this it let me know in the comment section that's it bye bye","defining, variable called, function statements, function main, function functions, fun function, use variables, variables assign, reuse function, function calling, variable module, calls functions, function fun, functions define, define functions","Recommended Tasks:
- Compare two objects using their attributes.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate instance, class, and static variables.
- Demonstrate use of a global variable inside a function.
- Import a file and observe how __name__ behaves differently.
- Use lambda to double a number and to filter even numbers from a list.
- Write a program using multiple variables and perform operations on them."
48-Python-Tutorial-for-Beginners-Object-Oriented-Programming-Introduction.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\054-48-Python-Tutorial-for-Beginners-Object-Oriented-Programming-Introduction.mp4," Welcome back, aliens, my name is Darwin Reddy and let's continue with the series on Python. Now, till this point, we have seen the language fundamentals of Python, right? We have seen variables, how to pass a variable to a function. We have seen function, right? How to define function, how to call a function. And then we moved towards module and now we know how to get different files. Now, once we have talked about the language fundamentals, let's move towards the concepts. Now, one of the concepts which is very important is ops, which is object-oriented programming. Now, one of the unique selling point of Python, you know, why Python is so famous because of this thing. Python supports all different programming paradigm, you know. It supports functional programming, it supports object-oriented programming, and it also works with procedural-oriented programming. Now, we have talked about procedural, right? What is precision now is, when you work with Python, we define functions, right? We call a function from a function. So if you want to create a software, you will break down your project into small, small part, and those modules, small modules will be functions. Now, Python is also functional programming. So, functional programming basically means if you can achieve a certain task, implementing functions as a mathematical functions where you will not manipulate a data, which is instead of changing data, you will still accomplish a task. One of the ways you can pass a function to a function, you know, we have seen this. I'm going to be have a very deep concept of functional programming. We'll talk about that later. By time being, procedures and functions, which is something we have already done with, example, lambdas. Now, we are going for a concept of opt. Now, which is very famous in the industry, you know. So if you are working on big software, enterprise projects, you need to think everything in a form of objects. Now, you might be thinking why objects? We would have it with functions, right? Now, see, even from start itself, I'm talking about objects, right? Maybe in some programming, I said, okay, this is an object, in teachers' object. But then we were skipping that part. What is object and why it's so important? See, ultimately, if you talk about programming world, what we do is we try to solve a real world issue with the help of virtual world solution, right? This example programming, software, everything is virtual world. Now, in real world, we all use objects. Right? Example, if I want to record this video, I need a camera. Right? If I want to call someone, I need a phone. If you want to type a code, you need a laptop, right? So for everything, you need an object. So in real world, everything is object. In fact, persons, right? Example, if I have a company, if I want some work to be done, of course, I need employees, right? And for me, every employee is an object, right? So an employee object is using a laptop object. So some employee object needs an AC object, right? That's how things work. Everything is an object, even human, we treat them as objects. Now, what object will have? Object will have two things. Every object will have certain attributes, and every object will have certain behavior. Now, when I say attribute, you can imagine them as data, or you can say properties. Example, my height, it's one attribute. My age is one attribute. My name is one attribute. The company I work for is one attribute. Right? Everything is those things are attribute. And then comes my behavior. I'm talking and walking and dancing. All these are behavior, right? So our actions defines our behavior. And then we have attributes, which we know. In other times, you can say, as an object, I know something, as an object, I do something, right? So I do something based on something, which I know, right? So this is object. Object will have something where you can store data, and object will have some behavior. Now, this data, which we normally use, those are variables, right? We have seen variables. So if you want to store something in object, we need to define variables. If you want to define the behavior, we need to use methods. Oh, that's something new now. What is method? We have done with functions, right? So functions in object-oriented programming are called as methods. Right? So simple. We have done all those stuff. The only change we have now is we need to think in an object term. See, object-oriented programming is not just about different syntax. It's also about the way you think. So now, if you want to achieve anything in programming, you need to think about objects. So the moment you say you have a complex problem, think about the object, think about multiple objects, and how can you connect them? Because in the hopes we have so many concepts. One of the concepts is object, which we're going to see now. We have a concept of classes. We have a concept of encapsulation, abstraction, polymorphism. I know weird words, right? But don't worry, we will be covering everything in detail in the subsequent tutorials. So there's one thing which is important discuss here about classes, because we have an object and we have a concept of class. It doesn't matter which language you work on, maybe Java, C++ or C-shop, whichever whatever language which uses this concept, you know, we always use this thing which is object and class together. But why? Why they are so important? Of course, objects are important because whatever you want to do can be done with the help of object. But why class is important? Now, think about this. When you see an object in real world example, this camera, your fan, or the clock, all these things are manufactured, right? So in some factory, they have been manufactured. Or maybe you can talk about a phone. Now, look at this phone. This is Motorola G3, okay? Now, it's not the only phone available here, right? A lot of people they have this phone. So that means we don't have one object of Moto G3. We have thousands or millions of objects. I'm using any number here. So imagine we have five million of this type of phones, which is Moto G3. Now, of course, someone must have designed it, right? And all these phones have been manufactured somewhere. Maybe you can say all these phones are made in China, okay? So we have a factory in China who is producing all this phone. But then Motorola says it is smartphone, right? Of course, we are now, we don't say this is a China phone. We say this is a Motorola phone. Or we don't say, let's say the manufacturing is an India, we don't say it's a Indian phone. We say it's a Motorola phone. Why? Because manufacturing is not important. You can manufacture stuff anywhere. What is important is where it has been designed, okay? So this is designed by Motorola. But even if you talk about this phone, this has been designed once, and then they have manufactured multiple times. And that design in programming or in oops, we say class. So in that class, you will write a design of the object. Imagine there's some factory in your machine who will create these objects, okay? So you have to provide a design so that you will get the object. So that means class is a design and objects, they are real stuff, right? They are real entities, you can say. Or you can use another term called as instance. So you can imagine this is an instance of a class. That's awesome, right? So point to remember, class is a design or you can call them as blueprint. So if you have a class, you can manufacture thousands of billions of devices. So that's about class and object. But how exactly we do that in programming? That will say in the next video. I hope you are enjoying this video. Let me know in the comments section. And do subscribe for further videos. So, bye.","python functional, example programming, programming software, python right, python famous, programming basically, programming paradigm, functions python, python know, object oriented, python till, python supports, oriented programming, fundamentals python, python define","Recommended Tasks:
- Ask the user for their name and age, then print a greeting.
- Combine two lists using zip() and convert them to a dictionary.
- Compute the factorial of a number using a loop.
- Create a class Car with attributes and a method to display info.
- Create a script that demonstrates Pythonâ€™s print() function and basic syntax.
- Create a script with an intentional error and use PyCharm to debug it.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create variables for name, age, and marks. Print them all with labels.
- Implement a linear search to find a number in a list.
- Practice positional, keyword, default, and variable-length arguments.
- Print a right-angle triangle using stars *.
- Print the elements of a list using a for loop.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the help() function to explore any built-in Python function.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write methods with the same name in different classes."
49-Python-Tutorial-for-Beginners-Class-and-Object.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\055-49-Python-Tutorial-for-Beginners-Class-and-Object.mp4," Welcome back to Alien, my name is Davin Reddy and let's continue with the cities on Python. In the last video we have talked about the theory of objects and class. So of course before creating an object you need to create a class because class is a design for the object and if you don't have a design how can you build something. In fact even before building a tower you need to create a blueprint of it and that's the same case here so if you want an object you need to create a class. So what I'm talking about is you know let's say I want to work with computers so I'm a person I want to work with a computer so of course I want an object of a computer right. So let's say I'm a programmer and of course I want to work with a computer so I will say comp 1 so this is my computer but see the thing is till this point we have work with integers we have work with float, string now all those are the inbuilt types right. We don't have any type as computer so of course we need to create our own type so we have to create our own class for it. So if you want to use a computer you need to define a class here so how do we define a class. Now where we define a function is by saying def and function name the way we define a class is using a class keyword so we have to say class and this class will of course have a name in this case I will use a name as computer. Okay now this is how you define a class you have to specify a colon. But after colon this is your suite right so this is where you will mention your stuff. Now what stuff we can put in a class. Two things. The first thing is the attributes the second one is the behavior. Oh now when you say attribute it is your variables okay the way you create variables and the next thing we'll be having here is behavior which is methods or what is methods functions. You know the functions which we are using from a long time but here we call them as methods. So next time when you are calling a function but that function is a part of a class. So we are calling them as functions you have to say methods right. Okay now let's define some methods here. Now what method I am talking about let me get a method here I will say def I will say config because every machine has a configuration right so I will say config we got that self keyword that that's weird really self because here I am not typing it okay so I mean the moment I say bracket it says self we'll talk about that self later but time been let's keep it there. You can imagine we don't have it in self okay for time being imagine we don't have anything like self. Okay and here we'll say we got a computer class and then we got a config method or you can say function but try to move from that function term to method term right so we got a method here which is config and here I am printing the config of this machine and I want to say hey this is i5 machine with 16 GB RAM and it has one data byte harder now this is very common config now which we find nowadays right and that's what I am doing here. So we got a class computer we got a method in that example here I am saying comp 1 is the object of computer but we cannot simply do that right we cannot simply say comp 1 because no one will understand what this comp 1 is example if I say this is a variable a what is a type of this variable right now since in Python we don't have to statically mention the type of it so what we can do is when you say a equal to 5 now the type of a becomes integer right if I say a is 5.5 the type of a becomes float if I assign a value of string type if I say 8 even if that age is number we are putting that in single code right that becomes a string what about comp 1 comp 1 here don't have a type we have to mention hey this comp 1 is an object of computer in that case it will say equal to computer and you have to give this round brackets now if you are coming from another you know from different programming pattern like Java C sharp we have a concept of constructor right so this is a constructor there so this will give you the object of computer now how do I know that if you remember in one of the video we have talked about a type function right so you can use type function here so I will say print I will define type print the type of comp 1 let's see what happens what it gives you so if I want to say this is a class okay now we have different key word class and this belongs to a computer that's important okay so it gives you the module name the module name is main because we are running this code from here and then we have a class for this computer now if you remember we when we work with string as well string gives the same thing so if I print the type of a it also say the same thing can you see that it says class str right so we are using this concept from a long time but this is where we are defining it now so string str is also a class the same way computer is a class the difference is str is an in-built class computer is our class okay that's how you define it so you say class computer and then we have a depth config in fact there's one more thing remember when we worked with integers we have also say that integers are also object that's right here I will say x equal to 9 and let you print the type of x can you see that when I print the type of x it says class 8 so even this integer this x is an object of integer now right so everything is object in Python right so there are some in-built objects and there are some objects which we create and the way you create your own class is by saying class computer whatever class name make sure that you don't use in-built class name because it will give you error right or maybe you might face some bugs so we have so in a class we are defining a function config and then oh not function method of what config and then we are printing just a statement now question arise how will you call it so let me remove this all this extra stuff which we are doing so we got a class we got the object I want to call that config now what you think well how will you do it so normally when you have a function you you mention the function name right here in this case it is config but you are getting an error why error so if I go back here it says unresolved reference or that's weird what is giving you a result because of course normally till this point we were mentioning the function as it is right open but now we have written that function or a method inside a class so in order to access that we have to mention the class name and the class name here is computer so we have to say computer dot config important so steps remove the steps you have to mention the computer class which is class name and then you have to say config so let me repeat if you want to use a method we have to mention a class name first which is I mean wait belongs to computer and then you have to mention config and if I run this code oh we got an error but why so think about this one class can have multiple objects right one object two object five objects maybe billions of objects right in this case we are using only one object which is comp one the thing is this config function or a method will change its behavior based on the object right because different object have a different behavior because depend upon what they know they have a different behavior see in this case I'm not depending on any data right but maybe there's a chance that this config will depend upon some data and every object will have its own data right again we'll talk about that later but every object is different right if I'm calling config for which object I'm doing that so if I say hey work but who mama I'm supposed to say walk so I have to mention here we walk hey Mukesh walk hey kiddin walk except I have to mention the names as well right in the same way when I say computer config you have to also mention for which object you're talking about and I'm talking about comp one so I'm saying hey I want the config for comp one now luckily we have only one object here so there's no confusion but let's say if you have thousands of objects you have to mention the object name as well so we are doing comp one here so if I run this code now oh it works you can see that we got the output so we are calling config and we are passing comp one and this comp one is a parameter right just an argument so when you call config you're passing this comp one as the argument and it is going in self so what is this self self is the object which you're passing again this thing will get more clear once you see for the videos right so this is a complex concept if you're learning oops for the first time but step by step everything will go inside your brain okay so this is the first layer again in the next video we'll talk about some more layers to it we'll add more layers and then I will make sure that you get everything about it okay let's create some more objects okay so I will say comp 2 is equal to computer right so we got comp 1 we got comp 2 so in total we have two objects which is comp 1 and comp 2 but we have only one class which is computer if I want to call config for comp 2 what you will do you will say computer dot config and this time you're saying hey I want to call config for comp 2 so in the first instance I'm saying Mukesh walk right or I will say hey human walk in black and I'm passing Mukesh I will say hey human walk in black and I'm passing the V right in the same way here I'm saying hey computer show me a conjugation and I'm talking about comp 1 hey computer I want your conjugation for comp 2 so if on this code you can see we are getting same data because at this point we are not changing data for different objects we can do that later so this one way right if you want to call config we have another way if you think about this this looks good right this looks clean because we are saying hey config method belongs to computer and then we have to pass the object in which is comp 1 but there is one more way what you can do is you can mention comp 1 dot config now in this case you are using the object itself to call the function so you're saying comp 1 dot config but Koshyar is we are not passing it right example it's due for comp 2 as well I will say comp 2 dot config and you can see this time I'm not passing anything inside config and still it works you can see the output it works we got four times the same data because the first two is because of this lines and the second next two is because of this line right but why is working it's because this is another behavior of it so when you say comp 1 dot config you are calling config see we are specifying of which class it is right so comp 1 belongs to computer so now we know config belongs to computer the moment you say comp 1 dot config when you're calling it behind the scene this config will take comp 1 as a parameter so behind the scene config will take that comp 1 as a argument and it will pass that in self okay so in most of the code you will see this type of syntax not this one but I have done this just to explain you how this syntax link like okay so how this exactly works but normally we use this syntax the second one and that's why whatever we have done now example if I work with a variable of in size if I say a equal to 5 and if I say a dot so whatever function we use the example I want to know the bit length now in this thing you can see if I say control space you know you can actually see the documentation by clicking on this control and click on the function name so press control and click on the function name you can see it takes to the function it says bit length self so as a definition it is accepting self but when you're passing it when you're calling bit length we are not passing it so this a is an object right it goes as a parameter so self is the object which you're passing we'll discuss more about that once we start with variables and then attributes all the stuff by time when this is how you create a class and that's you create an object I hope this session was bit helpful so let me know in the comment section do subscribe for further videos that's it everyone bye bye","type computer, create type, using class, objects create, design object, concept constructor, objects comp, class design, create class, create objects, built objects, object computer, class computer, object python, computer class","Recommended Tasks:
- Combine two lists using zip() and convert them to a dictionary.
- Compare two objects using their attributes.
- Compute the factorial of a number using a loop.
- Create a class within a class and access its members.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create variables for name, age, and marks. Print them all with labels.
- Implement a linear search to find a number in a list.
- Instantiate objects of a class and call their methods.
- Practice positional, keyword, default, and variable-length arguments.
- Print the elements of a list using a for loop.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break)."
50-Python-Tutorial-for-Beginners-__init__method.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\056-50-Python-Tutorial-for-Beginners-__init__method.mp4," Welcome back to Alien Spanemys of Widwetting and let's continue with the series on Python. Now in the last video we have talked about Oops Concept, right? We have seen what is Object and a class. Let's explore it more. Now I remember when we talked about objects, Object will be having two stuff, right? One is it will be having some attributes and it will also have a behavior. Now when you say attributes, those are variables, right? We can create variables. And the behavior is your methods and then methods are almost same as functions. But in Oops we call them as methods, right? Now here we have to work with methods, right? We have not worked with variables here. So what I will do is just demonstrate that. Let me just remove this thing here because if we know that we can call config using the object itself or we can call it with the help of class by passing the object. Now syntactically we normally go for the second one which is calling the method from the object. It makes much more sense, right? So I will remove that part and so once we got the objects, let's remove this a as well just to clean it up. So here. Now what I will do is I want to have certain variables. Now when I say variables, what I want to do is I want to have two variables. One which defines the type of CPU I'm working with and the amount of RAM I have. Example if you talk about any computer, this store is very important, right? The CPU which you are using and RAM, maybe 8GB RAM or 16GB RAM. In terms of CPU, we have let's say I3, I5, I7 or maybe some AMD series. Okay, we have different parameters as well but just to keep it simple, let's only focus on two things, CPU and RAM capacity. Now when you say we have two variables, where do we find that? So we can use a special method which is available in a class. Now when I say special, you know, right? So the moment you say special, we have talked about special variable which is underscored name in the same way we have special method which is in it. And when I say special, it will be having underscores as well. So let's define that. So we'll say deaf underscore underscore in it. You can see that we are getting suggestions as well. And the moment I say enter, you can see we have the function name or the method name as in it and we are passing self. Now see, self is not something which I'm typing there is coming automatically. So it's compulsory to have those argument, okay, which is self. And in here, we can do something. Normally, we use init to initialize the variables, okay? And that's what the name itself init, initialize, right? Now if you are coming from C, C++ or Java background, we use constructor, right? So you can imagine this is our constructor, but then it is init method. The advantage here is, now, see, if you want to work with config, you are supposed to call config, okay? So it's compulsory for you to call config. Otherwise, it will not get executed. The idea behind init is it will be getting called automatically. Example, if I go back here and let's say I want to print something and I will print in it. Okay, I have defined a function called init and not calling it, okay? So anywhere in the code, I'm not calling init. I'm calling config because I want to execute it. The moment I run this code, you can see it prints in init and that to it prints two times. Now, why two times? Because for every object, it will get called once. So you can see in total, I'm reading two objects. One is calm one, one is second is calm two. So we got two objects and it will call init two times. So this is the object creation. So when you say computer bracket, it will instantiate. It will call init for you. Now I want to pass some arguments. Okay? I want to pass CPU and RAM. So in the constructor itself, you can pass that. So in the computer bracket itself, you can pass it. So I can say I have a CPU here, which is let's say I5 and the amount of RAM we have is 16 GB. The second computer we have, let's say, prison three and the amount of RAM we have, let's say, 8 GB. So we have two computers with two different CPUs, right? And now, how to accept these values? So of course, you have to pass this value here, right? And so you have to say self comma, you have to pass two values. You have to accept these two values. So you have to say CPU, RAM. Okay? That's how you accept it. Now I know your question. Your question is, we are passing two parameters, right? Now we are passing two arguments. One is CPU and second is RAM. And we are accepting the arguments here. So the thing is, you are actually passing three arguments here. Remember, we are also passing comp one. The moment you say computer in the bracket, you are passing that comp one by default. The same thing happened with config, right? When we call config, we are not passing self or the object itself, but it gets passed automatically. The same way. And when you say computer by passing two parameters, you're actually passing three. The first one is the object itself, the second one, the value, the first value here, and then RAM. Okay, that makes sense. But will it work? So the thing is, every object need to have a value because this is just an argument now. So CPU and RAM is just an argument. If you want it to be a part of your object, you need to say, because see, we have to assign this value to an object, right? And the object here is self, right? So you have to say self dot. That's right. So this comp one, this is our object, right? So we have to say self dot CPU is equal to CPU. Again, there is no compulsion that you should be having same name. You can have a different name. That's fine. So you will say self dot RAM is equal to RAM. So whatever value you're passing here, which is i5 goes to the CPU as an argument, it will be assigned to the object with itself. So the self we can imagine now. So in the background, you can see we have two objects here. So in total, we got two objects. Each object will have its own variables, okay? It will have its own CPU. It will have its own RAM. And then whatever value you pass in the arguments, it will be assigned to those objects, okay? So we have two objects, two different values. And now in the config, instead of printing this stuff, I will say CPU, RAM. That's what we do. Oh, we got an error. What's wrong here? The thing is, this CPU is not a local variable, right? This CPU belongs to an object. And how do we refer to object? It's very simple. You have to use self, right? That's why you're passing it. So you have to say self dot CPU. And here as well, you have to say self dot RAM. And that's the idea behind passing this self, right? We are passing self so that you can use it to fetch the values. So you can imagine your methods and your data works together. And we have a name for this concept. Again, we'll talk about that name later, it's a surprise. But we are binding our data with every method. So one object will have its own methods and its own variables, right? So they are working together. And now let's run this code and let's see what happens. For the moment you run this code, you can say, config is i516 and config is reason 3, 8. So that's the idea. That's how you create a variable. So every object will have its own values. That's amazing. So that's it from this video. I hope you enjoyed this video. Let me know in the comments section because we had worked with data. And we have also seen this init method. We'll talk more about it. In fact, we'll be having a long series only on oops. So that may be in the comments section if you have any questions and do subscribe to the channel if you have not done yet. So that's everyone. Bye bye.","assigned objects, methods functions, self object, attributes behavior, object simple, object self, attributes variables, objects init, variable object, object creation, oops concept, methods variables, object syntactically, oops methods, method object","Recommended Tasks:
- Compare two objects using their attributes.
- Demonstrate instance, class, and static variables.
- Use __init__() to initialize object properties."
51-Python-Tutorial-for-Beginners-Constructor-Self-and-Comparing-Objects.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\057-51-Python-Tutorial-for-Beginners-Constructor-Self-and-Comparing-Objects.mp4," Welcome back aliens, my name is Durbin Reddy and let's continue with the series on Python. In the last video we have talked about oops concept, we have talked about objects, we have talked about classes and then somewhere we have talked about in it. In this video we will focus on two concepts. One is constructor and self. But hold on, we have seen self before. But let's try to expand more of it. Because self is something which is very easy to understand. At the same time it is bit confusing. So we will try to get that. And then we also talk about constructor. Now in the last video we have talked about in it. Now in it is actually a constructor but why this was constructor will see that here and why this was so important. So what we will do is let's remove this thing and let's see a computer class again. Let's go back to computer class. So this is a class and of course every class will have an object. As we mentioned we have a concept of a design. So this computer class is a design and then we need to create an object of it. So what I will do is I will say C1 is equal to computer. Now this computer here is an object. I mean this C1 is an object or you can say C1 is referring to the object. So what happens in your system we have a special memory called as heap memory. Now inside this heap memory you will get all the objects. Now the moment you say you want an object now if you remember we have talked about integers string everything is object in Python right. Now in this scenario here this object will take some space in your heap memory. Now every space will have some address right. We have talked about ID function remember. So we can use an ID function here and we can print the value of C1 so we can print the address. So of course this object is created somewhere and we need to print the address as well. And the way you can print the addresses by saying print I want to print the address of C1 let's do that or we are getting an error. Now if you remember we have talked about this stuff so I am keeping this class empty right we cannot do that. So let's write pass because I am not mentioned anything in the class here. So let's write pass let's run this code now and you can see we got the output as 155 with the number right. Now this is an address okay so this is the address of that memory. Now what happens if I create another object. Let's say if I say C2 equal to computer now we are getting another object right. So in total we got two objects. So will it take different space or will it be accommodated in the same place. Of course we have talked about this before when we talked about integers allocation. If I run this code you can see we got different addresses and again every time we run this code you will get different address right because every time we run this code it will create a new object for you. So this time we got two new objects. Now if I run this again we will get two different objects not the same object again right because this new execution. So point remember is every time you create the object it will take two different spaces. Now first you have to realize how much space it will take maybe 1mb maybe 1kb maybe 5kb so who will decide and who will allocate the memory. Now first of all the size of the object is depend upon number of variables we have or the attributes remember if this class has five variables of different type it depend upon how much data you pass it will change the size of it okay. So the size of the object is depend upon the size of the variables and number of variables. But who is responsible to assign that memory or who is responsible to calculate the memory and that is your constructor. Now this thing here which is computer brackets this is your constructor right. So whenever you write a constructor it will call the init method for you. Of course you do not have to call it explicitly it will be called internally. Now let me define some variables here how do we create a variables right. Now how do we define a variable for the object. Now in this case if you want to define a variable we have one choice which you can define a function which is init again we have seen that so this is the init function right. Now it is a self but as of now we will not talk about self we will continue here and I will use two variables again we have talked about this but let me just do it once again. I will just self dot h I want to have two attributes one is name I will say name is Navin and h so it is the h is equal to 28. So we got two things we got name and we got h. Now both the object will have the same values right so you can imagine we have two objects and both the object have the same value. If I want to change it if I want to change the value of one object the way you can do that is in fact instead of printing ID's I want to change it now because of course while ID's will print different now we know that. So we will say c1 dot I want to print name of c1 and I want to print the name of c2 as well. So what will happen will it print the same data or different data that's a question. So let's run this code and you can see they are printing Navin of course right because the moment you create the object both will have the same value because that is what by default you are getting. If you want to assign your own values you have two choice here what we can do is before printing it we can change the value for c1 we can say c1 dot name is equal to rashi. So we are changing the name right and now if I done this code you can see we got rashi and we got Navin. So of course c1 is different object c2 is different object and we got different names. So that perfectly makes sense we can change the age of c1 we can say c1 dot age is less at 12 we got rashi with age 12 and of course we are not printing age here but we can do that. So we can change the value of one object from different objects and of course there are two different entities. So remember this we got two different objects and both the objects will have different variables okay you can assign the values there you can change it your wish. Now I want to know why do we need this self. So what I will do is just to explain that let me take one more battery I will say update okay so I am changing the value of something and the moment I say update I want to change age I will assign a new age and we will say age is less at 20. So we are changing the age now right so we got a method which will change the age totally. Now I want to call update now how do you call update with the album of class name or with the help of object name. Let's try with objects I will say c1 dot update. Now see we have two different objects right so what is program execution right so execution will start from here you got the object you got the object you are changing the names and everything is fine. The moment you say c1 dot update your pointer which is your focus will move towards this update function of update method so it is executing it right. Update will say okay I am getting called I belong to a class computer my job is to do something my job is to change the value of age but hold on we got two objects which value you want to change right because we are calling update and we are not mentioning which object I am talking about because when you call this update we have not mentioned is it c1 or c2 we have mentioned that by calling it so we are saying c1 dot update but we are not passing anything in the bracket. So when you are calling it when you are calling update how your pointer will know which object I am talking about is it the c1 age or is it the c2 age and that's where you need to use self. So this self is a pointer or you can say self is directing to c1 or c2 so we have two objects this self will direct either one c1 or c2 based on what you are calling so if you are saying c1 dot update then in the bracket it is passing c1 so self will be assigned to c1 okay so that's the importance of that self it is very important because it is referring to the object if you have 10 objects and if you want to refer to one object you can use self so it is the current instance you can say even if you have 10 objects at one point you are working with the other one object that is self I hope that makes sense so that is self right so we have talked about constructor and self here let me show you one more thing what if I want to compare two objects here okay so I want to compare let's say we have c1, c2 and both have same names right so they have same name and they have same age but let's say I want to compare the age so I will say if c1 is equal to c2 so I want to compare two people based on their age if their age is same I want to print they are same so I would say c1 is equal to c2 print they are the same so let's do this I want to check if both the objects are same then I will print they are same but then I don't want to compare the object address right I want to compare their values I want to compare the age name doesn't matter if name is different what is what should be same is age now in this case if you cannot simply say c1 equal to c2 because we don't know your Python don't know how to compare so in this case what you will do is you will use a separate function to do that I will say hey I want to compare c1 with c2 so I will say c1 compare and you can pass c2 because we are comparing it right again this compare is not an inbuilt function so if I click on this you can see it says cannot find the relation to go to something the thing is compare is not an inbuilt method we have so in order to work with compare we have to define your function you have to say compare and in this compare of course you have to pass self and then you have to also pass one more object which is of c2 right so we are comparing to objects right so we have to pass self so what is self here so this c1 becomes self and c2 becomes c2 again you can change in the name you see your choice you can say other right so you are comparing self with other so c1 becomes self and c2 becomes other now I see when become self is because c1 is calling it so c1 is comparing itself with c2 you can reverse it you can say c2 dot compare c1 in that case c2 becomes self and c1 becomes other right and now once you have this self and other you can compare if self dot h is equal to equal to other dot h you will return true else return false in fact you could have done that in one line but just to make it look good I am doing this and now you can compare it right so they don't have same age because we are changing it after update let's remove the update part here they have the same age right let's run this demo and you can see oh we got an error we forgot to put a colon there my bad let's run this code and so you can see just printing they are same so they are same right now what if they have different age so what I will do is once once I got c1 I will change this age of c1 I will say age of c1 is 30 anyway we are not using update here and we can say run demo and you can say just not printing they are same we should print the as well as well so that we'll see is it different let's print they are different and let's run this code can see that we got they are different now since that age is different we are getting that difference see names are same notice different is age so we can compare two objects by defining our own function which is comparing this case or my turn in this case but remember this thing compact takes two parameters the first one who is calling it and second one home to compare right so here in this case we are saying c1 dot compare with c2 so c1 becomes self c2 becomes other this is very important I know it is bit confusing at the start but the moment you start working on it it becomes very easy so that's it on this video where we have talked about compare we have talked about self we have talked about constructor so let me know if you have any question in the comment section and to subscribe for other videos everyone bye bye","class computer, talked constructor, class design, memory constructor, constructor init, talk constructor, objects defining, write constructor, class object, constructor constructor, objects self, object python, constructor important, object self, concepts constructor","Recommended Tasks:
- Combine two lists using zip() and convert them to a dictionary.
- Compare two objects using their attributes.
- Compute the factorial of a number using a loop.
- Create a simple decorator that logs the execution time of a function.
- Create arrays using np.array, np.zeros, and np.arange.
- Create variables for name, age, and marks. Print them all with labels.
- Demonstrate instance, class, and static variables.
- Implement a linear search to find a number in a list.
- Import a file and observe how __name__ behaves differently.
- Instantiate objects of a class and call their methods.
- Practice positional, keyword, default, and variable-length arguments.
- Print the elements of a list using a for loop.
- Swap two variables with and without using a third variable.
- Take array values from user input and search for a specific number.
- Use __init__() to initialize object properties.
- Use for-else to search for an item in a list. Print a message if not found.
- Use the math module to calculate square root, factorial, and power of numbers.
- Write a function that takes a name and prints a welcome message.
- Write a loop that skips even numbers (using continue) and stops at 10 (using break).
- Write a program using multiple variables and perform operations on them."
52-Python-Tutorial-for-Beginners-Types-of-Variables.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\058-52-Python-Tutorial-for-Beginners-Types-of-Variables.mp4," Welcome back to Aliens, my name is Avindreddy and let's make a video of the series on Python. Now we know how to work with class and object, right? And we have also seen how can you create a variable in an object? Of course right, every object should know something. But when it comes to variable, in oops, we have two different types of variable. The first one is an instance variable and the second one is a class variable. Now you can call them as static variables. What is the difference between them? Now think about this. Let me just remove this code. Okay, whatever we have done till now. So let me just clean this up. Okay, so we'll start from a plain slate. So here, let's go with another very example. Let's take a class, call us a card. Okay, if we all love cards, right? So let's say we have a class card and of course every card will have different variables, right? Of course, you can mention the company name. You can mention the type of engineer working with and the mileage, what it gives you. So we have different variables. Okay, so what do we do? If I want to use those variables here, we need to use a function in it. So you will say in it function and in this, you can define those variables, right? I can say self dot mileage and I will say mileage is let's say 10 and then I will say the company. So company would be let's say BMW and then company doesn't matter. So we have these two values, right? Now these two variables are called as instance variables. So we talk about mileage and calm. These are instance. Now why is our instance is because as your card changes, as the object changes, this value also changes by default the values 10 and BMW, but you can change it, right? Example, we have done that before just to give you a glimpse. I will say the first one is C1 and this is car. That's my first object. I got C2, which is again a car that is we got C1, C2. Now we got two different objects and both the object will have different variables, right? Different area for the variables. And now if I print the value, so I will say C dot calm and I also want to print C1 dot mileage. So let's say I want to print both for the both different variables. So you can see we got C1 calm, C1 mileage, C2 calm, C2 mileage, that's perfect. And now for this code, of course it will print same values because they are same. But can we change it? Yes, we can. So I will say if I change for C1, so let's say C1 dot mileage. So let's say C1 mileage changes from 10 to let's say 8. This is what happens, you know, with some cars and let's run this code, you can see the value is changing now. So of course, both the objects are different and they will have different values. But what if I want to create a variable which is common for all the objects? Of course, these variables which are instance variable, they are different for different objects. Right? If you change one object, it will not affect other objects. What if you want to have a variable which will change it will affect all other objects? Example, the number of wheels in a car is 4, right? By default is 4, right? But what if in future we got a new concept and they're saying, hey, now this time we will have 5 tires or 5 wheels. I don't know why we have 5 wheels, but let's imagine. In this case, what you will do is you will define a variable outside in it. Okay, because if you create or if you define the variable inside in it, it becomes an instance variable. If you define a variable outside in it and inside a class, of course, it becomes a class variable. Let's say, let's say wheels. So let's say wheels are by default, four, of course, will be four, right? And if I print the wheels as well, now how do you print wheels? The way you can print is very simple. You can say C1 dot wheels and here as well as say C2 dot wheels. And let's run this code now and you can see we got the output, we got four and four. So if you want to access wheels, you can use say C1 dot wheels and C2 dot wheels. See, instead of using the object name, we can also use class name because see if you talk about mill and calm, it is specific to the object, right? But that's not the case with wheels. Wheels is common to all the objects. So every object can share the same value of it. So we can use object name or we can use class name both works. So you're getting value for it, right? What if you want to change the value of it? If you want to change a value, you can come here and you can change the value. See what happens, you know, in your memory, you have different namespace. Now what is namespace? The place where you create an object or the variables that was namespace. So we have two double namespace. One is class namespace, where you will store all the class variables and then we have an instance namespace where you will create all the instance variable. So these variables, which is mill and calm, they are instance, right? So they will belong to instance namespace. This wheel belongs to class namespace, right? So if you want to work with wheels, if you want to modify it, you have to use a class name. You have to say card dot wheels and you can assign the value to five. Now the moment you change the value for wheels, it will affect all the objects, right? Because they are shared. So this wheel is shared between all the objects and knife on this code. You can see the output is five and five. So that's your class variable. So the point to remember is we have two other variables, instance variables and class variables, or in fact class variables are also called as study variables. So let's talk this video. I hope you enjoyed that. Leave me in the comments section if you have any more questions. And in the next video, we'll talk about different types of methods. So stay tuned. That's it, everyone. Bye bye.","types variable, variable variables, variable define, course variables, variables talk, class object, define variables, instance variable, variable static, class variable, variable instance, object variables, instance variables, static variables, class variables","Recommended Tasks:
- Compare two objects using their attributes.
- Create a class within a class and access its members.
- Demonstrate instance, class, and static variables."
53-Python-Tutorial-for-Beginners-Types-of-Methods.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\059-53-Python-Tutorial-for-Beginners-Types-of-Methods.mp4," Welcome back, Aliens. My name is Evan Ready and let's continue with the series on Python. Now till this point we have talked about different types of variables. We have seen instance, variable and a class variable. We can call them as static variables. Now in this video we will talk about methods and different types of methods. Now we have seen that when we talk about objects, objects will have two things. The first one we will have is variables and second one is methods. Now we are able to store data and methods for the behavior. So if you want to perform some operation, that's where methods comes into picture. As human as well we know something and we do something. So those are your variables and methods. Now here when you talk about methods, we have different types of methods. Now basically we have three types of methods. The first one is instance method. The second one we have is class method and then we have static method. Hold on. When you talk about variables, we only have two. Because class and static behavior same way, invariables. But hold on. In variables we have the same thing. In variables we have class variables and static variables, which are same. That's not the case with methods. So class methods and static methods are different in methods. Okay, so let's get started. So let's understand this concept. We'll take an example. So let's take a class here and we'll link this class as student. So in this student class we'll be having multiple variables. Now of course when we talk about student we have names, we have role number and then we have marks. This point let me only focus on marks. So what I will do is let me create a function, which is your init function because I want to declare some variables. So it says self. Now I want to go for three variables here. One is marks one and marks one. I want to pass this value from the user. Of course you can define your own values here, but I want to pass the value when I create the object. And the way you do that is by saying self comma, you will pass m1, m2, m3. I want to pass three variables and m1 value will be assigned to the object by saying self.m1 will go to same thing for m2, m2 and the same thing for m3. So we got m1, m2 and m3. Now we got three variables. I want to create some objects here. Okay, let's create objects for this. I will go back here. So let's create the object here. I will say s1 is equal to and as usual we can create multiple objects. But time it will go for s1 equal to I will say student. That's our first object and let me get one more object will say s2 equal to student. So basically we got two objects here. One is s1 and s2. I also want to pass a value to it because we are not passing it. So let me pass any value. I'll random value. I'm not actually saying what I'm typing here. But then we got three values there. And here as well I will go for random value. Now it doesn't make any sense to see that. So we got this value. So first we got 34, 67 and 32 seconds. So we got 87, 32 and 12. Now what I'll do is of course this variable here m1, m2 and m3. Those are instance variables. We have talked about that. At this point we have not created any methods. Let me just do that. In fact before going for methods let me also create a variable. A static variable this time. And the way you create a static or a class variable just by defining or declaring the variable outside the constructor. So here I will say I have a variable and we'll name this variable as school. Because of course a student belongs to a school. Where do I call it? At this point all these students belong to the same school which is the disco. Imagine if you have the disco university will be having a school. So we got the school them as well. So you can print those values by simply saying in fact you can print those values here as well. You can say x1 dot m1 and x2 dot m1 we can do that. What I'm concerned about here is I want to know the average of marks. Okay, so I've got these three variables. I want to perform some operation. How do you find the average? So you can the logic of average you can define by yourself. You know everyone have their own way of doing it. I will be doing a very simple calculation. So let me create a method called as dev method called average. So when I say object dot average it will give me average marks. Okay, so I want to return the average marks. And the way you do that by saying if done you want to return the value. And here you will simply say m1 or not just m1 you have to say self dot m1 plus self dot m3. So we have to divide this number by three. That's how you find the average right and we know the stuff right. That's how you find an average of multiple numbers. So we got the average and we are returning the value. Okay, so now this if you focus on this average this is an instance method. How do you know that's an instance method because we are passing self. Now when you say self it means it belongs to a particular object right. Of course we are defining that in a class but it works with the object and that's why you're passing self. So if you want to call average you have to say s1 dot average or you have to say s2 dot average because we are passing self. We cannot simply say student dot average because we are not using object there. But in this case we have to say s1 dot AVG. That's how you do it. So I have to say s1 dot AVG. It will give you the values. I will print the value here. I would say print the average here. So let's run this code and you can see it works. We got the average of for student. You can do the same thing for second. You can stop saying s1 dot average. You can say s2 dot average. If you run this code or you can see we got the average for second student as well. And they almost say I don't know why. Okay so after changing value we got different average. So this was just in coincidences. I have given some values and then they were giving the same average. So you got different average for s1 and different average for s2 dot. So that works. Now what we are doing. So this method here this average is an instance method because it works with the object. Now in instance itself we have two different types. The first type of instance which we use is called as accesses. And the second type we use is mutators. So we have accesses and new tators. Now what is accesses? So if you are only fetching the value. See ultimately when you talk about this method there is only responsible to work with variables right which is your instance variables. So if you want to just fetch the value of the instance variable we will be using accesses. If you want to modify the value you will use mutators. So the way you do that example if you want to fetch the value of m1. So if you want to know the value for m1 you can fetch directly you can say print s1 dot m1 you will get the value like this or instead of using the variables which should actually use methods. So what we will do here is we will say def and we will define the function as get m1. So we will say get m1 and which m1 you want. So you will say return I want to return the value for self dot m1. This is how you do it. So if you want the value for m1 you will say get m1 and you got the value. Normally it is not a composition to have that get keyword there you can also say m1 that is fine but when you write a code conventionally you simply specify get there. So whenever you say get methods or in fact to set the value where you set methods example if you want to set the value for m1 you will say set m1 of course we are passing that from a constructor. So we can say set m1 and you can pass the value 0 I would pass the value f I will say a value and this value will be assigned to m1. So we will say self dot m1 is equal to value. So you can use constricted to pass the value or we can use setters right. So we have get methods and we have set methods. Now for different variables we will be having different get and set methods right. So if you have three variables you might be using three get methods and three set methods and that's why they are called as getters and setters right. So getters get the value setter set the value getters only fetch the value it will not change the value that's why we say accesses setters they change the value and that's why we say mutators. So this makes sense where do I get you can call this methods right but this works. Now once you talked about instance the second type we have is a class method. Now why we use class methods see if you talk about this variables m1 m2 m3 those are your instance variable right and instance variable can be used with instance methods. What about this one this is cool right now school is basically your class variable and if you want to work with class variable you need to use a class method and the way you do that let's say I want to know the info of a student so I will send F info info will print the name of the school okay. So let's say if you are shutting for a telescope you will be it will print telescope and of course all the students belong to same school right. If you change school name for one student it will affect all the students example this channel name earlier was loving skills right and we have changed it to telescope. So if the name changes for one subscriber it will affect all the subscribers right and that's what is happening here. So if I want to print info and that to a school name I don't want marks here of course we don't want to work with self we want to work with class right. So if you are working with instance you will use a self keyword if you are working with a class variables you have to use class C L S okay it should be CLS it should not be something else. Once you got that you can simply print the value so you can say print or you can return the value your choice or you can say return CLS dot school that's how you do it so you have to say CLS dot school. So when you want to work with class variable you have to say CLS dot school okay but then how do you call info it's very simple you will say print S1 dot info we can do that but there's only one problem. Info should work with all the objects right it's not specific to one object so instead of using S1 we can use a student dot info. Now this should work let's try I will say run oh we got an error it says information one required potential argument which is a position argument which is CLS out we have to pass CLS that's weird I don't want to pass CLS right in fact we are not even doing that for average we are not passing S1 here also I don't want to pass thing normally what happens you know if you want to create a class method we need to use a special symbol or special way of doing that and we can use something called decodators so we have to say add rate and you have to mention this as a class method again we'll talk about decoders later in detail by timing we got a class method decodator so if you want to use info as a class method you have to say at class method okay that's how you define it so let's run this code now and it works you can see that we got the score there quite simple right so now we know about instance method because it works with instance variables now we know about class method because it works with class variables how about static methods say think about this let's say if you want any method okay it doesn't matter what method we want here if you want a method which has nothing to do with instance variable which has nothing to do with the class variables we want to do something extra okay so something different which is not concerned with the variables at that time you will be using a static method because we are not concerned about instance variable we are not concerned about class variables example let's say I want to print the info about this class okay not about student but the class so I will say def about you know in fact instead of saying info for class I would say get school name that will make more sense so I'm changing the name from info to get school for class method okay not for this and let me also change from here so we'll say get school here I will define a function and the function name will be info because when I say info I want to know the class name okay so this is not related to the object this is not related to class as I will keep it blank okay so if you don't want to read this to a class keep it blank if you don't want to read this to a object keep it blank no self no class okay static method and this will return this will print in fact not return this will print we can do whatever you want so we can say this is student class you can do that right so we are printing this is student class and in ABC module that's it you can print whatever you want as I mentioned important is this method is nothing to do with the class variables and instance variable now it will be useful so let's say if you want to perform any operation which has something to do with the other object or the class objects we can use static methods here or if you want to perform some operations like finding a factor of a number right because the factor yield has nothing to do with the class variables or instance variable maybe you're passing a value you just want to know if it's a factor of the number you can use static methods there now since we are using a static method we need to use a special decorator here as well so if you have to say any guess we will be using static methods so for class method we have to say class method and for static method you have to use static method okay and then you can call it so you can say so you have to use a class name so you will say student dot info right so this static so you don't have to pass anything not even class and not even object let's run this code and it works okay so basically we have different types of methods we have instance method which works with instance variable class method works with class variable and static works with nothing it has if you want to do something extra with a class nothing to do with class variables or instance variables go with static so if you have any more questions let me know in the comment section and so if you have not subscribed to the channel do it quickly that's it everyone bye bye","methods set, variables instance, objects use, methods basically, variables class, instance methods, methods different, variables use, operation methods, thing variables, static methods, class methods, methods static, variables methods, methods behavior","Recommended Tasks:
- Define instance methods, class methods, and static methods.
- Demonstrate instance, class, and static variables."
54-Python-Tutorial-for-Beginners-Inner-class.mp4,D:\Project\Python_Ai_Course_Recommeder\data\videos\060-54-Python-Tutorial-for-Beginners-Inner-class.mp4," Welcome back, aliens, my name is Ivan Dreddy and let's continue the series on Python. Now till this point we have talked about different types of variables and we have talked about different types of methods, right? So we can write variable and methods instead of class, right? So a class will have variables and methods. The question is can we have a class inside a class? That sounds weird, right? Why would anyone have a class inside a class? So let's try to understand that. So let's say I have a class here and this class name is student as usual with the way we have done earlier and when we talk about shouldn't we have different types of variables, right? Let me define that function first and the variables which I want here is self first I want a name. Of course in the last example we have taken marks, but here let's take something different. I would take a name of a person and that will be coming from a user of course or from vindicator object. We'll say name. The second thing I want is role number and I want these two details and then I will assign name here and I will say self dot role number. Now we have used to it, right? So I would say role number, right? Now once we got these two variables, what I want is I want to print them. The way you print this values is by defining some functions, right? Of course you can do that directly, exactly five create object here. So let's say the object is S1 and I will say student and when you create this object you have to pass values as well, right? The first one I want is Navine and role number is lecture two. The second object we want here is S2 and we'll say student in which we'll be having two things. Of course I would say this is also Jenny and the role number is let's say three. So I have Navine and we have Jenny here, we got two and three. Okay, so let's say I want to print. I want to print S1. So I want to print all the details about S1. Okay, I want to print the name and role number. So the way you do that is by saying S1 dot name and we can say S1 dot role number. So this is how you can print the values, right? So it means that on this code and you can say it works. We got it here details about S1. Now what I want to do is I don't want to see this doesn't look good, right? What you should be saying is you should say S1 dot show. So when I say S1 dot show, it should print all the details about S1. Maybe it has a number name or different variables, right? So of course we need to define that function or method here. So we'll say to show. So this will print self dot name and we'll print self dot role number. So we are printing this two data, right? It should work. Let's run this code and you can see we got the same data. Now let's say student also has a laptop. Of course, right? When you say you are doing IT, in fact, we have done that, right? So you are a student of telescope. You will be using a laptop to run your code or extra. It doesn't matter. And let's say we want laptop here. So of course I want to know which laptop we are using. So I want to know your config. Now in that case, I will also ask a user, hey, tell me which laptop you are using. The problem is we talk about laptop. There are different things important, right? It's not just about brand. You will not simply say, hey, I have HP laptop. I have Alina will laptop. You will also mention the configuration. Maybe CPU and RAM. That's very important. Maybe any I5 CPU with let's say HB RAM is enough. So I want to know your config. So what you will do? Will you pass three variables like you will pass a brand HP and then you will also pass the CPU which you are using. Let's say I5 or you will also pass let's say RAM of HB. Yes, you can do that. Okay. So I have to accept this variable here. I have to accept that here, right? And we can do that. The other option which we have is with different. Okay. So the other option which we can do here is we can create a class. Okay. We can create a separate class as laptop or instead of creating a class outside this student, we can also create laptop inside students. So a laptop will be only used by student and in this case, so I will say a class and I will say laptop. So we are creating a laptop class inside a student so that we can get that group. Okay. So we have to also say deaf here and we have to say in it, right? And then let's create variables. So the first variable we need here is brand. And let's say the brand is HP. That's the first thing we need. Second thing we need is the CPU which you are working with. I would say CPU is I5 and the third one is RAM. Let's say HB RAM. So we can create the object here itself. So we can create the object inside the unit and normally that's what we do. So if you want to create an object of laptop, we should be creating that object inside the outer class. Okay. So the object of laptop will be the inside the student class. The way to do that is very simple. Here you will say self. LAP. You can create any variable you want and you will say laptop or we are getting other. So we have to say self. Okay. This works. So you can see in the construct itself, you can define a class. So we can create a class. You can define a variable lab and you can define the object. So if you really want to use a laptop, you have to say this student object dot LAP. Example outside if I want to use it, I will say S1 dot LAP dot whatever brand you want to fetch. So you cannot simply say lab dot plan. You have to say S1 dot lab dot plan because the lab object is inside the student class. This is one way. What if you want to create another object of it? Let's say I don't want lab object. So you can simply say lab 1 is equal to S1 dot LAP. You can create another object for S2. You can say lab 2 is equal to S2 dot LAP because for every object, you will get different laptop object. Okay. Trust me, this is how it works. In fact, you can also check that. We got two different laptop object here. We will put in lab 1 and let's put in lab 2. So let's put in the ideas of lab 1. We got two different objects here. So this works. Okay. This is where you create inner class. Okay. So we have a lab object. This is where you create inner class. Okay. So we have a laptop as an inner class of a student. Right. You could have done the outer class as well. I mean, you could have do different classes that we want that works. But sometimes when you know that this class will be used only for student, nothing else. Then you don't have to create a separate file for that. You can do that in student class itself. Now, can I directly create the object outside? Let's say I don't want to get object of laptop inside the student class. Can we do it outside directly? Let's try. So I will say lab 1 is equal to, I will say student dot laptop. Now why shouldn't here? Because you cannot simply access laptop directly, right? Because laptop class belongs to a student class. So we have to always say student dot laptop constructor. You cannot simply create laptop directly. Okay. So this one thing you have to remember. You can create the object of inner class inside outer class. Or you can do that outside the outer class provided. You are using the outer class name. So if you say student dot laptop. Okay. This works. In fact, just to enhance the example, whatever it also does, we can create a show method for a laptop. So we can say show for laptop. And you can see we have two show methods. One is student and one is laptop. Okay. So in such student, we have show method inside laptop. Also we have show. But these are two different show methods. The show method of student will print the data about a student. And the show method of laptop will print the show method of student. I know that makes sense. Let's do that. So I will say print self dot brand self dot CPU and self dot run. Okay. So we are printing this data. So this show is different from this show. Let me now print laptop here. Let me have this quote. And you can see it prints only the name and the role number. I also want to print the laptop. Oh, you need the object. Right. We have removed that statement. Because if you want to access laptop, you have to say self dot lap is equal to laptop. But you have to say self. So this is important. And after printing this will call lap dot show. Because we also want to do that. So you will say self dot laptop show. Okay. So we are printing data about a student and laptop as well. So this should work. Let's run this quote. And it worked. You can see we call the data about a student and laptop as well. So this is how you create the class inside a class. So that's it. I hope you enjoyed this session where we have talked about how you can create a class inside a class which is also called as inner class. So that's it everyone. I hope you enjoyed it. And do subscribe for the videos. Thank you so much. Bye.","classes want, inner class, class used, separate class, class create, types variables, instead class, inside class, class way, create class, class inside, define class, class define, different classes, class variables","Recommended Tasks:
- Create a class within a class and access its members.
- Demonstrate instance, class, and static variables.
- Instantiate objects of a class and call their methods."
